
FECU_CORE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d38  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004f30  08004f30  00005f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f48  08004f48  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f48  08004f48  00005f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f50  08004f50  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f50  08004f50  00005f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f54  08004f54  00005f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004f58  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  2000000c  08004f64  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08004f64  0000628c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efc4  00000000  00000000  0000603a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002453  00000000  00000000  00014ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00017458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aef  00000000  00000000  00018288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ecd  00000000  00000000  00018d77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001074c  00000000  00000000  00041c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100dca  00000000  00000000  00052390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015315a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bc4  00000000  00000000  001531a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  00156d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004f18 	.word	0x08004f18

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08004f18 	.word	0x08004f18

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <CAN1_FILTER_INIT>:
	 * 	Function: filtercanconfig
	 * 	Purpose: Define the configurations needed to recieve data.
	 * 	Inputs: None. Just states the configurations.
	 */

void CAN1_FILTER_INIT(CAN_FilterTypeDef *canfil){
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	   canfil->FilterBank = 0;								// This refers to which filter is being configured. On this case is the filter number 0
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2200      	movs	r2, #0
 8000534:	615a      	str	r2, [r3, #20]
	   canfil->FilterMode = CAN_FILTERMODE_IDMASK;					// FilterMode: How are we filtering the incoming messages. Only the messages that coincide with the mask and the filter are accepted
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	619a      	str	r2, [r3, #24]
	   canfil->FilterFIFOAssignment = CAN_FILTER_FIFO0;			// Defines at which FIFO is this filter being configured to.
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2200      	movs	r2, #0
 8000540:	611a      	str	r2, [r3, #16]
	   canfil->FilterIdHigh = 0x0000;						// MSB: Most Significant Bit. When it's in 0, accepts all the messages
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
	   canfil->FilterIdLow = 0x0000;						// LSB: Least Significant Bit. When it's in 0, accepts all the messages
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2200      	movs	r2, #0
 800054c:	605a      	str	r2, [r3, #4]
	   canfil->FilterMaskIdHigh = 0x0000;					// Most Significant Bit of the mask. When it's in 0, accepts all the messages
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
	   canfil->FilterMaskIdLow = 0x0000;					// Least Significant Bit of the mask. When it's in 0, accepts all the messages
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
	   canfil->FilterScale = CAN_FILTERSCALE_32BIT;				// Defines the Filter Scale. (use the 32 bits)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2201      	movs	r2, #1
 800055e:	61da      	str	r2, [r3, #28]
	   canfil->FilterActivation = ENABLE;					// This activates the filter as it is enable
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2201      	movs	r2, #1
 8000564:	621a      	str	r2, [r3, #32]
	   canfil->SlaveStartFilterBank = 14;					// Indicates the first filter slave number. In this case it is the principal filter.
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	220e      	movs	r2, #14
 800056a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <CAN2_FILTER_INIT>:

void CAN2_FILTER_INIT(CAN_FilterTypeDef *canfil){
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	   canfil->FilterBank = 14;								// This refers to which filter is being configured. On this case is the filter number 0
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	220e      	movs	r2, #14
 8000584:	615a      	str	r2, [r3, #20]
	   canfil->FilterMode = CAN_FILTERMODE_IDMASK;					// FilterMode: How are we filtering the incoming messages. Only the messages that coincide with the mask and the filter are accepted
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2200      	movs	r2, #0
 800058a:	619a      	str	r2, [r3, #24]
	   canfil->FilterFIFOAssignment = CAN_FILTER_FIFO1;			// Defines at which FIFO is this filter being configured to.
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2201      	movs	r2, #1
 8000590:	611a      	str	r2, [r3, #16]
	   canfil->FilterIdHigh = 0x0000;						// MSB: Most Significant Bit. When it's in 0, accepts all the messages
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
	   canfil->FilterIdLow = 0x0000;						// LSB: Least Significant Bit. When it's in 0, accepts all the messages
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2200      	movs	r2, #0
 800059c:	605a      	str	r2, [r3, #4]
	   canfil->FilterMaskIdHigh = 0x0000;					// Most Significant Bit of the mask. When it's in 0, accepts all the messages
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
	   canfil->FilterMaskIdLow = 0x0000;					// Least Significant Bit of the mask. When it's in 0, accepts all the messages
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
	   canfil->FilterScale = CAN_FILTERSCALE_32BIT;				// Defines the Filter Scale. (use the 32 bits)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	61da      	str	r2, [r3, #28]
	   canfil->FilterActivation = ENABLE;					// This activates the filter as it is enable
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2201      	movs	r2, #1
 80005b4:	621a      	str	r2, [r3, #32]
	   canfil->SlaveStartFilterBank = 14;					// Indicates the first filter slave number. In this case it is the principal filter.
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	220e      	movs	r2, #14
 80005ba:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <CAN1_CONFIG_INIT>:

void CAN1_CONFIG_INIT(CAN_FilterTypeDef canfil, CAN_HandleTypeDef hcan){
 80005c8:	b084      	sub	sp, #16
 80005ca:	b580      	push	{r7, lr}
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	f107 0c08 	add.w	ip, r7, #8
 80005d2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if(HAL_CAN_ConfigFilter(&hcan, &canfil) != HAL_OK) Error_Handler();
 80005d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80005da:	f107 0108 	add.w	r1, r7, #8
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 fe10 	bl	8002204 <HAL_CAN_ConfigFilter>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <CAN1_CONFIG_INIT+0x26>
 80005ea:	f000 fe13 	bl	8001214 <Error_Handler>
    if(HAL_CAN_Start(&hcan) != HAL_OK)Error_Handler();
 80005ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 fef2 	bl	80023dc <HAL_CAN_Start>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <CAN1_CONFIG_INIT+0x3a>
 80005fe:	f000 fe09 	bl	8001214 <Error_Handler>
    if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)Error_Handler();
 8000602:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000606:	2102      	movs	r1, #2
 8000608:	4618      	mov	r0, r3
 800060a:	f002 f90d 	bl	8002828 <HAL_CAN_ActivateNotification>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <CAN1_CONFIG_INIT+0x50>
 8000614:	f000 fdfe 	bl	8001214 <Error_Handler>
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000620:	b004      	add	sp, #16
 8000622:	4770      	bx	lr

08000624 <CAN2_CONFIG_INIT>:

void CAN2_CONFIG_INIT(CAN_FilterTypeDef canfil, CAN_HandleTypeDef hcan){
 8000624:	b084      	sub	sp, #16
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
 800062a:	f107 0c08 	add.w	ip, r7, #8
 800062e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if(HAL_CAN_ConfigFilter(&hcan, &canfil) != HAL_OK) Error_Handler();
 8000632:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000636:	f107 0108 	add.w	r1, r7, #8
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fde2 	bl	8002204 <HAL_CAN_ConfigFilter>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <CAN2_CONFIG_INIT+0x26>
 8000646:	f000 fde5 	bl	8001214 <Error_Handler>
    if(HAL_CAN_Start(&hcan) != HAL_OK)Error_Handler();
 800064a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fec4 	bl	80023dc <HAL_CAN_Start>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <CAN2_CONFIG_INIT+0x3a>
 800065a:	f000 fddb 	bl	8001214 <Error_Handler>
    if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)Error_Handler();
 800065e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000662:	2110      	movs	r1, #16
 8000664:	4618      	mov	r0, r3
 8000666:	f002 f8df 	bl	8002828 <HAL_CAN_ActivateNotification>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <CAN2_CONFIG_INIT+0x50>
 8000670:	f000 fdd0 	bl	8001214 <Error_Handler>
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800067c:	b004      	add	sp, #16
 800067e:	4770      	bx	lr

08000680 <message_cantx_FECU_Data1>:
		} else {
			Keep_Alive = 0;
		}
	}

	void message_cantx_FECU_Data1(CAN_HandleTypeDef hcan2,uint16_t APPS1, uint16_t APPS2, uint16_t Brake_Pedal,uint16_t Steering_Sensor,uint8_t *TxData, CAN_TxHeaderTypeDef TxHeader){
 8000680:	b084      	sub	sp, #16
 8000682:	b580      	push	{r7, lr}
 8000684:	af00      	add	r7, sp, #0
 8000686:	f107 0c08 	add.w	ip, r7, #8
 800068a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

		TxHeader.DLC = 8; 									//Number of bites to be transmitted max- 8. DLC: Data Length Code
 800068e:	2308      	movs	r3, #8
 8000690:	657b      	str	r3, [r7, #84]	@ 0x54
		TxHeader.IDE = 0;									//IDE: Identifier Extension. ID_STD: Standard Identifier. Dominant(0) = 11 bit ID, Recessive(1) = 29 bit ID
 8000692:	2300      	movs	r3, #0
 8000694:	64fb      	str	r3, [r7, #76]	@ 0x4c
		TxHeader.RTR = 0;									//RTR: Remote Transmission Request, Dominant(0) = Data frame, Recessive (1) = Remote Frame. Type of trace
 8000696:	2300      	movs	r3, #0
 8000698:	653b      	str	r3, [r7, #80]	@ 0x50
		TxHeader.StdId = 0x90;								//Standard identifier ID
 800069a:	2390      	movs	r3, #144	@ 0x90
 800069c:	647b      	str	r3, [r7, #68]	@ 0x44
		TxHeader.TransmitGlobalTime = DISABLE;				//A temporal mark in the CAN message is not added
 800069e:	2300      	movs	r3, #0
 80006a0:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
		TxData[0] = APPS1 >> 8;						//Sent data. The TxData is the buffer where the data is saved
 80006a4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80006a6:	0a1b      	lsrs	r3, r3, #8
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80006ae:	701a      	strb	r2, [r3, #0]
		TxData[1] = APPS1;
 80006b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80006b2:	3301      	adds	r3, #1
 80006b4:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80006b6:	b2d2      	uxtb	r2, r2
 80006b8:	701a      	strb	r2, [r3, #0]
		TxData[2] = APPS2 >> 8;
 80006ba:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80006bc:	0a1b      	lsrs	r3, r3, #8
 80006be:	b29a      	uxth	r2, r3
 80006c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80006c2:	3302      	adds	r3, #2
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	701a      	strb	r2, [r3, #0]
		TxData[3] = APPS2;
 80006c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80006ca:	3303      	adds	r3, #3
 80006cc:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80006ce:	b2d2      	uxtb	r2, r2
 80006d0:	701a      	strb	r2, [r3, #0]
		TxData[4] = Brake_Pedal >> 8;						//Sent data. The TxData is the buffer where the data is saved
 80006d2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80006d4:	0a1b      	lsrs	r3, r3, #8
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80006da:	3304      	adds	r3, #4
 80006dc:	b2d2      	uxtb	r2, r2
 80006de:	701a      	strb	r2, [r3, #0]
		TxData[5] = Brake_Pedal;
 80006e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80006e2:	3305      	adds	r3, #5
 80006e4:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	701a      	strb	r2, [r3, #0]
		TxData[6] = Steering_Sensor >> 8;
 80006ea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80006f2:	3306      	adds	r3, #6
 80006f4:	b2d2      	uxtb	r2, r2
 80006f6:	701a      	strb	r2, [r3, #0]
		TxData[7] = Steering_Sensor;
 80006f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80006fa:	3307      	adds	r3, #7
 80006fc:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80006fe:	b2d2      	uxtb	r2, r2
 8000700:	701a      	strb	r2, [r3, #0]
		if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK);
 8000702:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8000706:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <message_cantx_FECU_Data1+0xa0>)
 8000708:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800070a:	f107 0008 	add.w	r0, r7, #8
 800070e:	f001 fea9 	bl	8002464 <HAL_CAN_AddTxMessage>
						//Sent data. The TxData is the buffer where the data is saved

		}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800071a:	b004      	add	sp, #16
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	20000028 	.word	0x20000028

08000724 <message_cantx_FECU_Data2>:

	void message_cantx_FECU_Data2(CAN_HandleTypeDef hcan2,uint16_t Susp_F_R, uint16_t Susp_F_L, uint32_t Pitot_Sensor, uint8_t *TxData, CAN_TxHeaderTypeDef TxHeader){
 8000724:	b084      	sub	sp, #16
 8000726:	b580      	push	{r7, lr}
 8000728:	af00      	add	r7, sp, #0
 800072a:	f107 0c08 	add.w	ip, r7, #8
 800072e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

		TxHeader.DLC = 6; 									//Number of bites to be transmitted max- 8. DLC: Data Length Code
 8000732:	2306      	movs	r3, #6
 8000734:	653b      	str	r3, [r7, #80]	@ 0x50
		TxHeader.IDE = 0;									//IDE: Identifier Extension. ID_STD: Standard Identifier. Dominant(0) = 11 bit ID, Recessive(1) = 29 bit ID
 8000736:	2300      	movs	r3, #0
 8000738:	64bb      	str	r3, [r7, #72]	@ 0x48
		TxHeader.RTR = 0;									//RTR: Remote Transmission Request, Dominant(0) = Data frame, Recessive (1) = Remote Frame. Type of trace
 800073a:	2300      	movs	r3, #0
 800073c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		TxHeader.StdId = 0x91;								//Standard identifier ID
 800073e:	2391      	movs	r3, #145	@ 0x91
 8000740:	643b      	str	r3, [r7, #64]	@ 0x40
		TxHeader.TransmitGlobalTime = DISABLE;				//A temporal mark in the CAN message is not added
 8000742:	2300      	movs	r3, #0
 8000744:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
		TxData[0] = Susp_F_R >> 8;						//Sent data. The TxData is the buffer where the data is saved
 8000748:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800074a:	0a1b      	lsrs	r3, r3, #8
 800074c:	b29b      	uxth	r3, r3
 800074e:	b2da      	uxtb	r2, r3
 8000750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000752:	701a      	strb	r2, [r3, #0]
		TxData[1] = Susp_F_R;
 8000754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000756:	3301      	adds	r3, #1
 8000758:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800075a:	b2d2      	uxtb	r2, r2
 800075c:	701a      	strb	r2, [r3, #0]
		TxData[2] = Susp_F_L >> 8;
 800075e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000760:	0a1b      	lsrs	r3, r3, #8
 8000762:	b29a      	uxth	r2, r3
 8000764:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000766:	3302      	adds	r3, #2
 8000768:	b2d2      	uxtb	r2, r2
 800076a:	701a      	strb	r2, [r3, #0]
		TxData[3] = Susp_F_L;
 800076c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800076e:	3303      	adds	r3, #3
 8000770:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	701a      	strb	r2, [r3, #0]
		TxData[4] = Pitot_Sensor>> 8;
 8000776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000778:	0a1a      	lsrs	r2, r3, #8
 800077a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800077c:	3304      	adds	r3, #4
 800077e:	b2d2      	uxtb	r2, r2
 8000780:	701a      	strb	r2, [r3, #0]
		TxData[5] = Pitot_Sensor;
 8000782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000784:	3305      	adds	r3, #5
 8000786:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000788:	b2d2      	uxtb	r2, r2
 800078a:	701a      	strb	r2, [r3, #0]
		if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK);
 800078c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000790:	4b05      	ldr	r3, [pc, #20]	@ (80007a8 <message_cantx_FECU_Data2+0x84>)
 8000792:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000794:	f107 0008 	add.w	r0, r7, #8
 8000798:	f001 fe64 	bl	8002464 <HAL_CAN_AddTxMessage>
						//Sent data. The TxData is the buffer where the data is saved

		}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007a4:	b004      	add	sp, #16
 80007a6:	4770      	bx	lr
 80007a8:	20000028 	.word	0x20000028

080007ac <message_cantx_FECU_SDC>:

	void message_cantx_FECU_SDC(CAN_HandleTypeDef hcan,uint8_t SDC_Setas, uint8_t SDC_BSPD_Intertia, uint8_t SDC_BOTS,uint8_t *TxData, CAN_TxHeaderTypeDef TxHeader){
 80007ac:	b084      	sub	sp, #16
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	f107 0c08 	add.w	ip, r7, #8
 80007b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

		TxHeader.DLC = 1; 									//Number of bites to be transmitted max- 8. DLC: Data Length Code
 80007ba:	2301      	movs	r3, #1
 80007bc:	653b      	str	r3, [r7, #80]	@ 0x50
		TxHeader.IDE = 0;									//IDE: Identifier Extension. ID_STD: Standard Identifier. Dominant(0) = 11 bit ID, Recessive(1) = 29 bit ID
 80007be:	2300      	movs	r3, #0
 80007c0:	64bb      	str	r3, [r7, #72]	@ 0x48
		TxHeader.RTR = 0;									//RTR: Remote Transmission Request, Dominant(0) = Data frame, Recessive (1) = Remote Frame. Type of trace
 80007c2:	2300      	movs	r3, #0
 80007c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
		TxHeader.StdId = 0xD0;								//Standard identifier ID
 80007c6:	23d0      	movs	r3, #208	@ 0xd0
 80007c8:	643b      	str	r3, [r7, #64]	@ 0x40
		TxHeader.TransmitGlobalTime = DISABLE;				//A temporal mark in the CAN message is not added
 80007ca:	2300      	movs	r3, #0
 80007cc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
		TxData[0] = (0b00000111)&(0b00000000|SDC_Setas|SDC_BSPD_Intertia<<1|SDC_BOTS<<2);						//Sent data. The TxData is the buffer where the data is saved
 80007d0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	b25a      	sxtb	r2, r3
 80007d8:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 80007dc:	4313      	orrs	r3, r2
 80007de:	b25a      	sxtb	r2, r3
 80007e0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	4313      	orrs	r3, r2
 80007ea:	b25b      	sxtb	r3, r3
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007f6:	701a      	strb	r2, [r3, #0]
		if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK);
 80007f8:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80007fc:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <message_cantx_FECU_SDC+0x68>)
 80007fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000800:	f107 0008 	add.w	r0, r7, #8
 8000804:	f001 fe2e 	bl	8002464 <HAL_CAN_AddTxMessage>
						//Sent data. The TxData is the buffer where the data is saved

		}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000810:	b004      	add	sp, #16
 8000812:	4770      	bx	lr
 8000814:	20000028 	.word	0x20000028

08000818 <message_cantx_FECU_Keep_Alive>:

	void message_cantx_FECU_Keep_Alive(CAN_HandleTypeDef hcan, uint8_t Keep_Alive,uint8_t *TxData, CAN_TxHeaderTypeDef TxHeader){
 8000818:	b084      	sub	sp, #16
 800081a:	b580      	push	{r7, lr}
 800081c:	af00      	add	r7, sp, #0
 800081e:	f107 0c08 	add.w	ip, r7, #8
 8000822:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

		TxHeader.DLC = 1; 									//Number of bites to be transmitted max- 8. DLC: Data Length Code
 8000826:	2301      	movs	r3, #1
 8000828:	64bb      	str	r3, [r7, #72]	@ 0x48
		TxHeader.IDE = 0;									//IDE: Identifier Extension. ID_STD: Standard Identifier. Dominant(0) = 11 bit ID, Recessive(1) = 29 bit ID
 800082a:	2300      	movs	r3, #0
 800082c:	643b      	str	r3, [r7, #64]	@ 0x40
		TxHeader.RTR = 0;									//RTR: Remote Transmission Request, Dominant(0) = Data frame, Recessive (1) = Remote Frame. Type of trace
 800082e:	2300      	movs	r3, #0
 8000830:	647b      	str	r3, [r7, #68]	@ 0x44
		TxHeader.StdId = 0xCA;								//Standard identifier ID
 8000832:	23ca      	movs	r3, #202	@ 0xca
 8000834:	63bb      	str	r3, [r7, #56]	@ 0x38
		TxHeader.TransmitGlobalTime = DISABLE;				//A temporal mark in the CAN message is not added
 8000836:	2300      	movs	r3, #0
 8000838:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
		TxData[0] = Keep_Alive;						//Sent data. The TxData is the buffer where the data is saved
 800083c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800083e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000842:	701a      	strb	r2, [r3, #0]
		if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK);
 8000844:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000848:	4b05      	ldr	r3, [pc, #20]	@ (8000860 <message_cantx_FECU_Keep_Alive+0x48>)
 800084a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800084c:	f107 0008 	add.w	r0, r7, #8
 8000850:	f001 fe08 	bl	8002464 <HAL_CAN_AddTxMessage>
						//Sent data. The TxData is the buffer where the data is saved

		}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800085c:	b004      	add	sp, #16
 800085e:	4770      	bx	lr
 8000860:	20000028 	.word	0x20000028
 8000864:	00000000 	.word	0x00000000

08000868 <applyLowPassFilter>:
//        v->out = v->in;        // Without filter. Out(k) = In(k)
//    }
//}

void applyLowPassFilter(uint16_t *value)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	float fc = 0.5f;  // Cutoff frequency in kHz
 8000870:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8000874:	617b      	str	r3, [r7, #20]
	float Ts = 0.001f;  // Sampling time in seconds
 8000876:	4b34      	ldr	r3, [pc, #208]	@ (8000948 <applyLowPassFilter+0xe0>)
 8000878:	613b      	str	r3, [r7, #16]
	float alpha = (fc*Ts*1000.0*PI2)/((fc*Ts*1000.0*PI2)+1.0);
 800087a:	ed97 7a05 	vldr	s14, [r7, #20]
 800087e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000886:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800088a:	ed9f 6b2b 	vldr	d6, [pc, #172]	@ 8000938 <applyLowPassFilter+0xd0>
 800088e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000892:	ed9f 6b2b 	vldr	d6, [pc, #172]	@ 8000940 <applyLowPassFilter+0xd8>
 8000896:	ee27 5b06 	vmul.f64	d5, d7, d6
 800089a:	ed97 7a05 	vldr	s14, [r7, #20]
 800089e:	edd7 7a04 	vldr	s15, [r7, #16]
 80008a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008aa:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8000938 <applyLowPassFilter+0xd0>
 80008ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008b2:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8000940 <applyLowPassFilter+0xd8>
 80008b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008ba:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80008be:	ee37 6b06 	vadd.f64	d6, d7, d6
 80008c2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80008c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008ca:	edc7 7a03 	vstr	s15, [r7, #12]
	value[0] = (uint16_t)round(alpha*value[0]+(1-alpha)*value[1]);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	ee07 3a90 	vmov	s15, r3
 80008d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008da:	edd7 7a03 	vldr	s15, [r7, #12]
 80008de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80008e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80008ea:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	3302      	adds	r3, #2
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	ee07 3a90 	vmov	s15, r3
 80008f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000904:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000908:	eeb0 0b47 	vmov.f64	d0, d7
 800090c:	f004 fac0 	bl	8004e90 <round>
 8000910:	eeb0 7b40 	vmov.f64	d7, d0
 8000914:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000918:	ee17 3a90 	vmov	r3, s15
 800091c:	b29a      	uxth	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	801a      	strh	r2, [r3, #0]
	value[1] = value[0];
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	3302      	adds	r3, #2
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	8812      	ldrh	r2, [r2, #0]
 800092a:	801a      	strh	r2, [r3, #0]
}
 800092c:	bf00      	nop
 800092e:	3718      	adds	r7, #24
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	f3af 8000 	nop.w
 8000938:	00000000 	.word	0x00000000
 800093c:	408f4000 	.word	0x408f4000
 8000940:	54442d18 	.word	0x54442d18
 8000944:	401921fb 	.word	0x401921fb
 8000948:	3a83126f 	.word	0x3a83126f

0800094c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800094c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094e:	b091      	sub	sp, #68	@ 0x44
 8000950:	af10      	add	r7, sp, #64	@ 0x40
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000952:	f000 fc33 	bl	80011bc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000956:	f000 fed8 	bl	800170a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095a:	f000 f863 	bl	8000a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095e:	f000 fa73 	bl	8000e48 <MX_GPIO_Init>
  MX_DMA_Init();
 8000962:	f000 fa53 	bl	8000e0c <MX_DMA_Init>
  MX_CAN2_Init();
 8000966:	f000 f9a9 	bl	8000cbc <MX_CAN2_Init>
  MX_TIM14_Init();
 800096a:	f000 fa2b 	bl	8000dc4 <MX_TIM14_Init>
  MX_ADC1_Init();
 800096e:	f000 f8c9 	bl	8000b04 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000972:	f000 f96d 	bl	8000c50 <MX_CAN1_Init>
  MX_TIM5_Init();
 8000976:	f000 f9d7 	bl	8000d28 <MX_TIM5_Init>

  /* USER CODE BEGIN 2 */
//
  CAN1_FILTER_INIT(&canfil);												//CAN 1 Filter
 800097a:	4822      	ldr	r0, [pc, #136]	@ (8000a04 <main+0xb8>)
 800097c:	f7ff fdd4 	bl	8000528 <CAN1_FILTER_INIT>
  CAN2_FILTER_INIT(&canfil2);											//CAN 2 Filter
 8000980:	4821      	ldr	r0, [pc, #132]	@ (8000a08 <main+0xbc>)
 8000982:	f7ff fdf9 	bl	8000578 <CAN2_FILTER_INIT>

  CAN1_CONFIG_INIT(canfil, hcan1);										//CAN 1 Configuration - Initialization
 8000986:	4e1f      	ldr	r6, [pc, #124]	@ (8000a04 <main+0xb8>)
 8000988:	4b20      	ldr	r3, [pc, #128]	@ (8000a0c <main+0xc0>)
 800098a:	ac06      	add	r4, sp, #24
 800098c:	461d      	mov	r5, r3
 800098e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000996:	e895 0003 	ldmia.w	r5, {r0, r1}
 800099a:	e884 0003 	stmia.w	r4, {r0, r1}
 800099e:	466d      	mov	r5, sp
 80009a0:	f106 0410 	add.w	r4, r6, #16
 80009a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80009b0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80009b4:	f7ff fe08 	bl	80005c8 <CAN1_CONFIG_INIT>
  CAN2_CONFIG_INIT(canfil2, hcan2);
 80009b8:	4e13      	ldr	r6, [pc, #76]	@ (8000a08 <main+0xbc>)
 80009ba:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <main+0xc4>)
 80009bc:	ac06      	add	r4, sp, #24
 80009be:	461d      	mov	r5, r3
 80009c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009cc:	e884 0003 	stmia.w	r4, {r0, r1}
 80009d0:	466d      	mov	r5, sp
 80009d2:	f106 0410 	add.w	r4, r6, #16
 80009d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009de:	e885 0003 	stmia.w	r5, {r0, r1}
 80009e2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80009e6:	f7ff fe1d 	bl	8000624 <CAN2_CONFIG_INIT>

  HAL_ADC_Start_DMA(&hadc1,(uint32_t*) adc_buffer, 7);
 80009ea:	2207      	movs	r2, #7
 80009ec:	4909      	ldr	r1, [pc, #36]	@ (8000a14 <main+0xc8>)
 80009ee:	480a      	ldr	r0, [pc, #40]	@ (8000a18 <main+0xcc>)
 80009f0:	f000 ff2c 	bl	800184c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim14);
 80009f4:	4809      	ldr	r0, [pc, #36]	@ (8000a1c <main+0xd0>)
 80009f6:	f003 fdaf 	bl	8004558 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim5);
 80009fa:	4809      	ldr	r0, [pc, #36]	@ (8000a20 <main+0xd4>)
 80009fc:	f003 fd3c 	bl	8004478 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <main+0xb4>
 8000a04:	20000220 	.word	0x20000220
 8000a08:	20000248 	.word	0x20000248
 8000a0c:	200000d4 	.word	0x200000d4
 8000a10:	200000fc 	.word	0x200000fc
 8000a14:	200001bc 	.word	0x200001bc
 8000a18:	2000002c 	.word	0x2000002c
 8000a1c:	20000170 	.word	0x20000170
 8000a20:	20000124 	.word	0x20000124

08000a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b094      	sub	sp, #80	@ 0x50
 8000a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	2234      	movs	r2, #52	@ 0x34
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f004 fa00 	bl	8004e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a48:	4b2c      	ldr	r3, [pc, #176]	@ (8000afc <SystemClock_Config+0xd8>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4c:	4a2b      	ldr	r2, [pc, #172]	@ (8000afc <SystemClock_Config+0xd8>)
 8000a4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a54:	4b29      	ldr	r3, [pc, #164]	@ (8000afc <SystemClock_Config+0xd8>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a60:	4b27      	ldr	r3, [pc, #156]	@ (8000b00 <SystemClock_Config+0xdc>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a68:	4a25      	ldr	r2, [pc, #148]	@ (8000b00 <SystemClock_Config+0xdc>)
 8000a6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a6e:	6013      	str	r3, [r2, #0]
 8000a70:	4b23      	ldr	r3, [pc, #140]	@ (8000b00 <SystemClock_Config+0xdc>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a80:	2301      	movs	r3, #1
 8000a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a84:	2310      	movs	r3, #16
 8000a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a90:	2308      	movs	r3, #8
 8000a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 108;
 8000a94:	236c      	movs	r3, #108	@ 0x6c
 8000a96:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f003 f82d 	bl	8003b08 <HAL_RCC_OscConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ab4:	f000 fbae 	bl	8001214 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ab8:	f002 ffd6 	bl	8003a68 <HAL_PWREx_EnableOverDrive>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000ac2:	f000 fba7 	bl	8001214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aca:	2302      	movs	r3, #2
 8000acc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ad6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000adc:	f107 0308 	add.w	r3, r7, #8
 8000ae0:	2103      	movs	r1, #3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f003 fabe 	bl	8004064 <HAL_RCC_ClockConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000aee:	f000 fb91 	bl	8001214 <Error_Handler>
  }
}
 8000af2:	bf00      	nop
 8000af4:	3750      	adds	r7, #80	@ 0x50
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40007000 	.word	0x40007000

08000b04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b16:	4b4c      	ldr	r3, [pc, #304]	@ (8000c48 <MX_ADC1_Init+0x144>)
 8000b18:	4a4c      	ldr	r2, [pc, #304]	@ (8000c4c <MX_ADC1_Init+0x148>)
 8000b1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b1c:	4b4a      	ldr	r3, [pc, #296]	@ (8000c48 <MX_ADC1_Init+0x144>)
 8000b1e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b24:	4b48      	ldr	r3, [pc, #288]	@ (8000c48 <MX_ADC1_Init+0x144>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b2a:	4b47      	ldr	r3, [pc, #284]	@ (8000c48 <MX_ADC1_Init+0x144>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b30:	4b45      	ldr	r3, [pc, #276]	@ (8000c48 <MX_ADC1_Init+0x144>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b36:	4b44      	ldr	r3, [pc, #272]	@ (8000c48 <MX_ADC1_Init+0x144>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b3e:	4b42      	ldr	r3, [pc, #264]	@ (8000c48 <MX_ADC1_Init+0x144>)
 8000b40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T5_TRGO;
 8000b46:	4b40      	ldr	r3, [pc, #256]	@ (8000c48 <MX_ADC1_Init+0x144>)
 8000b48:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c48 <MX_ADC1_Init+0x144>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8000b54:	4b3c      	ldr	r3, [pc, #240]	@ (8000c48 <MX_ADC1_Init+0x144>)
 8000b56:	2207      	movs	r2, #7
 8000b58:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b5a:	4b3b      	ldr	r3, [pc, #236]	@ (8000c48 <MX_ADC1_Init+0x144>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b62:	4b39      	ldr	r3, [pc, #228]	@ (8000c48 <MX_ADC1_Init+0x144>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b68:	4837      	ldr	r0, [pc, #220]	@ (8000c48 <MX_ADC1_Init+0x144>)
 8000b6a:	f000 fe2b 	bl	80017c4 <HAL_ADC_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000b74:	f000 fb4e 	bl	8001214 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000b80:	2303      	movs	r3, #3
 8000b82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b84:	463b      	mov	r3, r7
 8000b86:	4619      	mov	r1, r3
 8000b88:	482f      	ldr	r0, [pc, #188]	@ (8000c48 <MX_ADC1_Init+0x144>)
 8000b8a:	f000 ff6d 	bl	8001a68 <HAL_ADC_ConfigChannel>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000b94:	f000 fb3e 	bl	8001214 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4828      	ldr	r0, [pc, #160]	@ (8000c48 <MX_ADC1_Init+0x144>)
 8000ba6:	f000 ff5f 	bl	8001a68 <HAL_ADC_ConfigChannel>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000bb0:	f000 fb30 	bl	8001214 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4821      	ldr	r0, [pc, #132]	@ (8000c48 <MX_ADC1_Init+0x144>)
 8000bc2:	f000 ff51 	bl	8001a68 <HAL_ADC_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000bcc:	f000 fb22 	bl	8001214 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000bd0:	2309      	movs	r3, #9
 8000bd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd8:	463b      	mov	r3, r7
 8000bda:	4619      	mov	r1, r3
 8000bdc:	481a      	ldr	r0, [pc, #104]	@ (8000c48 <MX_ADC1_Init+0x144>)
 8000bde:	f000 ff43 	bl	8001a68 <HAL_ADC_ConfigChannel>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000be8:	f000 fb14 	bl	8001214 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000bec:	230b      	movs	r3, #11
 8000bee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000bf0:	2305      	movs	r3, #5
 8000bf2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4813      	ldr	r0, [pc, #76]	@ (8000c48 <MX_ADC1_Init+0x144>)
 8000bfa:	f000 ff35 	bl	8001a68 <HAL_ADC_ConfigChannel>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8000c04:	f000 fb06 	bl	8001214 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000c08:	230c      	movs	r3, #12
 8000c0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000c0c:	2306      	movs	r3, #6
 8000c0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c10:	463b      	mov	r3, r7
 8000c12:	4619      	mov	r1, r3
 8000c14:	480c      	ldr	r0, [pc, #48]	@ (8000c48 <MX_ADC1_Init+0x144>)
 8000c16:	f000 ff27 	bl	8001a68 <HAL_ADC_ConfigChannel>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8000c20:	f000 faf8 	bl	8001214 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000c24:	230d      	movs	r3, #13
 8000c26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000c28:	2307      	movs	r3, #7
 8000c2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_ADC1_Init+0x144>)
 8000c32:	f000 ff19 	bl	8001a68 <HAL_ADC_ConfigChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8000c3c:	f000 faea 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	2000002c 	.word	0x2000002c
 8000c4c:	40012000 	.word	0x40012000

08000c50 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000c54:	4b17      	ldr	r3, [pc, #92]	@ (8000cb4 <MX_CAN1_Init+0x64>)
 8000c56:	4a18      	ldr	r2, [pc, #96]	@ (8000cb8 <MX_CAN1_Init+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000c5a:	4b16      	ldr	r3, [pc, #88]	@ (8000cb4 <MX_CAN1_Init+0x64>)
 8000c5c:	220c      	movs	r2, #12
 8000c5e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c60:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <MX_CAN1_Init+0x64>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c66:	4b13      	ldr	r3, [pc, #76]	@ (8000cb4 <MX_CAN1_Init+0x64>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <MX_CAN1_Init+0x64>)
 8000c6e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c72:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <MX_CAN1_Init+0x64>)
 8000c76:	f44f 02a0 	mov.w	r2, #5242880	@ 0x500000
 8000c7a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb4 <MX_CAN1_Init+0x64>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <MX_CAN1_Init+0x64>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb4 <MX_CAN1_Init+0x64>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c8e:	4b09      	ldr	r3, [pc, #36]	@ (8000cb4 <MX_CAN1_Init+0x64>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c94:	4b07      	ldr	r3, [pc, #28]	@ (8000cb4 <MX_CAN1_Init+0x64>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <MX_CAN1_Init+0x64>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ca0:	4804      	ldr	r0, [pc, #16]	@ (8000cb4 <MX_CAN1_Init+0x64>)
 8000ca2:	f001 f9b3 	bl	800200c <HAL_CAN_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000cac:	f000 fab2 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200000d4 	.word	0x200000d4
 8000cb8:	40006400 	.word	0x40006400

08000cbc <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <MX_CAN2_Init+0x64>)
 8000cc2:	4a18      	ldr	r2, [pc, #96]	@ (8000d24 <MX_CAN2_Init+0x68>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 12;
 8000cc6:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <MX_CAN2_Init+0x64>)
 8000cc8:	220c      	movs	r2, #12
 8000cca:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <MX_CAN2_Init+0x64>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cd2:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <MX_CAN2_Init+0x64>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <MX_CAN2_Init+0x64>)
 8000cda:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8000cde:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <MX_CAN2_Init+0x64>)
 8000ce2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000ce6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <MX_CAN2_Init+0x64>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000cee:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <MX_CAN2_Init+0x64>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d20 <MX_CAN2_Init+0x64>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000cfa:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <MX_CAN2_Init+0x64>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <MX_CAN2_Init+0x64>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <MX_CAN2_Init+0x64>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000d0c:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <MX_CAN2_Init+0x64>)
 8000d0e:	f001 f97d 	bl	800200c <HAL_CAN_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000d18:	f000 fa7c 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200000fc 	.word	0x200000fc
 8000d24:	40006800 	.word	0x40006800

08000d28 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2e:	f107 0310 	add.w	r3, r7, #16
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d46:	4b1d      	ldr	r3, [pc, #116]	@ (8000dbc <MX_TIM5_Init+0x94>)
 8000d48:	4a1d      	ldr	r2, [pc, #116]	@ (8000dc0 <MX_TIM5_Init+0x98>)
 8000d4a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 108-1;
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dbc <MX_TIM5_Init+0x94>)
 8000d4e:	226b      	movs	r2, #107	@ 0x6b
 8000d50:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d52:	4b1a      	ldr	r3, [pc, #104]	@ (8000dbc <MX_TIM5_Init+0x94>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000;
 8000d58:	4b18      	ldr	r3, [pc, #96]	@ (8000dbc <MX_TIM5_Init+0x94>)
 8000d5a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000d5e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d60:	4b16      	ldr	r3, [pc, #88]	@ (8000dbc <MX_TIM5_Init+0x94>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d66:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <MX_TIM5_Init+0x94>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000d6c:	4813      	ldr	r0, [pc, #76]	@ (8000dbc <MX_TIM5_Init+0x94>)
 8000d6e:	f003 fb2b 	bl	80043c8 <HAL_TIM_Base_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000d78:	f000 fa4c 	bl	8001214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000d82:	f107 0310 	add.w	r3, r7, #16
 8000d86:	4619      	mov	r1, r3
 8000d88:	480c      	ldr	r0, [pc, #48]	@ (8000dbc <MX_TIM5_Init+0x94>)
 8000d8a:	f003 fd7d 	bl	8004888 <HAL_TIM_ConfigClockSource>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000d94:	f000 fa3e 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d98:	2320      	movs	r3, #32
 8000d9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000d9c:	2380      	movs	r3, #128	@ 0x80
 8000d9e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	4619      	mov	r1, r3
 8000da4:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <MX_TIM5_Init+0x94>)
 8000da6:	f003 ff9b 	bl	8004ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000db0:	f000 fa30 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	3720      	adds	r7, #32
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000124 	.word	0x20000124
 8000dc0:	40000c00 	.word	0x40000c00

08000dc4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <MX_TIM14_Init+0x40>)
 8000dca:	4a0f      	ldr	r2, [pc, #60]	@ (8000e08 <MX_TIM14_Init+0x44>)
 8000dcc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 10-1;
 8000dce:	4b0d      	ldr	r3, [pc, #52]	@ (8000e04 <MX_TIM14_Init+0x40>)
 8000dd0:	2209      	movs	r2, #9
 8000dd2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e04 <MX_TIM14_Init+0x40>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 26999;
 8000dda:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <MX_TIM14_Init+0x40>)
 8000ddc:	f646 1277 	movw	r2, #26999	@ 0x6977
 8000de0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de2:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <MX_TIM14_Init+0x40>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <MX_TIM14_Init+0x40>)
 8000dea:	2280      	movs	r2, #128	@ 0x80
 8000dec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000dee:	4805      	ldr	r0, [pc, #20]	@ (8000e04 <MX_TIM14_Init+0x40>)
 8000df0:	f003 faea 	bl	80043c8 <HAL_TIM_Base_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000dfa:	f000 fa0b 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000170 	.word	0x20000170
 8000e08:	40002000 	.word	0x40002000

08000e0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e12:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <MX_DMA_Init+0x38>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	4a0b      	ldr	r2, [pc, #44]	@ (8000e44 <MX_DMA_Init+0x38>)
 8000e18:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1e:	4b09      	ldr	r3, [pc, #36]	@ (8000e44 <MX_DMA_Init+0x38>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2038      	movs	r0, #56	@ 0x38
 8000e30:	f002 f82b 	bl	8002e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e34:	2038      	movs	r0, #56	@ 0x38
 8000e36:	f002 f844 	bl	8002ec2 <HAL_NVIC_EnableIRQ>

}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800

08000e48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	@ 0x28
 8000e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5e:	4b26      	ldr	r3, [pc, #152]	@ (8000ef8 <MX_GPIO_Init+0xb0>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a25      	ldr	r2, [pc, #148]	@ (8000ef8 <MX_GPIO_Init+0xb0>)
 8000e64:	f043 0304 	orr.w	r3, r3, #4
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b23      	ldr	r3, [pc, #140]	@ (8000ef8 <MX_GPIO_Init+0xb0>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f003 0304 	and.w	r3, r3, #4
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b20      	ldr	r3, [pc, #128]	@ (8000ef8 <MX_GPIO_Init+0xb0>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ef8 <MX_GPIO_Init+0xb0>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e82:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef8 <MX_GPIO_Init+0xb0>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef8 <MX_GPIO_Init+0xb0>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	4a19      	ldr	r2, [pc, #100]	@ (8000ef8 <MX_GPIO_Init+0xb0>)
 8000e94:	f043 0302 	orr.w	r3, r3, #2
 8000e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <MX_GPIO_Init+0xb0>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ea6:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <MX_GPIO_Init+0xb0>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	4a13      	ldr	r2, [pc, #76]	@ (8000ef8 <MX_GPIO_Init+0xb0>)
 8000eac:	f043 0310 	orr.w	r3, r3, #16
 8000eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <MX_GPIO_Init+0xb0>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	f003 0310 	and.w	r3, r3, #16
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <MX_GPIO_Init+0xb0>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef8 <MX_GPIO_Init+0xb0>)
 8000ec4:	f043 0308 	orr.w	r3, r3, #8
 8000ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <MX_GPIO_Init+0xb0>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	f003 0308 	and.w	r3, r3, #8
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : SDC_SETAS_Pin SDC_BOTS_Pin SDC_BSPD_Intertia_Pin */
  GPIO_InitStruct.Pin = SDC_SETAS_Pin|SDC_BOTS_Pin|SDC_BSPD_Intertia_Pin;
 8000ed6:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4804      	ldr	r0, [pc, #16]	@ (8000efc <MX_GPIO_Init+0xb4>)
 8000eec:	f002 fbf8 	bl	80036e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ef0:	bf00      	nop
 8000ef2:	3728      	adds	r7, #40	@ 0x28
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40021000 	.word	0x40021000

08000f00 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f02:	b099      	sub	sp, #100	@ 0x64
 8000f04:	af12      	add	r7, sp, #72	@ 0x48
 8000f06:	6178      	str	r0, [r7, #20]
  if (htim->Instance == TIM14)
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a61      	ldr	r2, [pc, #388]	@ (8001094 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	f040 80bc 	bne.w	800108c <HAL_TIM_PeriodElapsedCallback+0x18c>
  {

	  switch(msg){
 8000f14:	4b60      	ldr	r3, [pc, #384]	@ (8001098 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d003      	beq.n	8000f24 <HAL_TIM_PeriodElapsedCallback+0x24>
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	f000 8083 	beq.w	8001028 <HAL_TIM_PeriodElapsedCallback+0x128>
	              Keep_Alive++;
	              msg=0;
	        break;
	  }
  }
}
 8000f22:	e0b3      	b.n	800108c <HAL_TIM_PeriodElapsedCallback+0x18c>
		  	  	  message_cantx_FECU_SDC(hcan2, HAL_GPIO_ReadPin(SDC_SETAS_PORT, SDC_SETAS_PIN), HAL_GPIO_ReadPin(SDC_BOTS_PORT, SDC_BOTS_PIN),HAL_GPIO_ReadPin(SDC_BSPD_INERTIA_PORT, SDC_BSPD_INERTIA_PIN), TxData, TxHeader);
 8000f24:	2180      	movs	r1, #128	@ 0x80
 8000f26:	485d      	ldr	r0, [pc, #372]	@ (800109c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f28:	f002 fd86 	bl	8003a38 <HAL_GPIO_ReadPin>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f34:	4859      	ldr	r0, [pc, #356]	@ (800109c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f36:	f002 fd7f 	bl	8003a38 <HAL_GPIO_ReadPin>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f42:	4856      	ldr	r0, [pc, #344]	@ (800109c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f44:	f002 fd78 	bl	8003a38 <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	4e54      	ldr	r6, [pc, #336]	@ (80010a0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000f4e:	4b55      	ldr	r3, [pc, #340]	@ (80010a4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000f50:	ac0a      	add	r4, sp, #40	@ 0x28
 8000f52:	461d      	mov	r5, r3
 8000f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f58:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f5c:	e884 0003 	stmia.w	r4, {r0, r1}
 8000f60:	4b51      	ldr	r3, [pc, #324]	@ (80010a8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000f62:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f64:	68ba      	ldr	r2, [r7, #8]
 8000f66:	9208      	str	r2, [sp, #32]
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	9207      	str	r2, [sp, #28]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	9306      	str	r3, [sp, #24]
 8000f70:	466d      	mov	r5, sp
 8000f72:	f106 0410 	add.w	r4, r6, #16
 8000f76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f82:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000f86:	f7ff fc11 	bl	80007ac <message_cantx_FECU_SDC>
	 	    	  message_cantx_FECU_Keep_Alive(hcan2, Keep_Alive, TxData, TxHeader);
 8000f8a:	4b48      	ldr	r3, [pc, #288]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	4e43      	ldr	r6, [pc, #268]	@ (80010a0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000f92:	4b44      	ldr	r3, [pc, #272]	@ (80010a4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000f94:	ac08      	add	r4, sp, #32
 8000f96:	461d      	mov	r5, r3
 8000f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fa0:	e884 0003 	stmia.w	r4, {r0, r1}
 8000fa4:	4b40      	ldr	r3, [pc, #256]	@ (80010a8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000fa6:	9307      	str	r3, [sp, #28]
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	9306      	str	r3, [sp, #24]
 8000fac:	466d      	mov	r5, sp
 8000fae:	f106 0410 	add.w	r4, r6, #16
 8000fb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fba:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fbe:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000fc2:	f7ff fc29 	bl	8000818 <message_cantx_FECU_Keep_Alive>
	              message_cantx_FECU_Data1(hcan2, APPS1[0], APPS2_OK, BrakePedal[0], SteeringSensor[0], TxData, TxHeader);
 8000fc6:	4b3a      	ldr	r3, [pc, #232]	@ (80010b0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	4b39      	ldr	r3, [pc, #228]	@ (80010b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000fce:	881a      	ldrh	r2, [r3, #0]
 8000fd0:	60fa      	str	r2, [r7, #12]
 8000fd2:	4b39      	ldr	r3, [pc, #228]	@ (80010b8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000fd4:	8819      	ldrh	r1, [r3, #0]
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	4b38      	ldr	r3, [pc, #224]	@ (80010bc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000fda:	8818      	ldrh	r0, [r3, #0]
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	4e30      	ldr	r6, [pc, #192]	@ (80010a0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000fe0:	4b30      	ldr	r3, [pc, #192]	@ (80010a4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000fe2:	ac0b      	add	r4, sp, #44	@ 0x2c
 8000fe4:	461d      	mov	r5, r3
 8000fe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fea:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fee:	e884 0003 	stmia.w	r4, {r0, r1}
 8000ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80010a8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000ff4:	930a      	str	r3, [sp, #40]	@ 0x28
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	9009      	str	r0, [sp, #36]	@ 0x24
 8000ffa:	68b9      	ldr	r1, [r7, #8]
 8000ffc:	9108      	str	r1, [sp, #32]
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	9207      	str	r2, [sp, #28]
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	9306      	str	r3, [sp, #24]
 8001006:	466d      	mov	r5, sp
 8001008:	f106 0410 	add.w	r4, r6, #16
 800100c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800100e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001010:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001014:	e885 0003 	stmia.w	r5, {r0, r1}
 8001018:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800101c:	f7ff fb30 	bl	8000680 <message_cantx_FECU_Data1>
	              msg=2;
 8001020:	4b1d      	ldr	r3, [pc, #116]	@ (8001098 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001022:	2202      	movs	r2, #2
 8001024:	701a      	strb	r2, [r3, #0]
	         break;
 8001026:	e031      	b.n	800108c <HAL_TIM_PeriodElapsedCallback+0x18c>
	              message_cantx_FECU_Data2(hcan2, Susp_F_R[0], Susp_F_L[0], PitotSensor[0], TxData, TxHeader);
 8001028:	4b25      	ldr	r3, [pc, #148]	@ (80010c0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	4b25      	ldr	r3, [pc, #148]	@ (80010c4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001030:	881a      	ldrh	r2, [r3, #0]
 8001032:	60fa      	str	r2, [r7, #12]
 8001034:	4b24      	ldr	r3, [pc, #144]	@ (80010c8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	4e19      	ldr	r6, [pc, #100]	@ (80010a0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800103c:	4b19      	ldr	r3, [pc, #100]	@ (80010a4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800103e:	ac0a      	add	r4, sp, #40	@ 0x28
 8001040:	461d      	mov	r5, r3
 8001042:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001044:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001046:	e895 0003 	ldmia.w	r5, {r0, r1}
 800104a:	e884 0003 	stmia.w	r4, {r0, r1}
 800104e:	4b16      	ldr	r3, [pc, #88]	@ (80010a8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001050:	9309      	str	r3, [sp, #36]	@ 0x24
 8001052:	68b9      	ldr	r1, [r7, #8]
 8001054:	9108      	str	r1, [sp, #32]
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	9207      	str	r2, [sp, #28]
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	9306      	str	r3, [sp, #24]
 800105e:	466d      	mov	r5, sp
 8001060:	f106 0410 	add.w	r4, r6, #16
 8001064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001068:	e894 0003 	ldmia.w	r4, {r0, r1}
 800106c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001070:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001074:	f7ff fb56 	bl	8000724 <message_cantx_FECU_Data2>
	              Keep_Alive++;
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	b2da      	uxtb	r2, r3
 8001080:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001082:	701a      	strb	r2, [r3, #0]
	              msg=0;
 8001084:	4b04      	ldr	r3, [pc, #16]	@ (8001098 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
	        break;
 800108a:	bf00      	nop
}
 800108c:	bf00      	nop
 800108e:	371c      	adds	r7, #28
 8001090:	46bd      	mov	sp, r7
 8001092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001094:	40002000 	.word	0x40002000
 8001098:	20000280 	.word	0x20000280
 800109c:	40021000 	.word	0x40021000
 80010a0:	200000fc 	.word	0x200000fc
 80010a4:	20000208 	.word	0x20000208
 80010a8:	20000278 	.word	0x20000278
 80010ac:	20000281 	.word	0x20000281
 80010b0:	200001cc 	.word	0x200001cc
 80010b4:	200001d4 	.word	0x200001d4
 80010b8:	200001d8 	.word	0x200001d8
 80010bc:	200001dc 	.word	0x200001dc
 80010c0:	200001e0 	.word	0x200001e0
 80010c4:	200001e4 	.word	0x200001e4
 80010c8:	200001e8 	.word	0x200001e8

080010cc <HAL_CAN_RxFifo0MsgPendingCallback>:
   void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
    {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
    	//Lectura del missatge rebut
	   if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 80010d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80010d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001104 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80010d8:	2100      	movs	r1, #0
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f001 fa92 	bl	8002604 <HAL_CAN_GetRxMessage>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	   	   Error_Handler();
 80010e6:	f000 f895 	bl	8001214 <Error_Handler>
	      }
	      if(RxHeader.StdId == ETAS_SYNC){
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b80      	cmp	r3, #128	@ 0x80
 80010f0:	d102      	bne.n	80010f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
	         msg=1;
 80010f2:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
	      }
    }
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000270 	.word	0x20000270
 8001104:	200001ec 	.word	0x200001ec
 8001108:	20000280 	.word	0x20000280

0800110c <HAL_ADC_ConvCpltCallback>:
   void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

	   APPS1[0] = adc_buffer[0];
 8001114:	4b20      	ldr	r3, [pc, #128]	@ (8001198 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001116:	881a      	ldrh	r2, [r3, #0]
 8001118:	4b20      	ldr	r3, [pc, #128]	@ (800119c <HAL_ADC_ConvCpltCallback+0x90>)
 800111a:	801a      	strh	r2, [r3, #0]
	   applyLowPassFilter(APPS1);
 800111c:	481f      	ldr	r0, [pc, #124]	@ (800119c <HAL_ADC_ConvCpltCallback+0x90>)
 800111e:	f7ff fba3 	bl	8000868 <applyLowPassFilter>
	   	  APPS2[0] = adc_buffer[1];
 8001122:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001124:	885a      	ldrh	r2, [r3, #2]
 8001126:	4b1e      	ldr	r3, [pc, #120]	@ (80011a0 <HAL_ADC_ConvCpltCallback+0x94>)
 8001128:	801a      	strh	r2, [r3, #0]
	   	applyLowPassFilter(APPS2);
 800112a:	481d      	ldr	r0, [pc, #116]	@ (80011a0 <HAL_ADC_ConvCpltCallback+0x94>)
 800112c:	f7ff fb9c 	bl	8000868 <applyLowPassFilter>
	   	APPS2_OK=(4095-APPS2[0])/2; //modificació valor sensor per rules compliant
 8001130:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <HAL_ADC_ConvCpltCallback+0x94>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800113a:	1a9b      	subs	r3, r3, r2
 800113c:	2b00      	cmp	r3, #0
 800113e:	da00      	bge.n	8001142 <HAL_ADC_ConvCpltCallback+0x36>
 8001140:	3301      	adds	r3, #1
 8001142:	105b      	asrs	r3, r3, #1
 8001144:	b29a      	uxth	r2, r3
 8001146:	4b17      	ldr	r3, [pc, #92]	@ (80011a4 <HAL_ADC_ConvCpltCallback+0x98>)
 8001148:	801a      	strh	r2, [r3, #0]
	   	  BrakePedal[0] = adc_buffer[2];
 800114a:	4b13      	ldr	r3, [pc, #76]	@ (8001198 <HAL_ADC_ConvCpltCallback+0x8c>)
 800114c:	889a      	ldrh	r2, [r3, #4]
 800114e:	4b16      	ldr	r3, [pc, #88]	@ (80011a8 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001150:	801a      	strh	r2, [r3, #0]
	   	applyLowPassFilter(BrakePedal);
 8001152:	4815      	ldr	r0, [pc, #84]	@ (80011a8 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001154:	f7ff fb88 	bl	8000868 <applyLowPassFilter>
	   	  PitotSensor[0] = adc_buffer[3];
 8001158:	4b0f      	ldr	r3, [pc, #60]	@ (8001198 <HAL_ADC_ConvCpltCallback+0x8c>)
 800115a:	88da      	ldrh	r2, [r3, #6]
 800115c:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <HAL_ADC_ConvCpltCallback+0xa0>)
 800115e:	801a      	strh	r2, [r3, #0]
	   	applyLowPassFilter(PitotSensor);
 8001160:	4812      	ldr	r0, [pc, #72]	@ (80011ac <HAL_ADC_ConvCpltCallback+0xa0>)
 8001162:	f7ff fb81 	bl	8000868 <applyLowPassFilter>
	   	  SteeringSensor[0] = adc_buffer[4];
 8001166:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001168:	891a      	ldrh	r2, [r3, #8]
 800116a:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <HAL_ADC_ConvCpltCallback+0xa4>)
 800116c:	801a      	strh	r2, [r3, #0]
	   	applyLowPassFilter(SteeringSensor);
 800116e:	4810      	ldr	r0, [pc, #64]	@ (80011b0 <HAL_ADC_ConvCpltCallback+0xa4>)
 8001170:	f7ff fb7a 	bl	8000868 <applyLowPassFilter>
	   	  Susp_F_R[0] = adc_buffer[5];
 8001174:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001176:	895a      	ldrh	r2, [r3, #10]
 8001178:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <HAL_ADC_ConvCpltCallback+0xa8>)
 800117a:	801a      	strh	r2, [r3, #0]
	   	applyLowPassFilter(Susp_F_R);
 800117c:	480d      	ldr	r0, [pc, #52]	@ (80011b4 <HAL_ADC_ConvCpltCallback+0xa8>)
 800117e:	f7ff fb73 	bl	8000868 <applyLowPassFilter>
	   	  Susp_F_L[0] = adc_buffer[6];
 8001182:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001184:	899a      	ldrh	r2, [r3, #12]
 8001186:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <HAL_ADC_ConvCpltCallback+0xac>)
 8001188:	801a      	strh	r2, [r3, #0]
	   	applyLowPassFilter(Susp_F_L);
 800118a:	480b      	ldr	r0, [pc, #44]	@ (80011b8 <HAL_ADC_ConvCpltCallback+0xac>)
 800118c:	f7ff fb6c 	bl	8000868 <applyLowPassFilter>
   }
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	200001bc 	.word	0x200001bc
 800119c:	200001cc 	.word	0x200001cc
 80011a0:	200001d0 	.word	0x200001d0
 80011a4:	200001d4 	.word	0x200001d4
 80011a8:	200001d8 	.word	0x200001d8
 80011ac:	200001e8 	.word	0x200001e8
 80011b0:	200001dc 	.word	0x200001dc
 80011b4:	200001e0 	.word	0x200001e0
 80011b8:	200001e4 	.word	0x200001e4

080011bc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80011c2:	463b      	mov	r3, r7
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80011ce:	f001 fe93 	bl	8002ef8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80011d2:	2301      	movs	r3, #1
 80011d4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80011de:	231f      	movs	r3, #31
 80011e0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80011e2:	2387      	movs	r3, #135	@ 0x87
 80011e4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80011ea:	2300      	movs	r3, #0
 80011ec:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80011ee:	2301      	movs	r3, #1
 80011f0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80011f2:	2301      	movs	r3, #1
 80011f4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011fe:	463b      	mov	r3, r7
 8001200:	4618      	mov	r0, r3
 8001202:	f001 feb1 	bl	8002f68 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001206:	2004      	movs	r0, #4
 8001208:	f001 fe8e 	bl	8002f28 <HAL_MPU_Enable>

}
 800120c:	bf00      	nop
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <Error_Handler+0x8>

08001220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <HAL_MspInit+0x44>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122a:	4a0e      	ldr	r2, [pc, #56]	@ (8001264 <HAL_MspInit+0x44>)
 800122c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001230:	6413      	str	r3, [r2, #64]	@ 0x40
 8001232:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <HAL_MspInit+0x44>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <HAL_MspInit+0x44>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001242:	4a08      	ldr	r2, [pc, #32]	@ (8001264 <HAL_MspInit+0x44>)
 8001244:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001248:	6453      	str	r3, [r2, #68]	@ 0x44
 800124a:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <HAL_MspInit+0x44>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800

08001268 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08c      	sub	sp, #48	@ 0x30
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 031c 	add.w	r3, r7, #28
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a45      	ldr	r2, [pc, #276]	@ (800139c <HAL_ADC_MspInit+0x134>)
 8001286:	4293      	cmp	r3, r2
 8001288:	f040 8084 	bne.w	8001394 <HAL_ADC_MspInit+0x12c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800128c:	4b44      	ldr	r3, [pc, #272]	@ (80013a0 <HAL_ADC_MspInit+0x138>)
 800128e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001290:	4a43      	ldr	r2, [pc, #268]	@ (80013a0 <HAL_ADC_MspInit+0x138>)
 8001292:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001296:	6453      	str	r3, [r2, #68]	@ 0x44
 8001298:	4b41      	ldr	r3, [pc, #260]	@ (80013a0 <HAL_ADC_MspInit+0x138>)
 800129a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a4:	4b3e      	ldr	r3, [pc, #248]	@ (80013a0 <HAL_ADC_MspInit+0x138>)
 80012a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a8:	4a3d      	ldr	r2, [pc, #244]	@ (80013a0 <HAL_ADC_MspInit+0x138>)
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b0:	4b3b      	ldr	r3, [pc, #236]	@ (80013a0 <HAL_ADC_MspInit+0x138>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012bc:	4b38      	ldr	r3, [pc, #224]	@ (80013a0 <HAL_ADC_MspInit+0x138>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c0:	4a37      	ldr	r2, [pc, #220]	@ (80013a0 <HAL_ADC_MspInit+0x138>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c8:	4b35      	ldr	r3, [pc, #212]	@ (80013a0 <HAL_ADC_MspInit+0x138>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d4:	4b32      	ldr	r3, [pc, #200]	@ (80013a0 <HAL_ADC_MspInit+0x138>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d8:	4a31      	ldr	r2, [pc, #196]	@ (80013a0 <HAL_ADC_MspInit+0x138>)
 80012da:	f043 0302 	orr.w	r3, r3, #2
 80012de:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e0:	4b2f      	ldr	r3, [pc, #188]	@ (80013a0 <HAL_ADC_MspInit+0x138>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SteeringSensor_Pin|SUSP_F_R_Pin|Susp_F_L_Pin;
 80012ec:	230e      	movs	r3, #14
 80012ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f0:	2303      	movs	r3, #3
 80012f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	4619      	mov	r1, r3
 80012fe:	4829      	ldr	r0, [pc, #164]	@ (80013a4 <HAL_ADC_MspInit+0x13c>)
 8001300:	f002 f9ee 	bl	80036e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = APPS1_Pin|APPS2_Pin|BrakePedal_Pin;
 8001304:	2307      	movs	r3, #7
 8001306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001308:	2303      	movs	r3, #3
 800130a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	4619      	mov	r1, r3
 8001316:	4824      	ldr	r0, [pc, #144]	@ (80013a8 <HAL_ADC_MspInit+0x140>)
 8001318:	f002 f9e2 	bl	80036e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PitotSensor_Pin;
 800131c:	2302      	movs	r3, #2
 800131e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001320:	2303      	movs	r3, #3
 8001322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PitotSensor_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	4619      	mov	r1, r3
 800132e:	481f      	ldr	r0, [pc, #124]	@ (80013ac <HAL_ADC_MspInit+0x144>)
 8001330:	f002 f9d6 	bl	80036e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001334:	4b1e      	ldr	r3, [pc, #120]	@ (80013b0 <HAL_ADC_MspInit+0x148>)
 8001336:	4a1f      	ldr	r2, [pc, #124]	@ (80013b4 <HAL_ADC_MspInit+0x14c>)
 8001338:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800133a:	4b1d      	ldr	r3, [pc, #116]	@ (80013b0 <HAL_ADC_MspInit+0x148>)
 800133c:	2200      	movs	r2, #0
 800133e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001340:	4b1b      	ldr	r3, [pc, #108]	@ (80013b0 <HAL_ADC_MspInit+0x148>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001346:	4b1a      	ldr	r3, [pc, #104]	@ (80013b0 <HAL_ADC_MspInit+0x148>)
 8001348:	2200      	movs	r2, #0
 800134a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800134c:	4b18      	ldr	r3, [pc, #96]	@ (80013b0 <HAL_ADC_MspInit+0x148>)
 800134e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001352:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001354:	4b16      	ldr	r3, [pc, #88]	@ (80013b0 <HAL_ADC_MspInit+0x148>)
 8001356:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800135a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800135c:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <HAL_ADC_MspInit+0x148>)
 800135e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001362:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001364:	4b12      	ldr	r3, [pc, #72]	@ (80013b0 <HAL_ADC_MspInit+0x148>)
 8001366:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800136a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800136c:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <HAL_ADC_MspInit+0x148>)
 800136e:	2200      	movs	r2, #0
 8001370:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001372:	4b0f      	ldr	r3, [pc, #60]	@ (80013b0 <HAL_ADC_MspInit+0x148>)
 8001374:	2200      	movs	r2, #0
 8001376:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001378:	480d      	ldr	r0, [pc, #52]	@ (80013b0 <HAL_ADC_MspInit+0x148>)
 800137a:	f001 fe39 	bl	8002ff0 <HAL_DMA_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 8001384:	f7ff ff46 	bl	8001214 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a09      	ldr	r2, [pc, #36]	@ (80013b0 <HAL_ADC_MspInit+0x148>)
 800138c:	639a      	str	r2, [r3, #56]	@ 0x38
 800138e:	4a08      	ldr	r2, [pc, #32]	@ (80013b0 <HAL_ADC_MspInit+0x148>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001394:	bf00      	nop
 8001396:	3730      	adds	r7, #48	@ 0x30
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40012000 	.word	0x40012000
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020800 	.word	0x40020800
 80013a8:	40020000 	.word	0x40020000
 80013ac:	40020400 	.word	0x40020400
 80013b0:	20000074 	.word	0x20000074
 80013b4:	40026410 	.word	0x40026410

080013b8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08c      	sub	sp, #48	@ 0x30
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a51      	ldr	r2, [pc, #324]	@ (800151c <HAL_CAN_MspInit+0x164>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d139      	bne.n	800144e <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80013da:	4b51      	ldr	r3, [pc, #324]	@ (8001520 <HAL_CAN_MspInit+0x168>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001520 <HAL_CAN_MspInit+0x168>)
 80013e2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80013e4:	4b4e      	ldr	r3, [pc, #312]	@ (8001520 <HAL_CAN_MspInit+0x168>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d10b      	bne.n	8001404 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80013ec:	4b4d      	ldr	r3, [pc, #308]	@ (8001524 <HAL_CAN_MspInit+0x16c>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001524 <HAL_CAN_MspInit+0x16c>)
 80013f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f8:	4b4a      	ldr	r3, [pc, #296]	@ (8001524 <HAL_CAN_MspInit+0x16c>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001404:	4b47      	ldr	r3, [pc, #284]	@ (8001524 <HAL_CAN_MspInit+0x16c>)
 8001406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001408:	4a46      	ldr	r2, [pc, #280]	@ (8001524 <HAL_CAN_MspInit+0x16c>)
 800140a:	f043 0308 	orr.w	r3, r3, #8
 800140e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001410:	4b44      	ldr	r3, [pc, #272]	@ (8001524 <HAL_CAN_MspInit+0x16c>)
 8001412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800141c:	2303      	movs	r3, #3
 800141e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	2303      	movs	r3, #3
 800142a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800142c:	2309      	movs	r3, #9
 800142e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	4619      	mov	r1, r3
 8001436:	483c      	ldr	r0, [pc, #240]	@ (8001528 <HAL_CAN_MspInit+0x170>)
 8001438:	f002 f952 	bl	80036e0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	2014      	movs	r0, #20
 8001442:	f001 fd22 	bl	8002e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001446:	2014      	movs	r0, #20
 8001448:	f001 fd3b 	bl	8002ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800144c:	e062      	b.n	8001514 <HAL_CAN_MspInit+0x15c>
  else if(hcan->Instance==CAN2)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a36      	ldr	r2, [pc, #216]	@ (800152c <HAL_CAN_MspInit+0x174>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d15d      	bne.n	8001514 <HAL_CAN_MspInit+0x15c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001458:	4b32      	ldr	r3, [pc, #200]	@ (8001524 <HAL_CAN_MspInit+0x16c>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145c:	4a31      	ldr	r2, [pc, #196]	@ (8001524 <HAL_CAN_MspInit+0x16c>)
 800145e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001462:	6413      	str	r3, [r2, #64]	@ 0x40
 8001464:	4b2f      	ldr	r3, [pc, #188]	@ (8001524 <HAL_CAN_MspInit+0x16c>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001468:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001470:	4b2b      	ldr	r3, [pc, #172]	@ (8001520 <HAL_CAN_MspInit+0x168>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	3301      	adds	r3, #1
 8001476:	4a2a      	ldr	r2, [pc, #168]	@ (8001520 <HAL_CAN_MspInit+0x168>)
 8001478:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800147a:	4b29      	ldr	r3, [pc, #164]	@ (8001520 <HAL_CAN_MspInit+0x168>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d10b      	bne.n	800149a <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001482:	4b28      	ldr	r3, [pc, #160]	@ (8001524 <HAL_CAN_MspInit+0x16c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	4a27      	ldr	r2, [pc, #156]	@ (8001524 <HAL_CAN_MspInit+0x16c>)
 8001488:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800148c:	6413      	str	r3, [r2, #64]	@ 0x40
 800148e:	4b25      	ldr	r3, [pc, #148]	@ (8001524 <HAL_CAN_MspInit+0x16c>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	4b22      	ldr	r3, [pc, #136]	@ (8001524 <HAL_CAN_MspInit+0x16c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	4a21      	ldr	r2, [pc, #132]	@ (8001524 <HAL_CAN_MspInit+0x16c>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001524 <HAL_CAN_MspInit+0x16c>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80014b2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80014b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80014c4:	2309      	movs	r3, #9
 80014c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	4619      	mov	r1, r3
 80014ce:	4818      	ldr	r0, [pc, #96]	@ (8001530 <HAL_CAN_MspInit+0x178>)
 80014d0:	f002 f906 	bl	80036e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 1, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2101      	movs	r1, #1
 80014d8:	203f      	movs	r0, #63	@ 0x3f
 80014da:	f001 fcd6 	bl	8002e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 80014de:	203f      	movs	r0, #63	@ 0x3f
 80014e0:	f001 fcef 	bl	8002ec2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 1, 0);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2101      	movs	r1, #1
 80014e8:	2040      	movs	r0, #64	@ 0x40
 80014ea:	f001 fcce 	bl	8002e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80014ee:	2040      	movs	r0, #64	@ 0x40
 80014f0:	f001 fce7 	bl	8002ec2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 1, 0);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2101      	movs	r1, #1
 80014f8:	2041      	movs	r0, #65	@ 0x41
 80014fa:	f001 fcc6 	bl	8002e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80014fe:	2041      	movs	r0, #65	@ 0x41
 8001500:	f001 fcdf 	bl	8002ec2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 1, 0);
 8001504:	2200      	movs	r2, #0
 8001506:	2101      	movs	r1, #1
 8001508:	2042      	movs	r0, #66	@ 0x42
 800150a:	f001 fcbe 	bl	8002e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 800150e:	2042      	movs	r0, #66	@ 0x42
 8001510:	f001 fcd7 	bl	8002ec2 <HAL_NVIC_EnableIRQ>
}
 8001514:	bf00      	nop
 8001516:	3730      	adds	r7, #48	@ 0x30
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40006400 	.word	0x40006400
 8001520:	20000284 	.word	0x20000284
 8001524:	40023800 	.word	0x40023800
 8001528:	40020c00 	.word	0x40020c00
 800152c:	40006800 	.word	0x40006800
 8001530:	40020400 	.word	0x40020400

08001534 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a16      	ldr	r2, [pc, #88]	@ (800159c <HAL_TIM_Base_MspInit+0x68>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d10c      	bne.n	8001560 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001546:	4b16      	ldr	r3, [pc, #88]	@ (80015a0 <HAL_TIM_Base_MspInit+0x6c>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	4a15      	ldr	r2, [pc, #84]	@ (80015a0 <HAL_TIM_Base_MspInit+0x6c>)
 800154c:	f043 0308 	orr.w	r3, r3, #8
 8001550:	6413      	str	r3, [r2, #64]	@ 0x40
 8001552:	4b13      	ldr	r3, [pc, #76]	@ (80015a0 <HAL_TIM_Base_MspInit+0x6c>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800155e:	e018      	b.n	8001592 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM14)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0f      	ldr	r2, [pc, #60]	@ (80015a4 <HAL_TIM_Base_MspInit+0x70>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d113      	bne.n	8001592 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800156a:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <HAL_TIM_Base_MspInit+0x6c>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	4a0c      	ldr	r2, [pc, #48]	@ (80015a0 <HAL_TIM_Base_MspInit+0x6c>)
 8001570:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001574:	6413      	str	r3, [r2, #64]	@ 0x40
 8001576:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <HAL_TIM_Base_MspInit+0x6c>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	202d      	movs	r0, #45	@ 0x2d
 8001588:	f001 fc7f 	bl	8002e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800158c:	202d      	movs	r0, #45	@ 0x2d
 800158e:	f001 fc98 	bl	8002ec2 <HAL_NVIC_EnableIRQ>
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40000c00 	.word	0x40000c00
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40002000 	.word	0x40002000

080015a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <NMI_Handler+0x4>

080015b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <HardFault_Handler+0x4>

080015b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <MemManage_Handler+0x4>

080015c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <BusFault_Handler+0x4>

080015c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <UsageFault_Handler+0x4>

080015d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fe:	f000 f8c1 	bl	8001784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800160c:	4802      	ldr	r0, [pc, #8]	@ (8001618 <CAN1_RX0_IRQHandler+0x10>)
 800160e:	f001 f931 	bl	8002874 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200000d4 	.word	0x200000d4

0800161c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001620:	4802      	ldr	r0, [pc, #8]	@ (800162c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001622:	f003 f811 	bl	8004648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000170 	.word	0x20000170

08001630 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001634:	4802      	ldr	r0, [pc, #8]	@ (8001640 <DMA2_Stream0_IRQHandler+0x10>)
 8001636:	f001 fde9 	bl	800320c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000074 	.word	0x20000074

08001644 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001648:	4802      	ldr	r0, [pc, #8]	@ (8001654 <CAN2_TX_IRQHandler+0x10>)
 800164a:	f001 f913 	bl	8002874 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200000fc 	.word	0x200000fc

08001658 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800165c:	4802      	ldr	r0, [pc, #8]	@ (8001668 <CAN2_RX0_IRQHandler+0x10>)
 800165e:	f001 f909 	bl	8002874 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200000fc 	.word	0x200000fc

0800166c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001670:	4802      	ldr	r0, [pc, #8]	@ (800167c <CAN2_RX1_IRQHandler+0x10>)
 8001672:	f001 f8ff 	bl	8002874 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200000fc 	.word	0x200000fc

08001680 <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001684:	4802      	ldr	r0, [pc, #8]	@ (8001690 <CAN2_SCE_IRQHandler+0x10>)
 8001686:	f001 f8f5 	bl	8002874 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200000fc 	.word	0x200000fc

08001694 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001698:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <SystemInit+0x20>)
 800169a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800169e:	4a05      	ldr	r2, [pc, #20]	@ (80016b4 <SystemInit+0x20>)
 80016a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016bc:	480d      	ldr	r0, [pc, #52]	@ (80016f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016be:	490e      	ldr	r1, [pc, #56]	@ (80016f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016c0:	4a0e      	ldr	r2, [pc, #56]	@ (80016fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c4:	e002      	b.n	80016cc <LoopCopyDataInit>

080016c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ca:	3304      	adds	r3, #4

080016cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d0:	d3f9      	bcc.n	80016c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001700 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016d4:	4c0b      	ldr	r4, [pc, #44]	@ (8001704 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d8:	e001      	b.n	80016de <LoopFillZerobss>

080016da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016dc:	3204      	adds	r2, #4

080016de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e0:	d3fb      	bcc.n	80016da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016e2:	f7ff ffd7 	bl	8001694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016e6:	f003 fbaf 	bl	8004e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ea:	f7ff f92f 	bl	800094c <main>
  bx  lr    
 80016ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016f0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80016f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016fc:	08004f58 	.word	0x08004f58
  ldr r2, =_sbss
 8001700:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001704:	2000028c 	.word	0x2000028c

08001708 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001708:	e7fe      	b.n	8001708 <ADC_IRQHandler>

0800170a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800170e:	2003      	movs	r0, #3
 8001710:	f001 fbb0 	bl	8002e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001714:	200f      	movs	r0, #15
 8001716:	f000 f805 	bl	8001724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800171a:	f7ff fd81 	bl	8001220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800172c:	4b12      	ldr	r3, [pc, #72]	@ (8001778 <HAL_InitTick+0x54>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b12      	ldr	r3, [pc, #72]	@ (800177c <HAL_InitTick+0x58>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800173a:	fbb3 f3f1 	udiv	r3, r3, r1
 800173e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f001 fbcb 	bl	8002ede <HAL_SYSTICK_Config>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e00e      	b.n	8001770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b0f      	cmp	r3, #15
 8001756:	d80a      	bhi.n	800176e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001758:	2200      	movs	r2, #0
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f001 fb93 	bl	8002e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001764:	4a06      	ldr	r2, [pc, #24]	@ (8001780 <HAL_InitTick+0x5c>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000000 	.word	0x20000000
 800177c:	20000008 	.word	0x20000008
 8001780:	20000004 	.word	0x20000004

08001784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001788:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <HAL_IncTick+0x20>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_IncTick+0x24>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a04      	ldr	r2, [pc, #16]	@ (80017a8 <HAL_IncTick+0x24>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000008 	.word	0x20000008
 80017a8:	20000288 	.word	0x20000288

080017ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b03      	ldr	r3, [pc, #12]	@ (80017c0 <HAL_GetTick+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000288 	.word	0x20000288

080017c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017cc:	2300      	movs	r3, #0
 80017ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e031      	b.n	800183e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d109      	bne.n	80017f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff fd40 	bl	8001268 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fa:	f003 0310 	and.w	r3, r3, #16
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d116      	bne.n	8001830 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <HAL_ADC_Init+0x84>)
 8001808:	4013      	ands	r3, r2
 800180a:	f043 0202 	orr.w	r2, r3, #2
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 fa7e 	bl	8001d14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001822:	f023 0303 	bic.w	r3, r3, #3
 8001826:	f043 0201 	orr.w	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	641a      	str	r2, [r3, #64]	@ 0x40
 800182e:	e001      	b.n	8001834 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800183c:	7bfb      	ldrb	r3, [r7, #15]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	ffffeefd 	.word	0xffffeefd

0800184c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <HAL_ADC_Start_DMA+0x1e>
 8001866:	2302      	movs	r3, #2
 8001868:	e0d4      	b.n	8001a14 <HAL_ADC_Start_DMA+0x1c8>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b01      	cmp	r3, #1
 800187e:	d018      	beq.n	80018b2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 0201 	orr.w	r2, r2, #1
 800188e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001890:	4b62      	ldr	r3, [pc, #392]	@ (8001a1c <HAL_ADC_Start_DMA+0x1d0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a62      	ldr	r2, [pc, #392]	@ (8001a20 <HAL_ADC_Start_DMA+0x1d4>)
 8001896:	fba2 2303 	umull	r2, r3, r2, r3
 800189a:	0c9a      	lsrs	r2, r3, #18
 800189c:	4613      	mov	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4413      	add	r3, r2
 80018a2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80018a4:	e002      	b.n	80018ac <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f9      	bne.n	80018a6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b01      	cmp	r3, #1
 80018be:	f040 809c 	bne.w	80019fa <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018c6:	4b57      	ldr	r3, [pc, #348]	@ (8001a24 <HAL_ADC_Start_DMA+0x1d8>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d007      	beq.n	80018f0 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018fc:	d106      	bne.n	800190c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001902:	f023 0206 	bic.w	r2, r3, #6
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	645a      	str	r2, [r3, #68]	@ 0x44
 800190a:	e002      	b.n	8001912 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800191e:	4a42      	ldr	r2, [pc, #264]	@ (8001a28 <HAL_ADC_Start_DMA+0x1dc>)
 8001920:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001926:	4a41      	ldr	r2, [pc, #260]	@ (8001a2c <HAL_ADC_Start_DMA+0x1e0>)
 8001928:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800192e:	4a40      	ldr	r2, [pc, #256]	@ (8001a30 <HAL_ADC_Start_DMA+0x1e4>)
 8001930:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800193a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800194a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800195a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	334c      	adds	r3, #76	@ 0x4c
 8001966:	4619      	mov	r1, r3
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f001 fbee 	bl	800314c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001970:	4b30      	ldr	r3, [pc, #192]	@ (8001a34 <HAL_ADC_Start_DMA+0x1e8>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 031f 	and.w	r3, r3, #31
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10f      	bne.n	800199c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d143      	bne.n	8001a12 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	e03a      	b.n	8001a12 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a25      	ldr	r2, [pc, #148]	@ (8001a38 <HAL_ADC_Start_DMA+0x1ec>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d10e      	bne.n	80019c4 <HAL_ADC_Start_DMA+0x178>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d107      	bne.n	80019c4 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019c2:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80019c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a34 <HAL_ADC_Start_DMA+0x1e8>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 0310 	and.w	r3, r3, #16
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d120      	bne.n	8001a12 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a19      	ldr	r2, [pc, #100]	@ (8001a3c <HAL_ADC_Start_DMA+0x1f0>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d11b      	bne.n	8001a12 <HAL_ADC_Start_DMA+0x1c6>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d114      	bne.n	8001a12 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	e00b      	b.n	8001a12 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fe:	f043 0210 	orr.w	r2, r3, #16
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0a:	f043 0201 	orr.w	r2, r3, #1
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	431bde83 	.word	0x431bde83
 8001a24:	fffff8fe 	.word	0xfffff8fe
 8001a28:	08001f09 	.word	0x08001f09
 8001a2c:	08001fc3 	.word	0x08001fc3
 8001a30:	08001fdf 	.word	0x08001fdf
 8001a34:	40012300 	.word	0x40012300
 8001a38:	40012000 	.word	0x40012000
 8001a3c:	40012200 	.word	0x40012200

08001a40 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x1c>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e136      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x28a>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b09      	cmp	r3, #9
 8001a92:	d93a      	bls.n	8001b0a <HAL_ADC_ConfigChannel+0xa2>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001a9c:	d035      	beq.n	8001b0a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68d9      	ldr	r1, [r3, #12]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4613      	mov	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3b1e      	subs	r3, #30
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	400a      	ands	r2, r1
 8001ac2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a8d      	ldr	r2, [pc, #564]	@ (8001d00 <HAL_ADC_ConfigChannel+0x298>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d10a      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68d9      	ldr	r1, [r3, #12]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	061a      	lsls	r2, r3, #24
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ae2:	e035      	b.n	8001b50 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68d9      	ldr	r1, [r3, #12]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	4618      	mov	r0, r3
 8001af6:	4603      	mov	r3, r0
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	4403      	add	r3, r0
 8001afc:	3b1e      	subs	r3, #30
 8001afe:	409a      	lsls	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b08:	e022      	b.n	8001b50 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6919      	ldr	r1, [r3, #16]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	461a      	mov	r2, r3
 8001b18:	4613      	mov	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	2207      	movs	r2, #7
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43da      	mvns	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	400a      	ands	r2, r1
 8001b2c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6919      	ldr	r1, [r3, #16]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	4603      	mov	r3, r0
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4403      	add	r3, r0
 8001b46:	409a      	lsls	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b06      	cmp	r3, #6
 8001b56:	d824      	bhi.n	8001ba2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	3b05      	subs	r3, #5
 8001b6a:	221f      	movs	r2, #31
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43da      	mvns	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	400a      	ands	r2, r1
 8001b78:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	4618      	mov	r0, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	3b05      	subs	r3, #5
 8001b94:	fa00 f203 	lsl.w	r2, r0, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ba0:	e04c      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b0c      	cmp	r3, #12
 8001ba8:	d824      	bhi.n	8001bf4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	3b23      	subs	r3, #35	@ 0x23
 8001bbc:	221f      	movs	r2, #31
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	400a      	ands	r2, r1
 8001bca:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	4618      	mov	r0, r3
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	3b23      	subs	r3, #35	@ 0x23
 8001be6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bf2:	e023      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	3b41      	subs	r3, #65	@ 0x41
 8001c06:	221f      	movs	r2, #31
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43da      	mvns	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	400a      	ands	r2, r1
 8001c14:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	4618      	mov	r0, r3
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3b41      	subs	r3, #65	@ 0x41
 8001c30:	fa00 f203 	lsl.w	r2, r0, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a30      	ldr	r2, [pc, #192]	@ (8001d04 <HAL_ADC_ConfigChannel+0x29c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d10a      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x1f4>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001c4e:	d105      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001c50:	4b2d      	ldr	r3, [pc, #180]	@ (8001d08 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	4a2c      	ldr	r2, [pc, #176]	@ (8001d08 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c56:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001c5a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a28      	ldr	r2, [pc, #160]	@ (8001d04 <HAL_ADC_ConfigChannel+0x29c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d10f      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x21e>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2b12      	cmp	r3, #18
 8001c6c:	d10b      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001c6e:	4b26      	ldr	r3, [pc, #152]	@ (8001d08 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	4a25      	ldr	r2, [pc, #148]	@ (8001d08 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c74:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001c78:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001c7a:	4b23      	ldr	r3, [pc, #140]	@ (8001d08 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4a22      	ldr	r2, [pc, #136]	@ (8001d08 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c80:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c84:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001d04 <HAL_ADC_ConfigChannel+0x29c>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d12b      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x280>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1a      	ldr	r2, [pc, #104]	@ (8001d00 <HAL_ADC_ConfigChannel+0x298>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d003      	beq.n	8001ca2 <HAL_ADC_ConfigChannel+0x23a>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b11      	cmp	r3, #17
 8001ca0:	d122      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001ca2:	4b19      	ldr	r3, [pc, #100]	@ (8001d08 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4a18      	ldr	r2, [pc, #96]	@ (8001d08 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ca8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001cac:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001cae:	4b16      	ldr	r3, [pc, #88]	@ (8001d08 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	4a15      	ldr	r2, [pc, #84]	@ (8001d08 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cb4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001cb8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a10      	ldr	r2, [pc, #64]	@ (8001d00 <HAL_ADC_ConfigChannel+0x298>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d111      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001cc4:	4b11      	ldr	r3, [pc, #68]	@ (8001d0c <HAL_ADC_ConfigChannel+0x2a4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a11      	ldr	r2, [pc, #68]	@ (8001d10 <HAL_ADC_ConfigChannel+0x2a8>)
 8001cca:	fba2 2303 	umull	r2, r3, r2, r3
 8001cce:	0c9a      	lsrs	r2, r3, #18
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001cda:	e002      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1f9      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	10000012 	.word	0x10000012
 8001d04:	40012000 	.word	0x40012000
 8001d08:	40012300 	.word	0x40012300
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	431bde83 	.word	0x431bde83

08001d14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001d1c:	4b78      	ldr	r3, [pc, #480]	@ (8001f00 <ADC_Init+0x1ec>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	4a77      	ldr	r2, [pc, #476]	@ (8001f00 <ADC_Init+0x1ec>)
 8001d22:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001d26:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001d28:	4b75      	ldr	r3, [pc, #468]	@ (8001f00 <ADC_Init+0x1ec>)
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	4973      	ldr	r1, [pc, #460]	@ (8001f00 <ADC_Init+0x1ec>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6859      	ldr	r1, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	021a      	lsls	r2, r3, #8
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001d68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6859      	ldr	r1, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6899      	ldr	r1, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da2:	4a58      	ldr	r2, [pc, #352]	@ (8001f04 <ADC_Init+0x1f0>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d022      	beq.n	8001dee <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001db6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6899      	ldr	r1, [r3, #8]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001dd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6899      	ldr	r1, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	e00f      	b.n	8001e0e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001dfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0202 	bic.w	r2, r2, #2
 8001e1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6899      	ldr	r1, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	005a      	lsls	r2, r3, #1
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d01b      	beq.n	8001e74 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001e5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6859      	ldr	r1, [r3, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e66:	3b01      	subs	r3, #1
 8001e68:	035a      	lsls	r2, r3, #13
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	e007      	b.n	8001e84 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001e92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	051a      	lsls	r2, r3, #20
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001eb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6899      	ldr	r1, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ec6:	025a      	lsls	r2, r3, #9
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ede:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6899      	ldr	r1, [r3, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	029a      	lsls	r2, r3, #10
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	609a      	str	r2, [r3, #8]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	40012300 	.word	0x40012300
 8001f04:	0f000001 	.word	0x0f000001

08001f08 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f14:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d13c      	bne.n	8001f9c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d12b      	bne.n	8001f94 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d127      	bne.n	8001f94 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f4a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d006      	beq.n	8001f60 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d119      	bne.n	8001f94 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0220 	bic.w	r2, r2, #32
 8001f6e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d105      	bne.n	8001f94 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8c:	f043 0201 	orr.w	r2, r3, #1
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f7ff f8b9 	bl	800110c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f9a:	e00e      	b.n	8001fba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f7ff fd53 	bl	8001a54 <HAL_ADC_ErrorCallback>
}
 8001fae:	e004      	b.n	8001fba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	4798      	blx	r3
}
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fce:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f7ff fd35 	bl	8001a40 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b084      	sub	sp, #16
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fea:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2240      	movs	r2, #64	@ 0x40
 8001ff0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff6:	f043 0204 	orr.w	r2, r3, #4
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f7ff fd28 	bl	8001a54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002004:	bf00      	nop
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e0ed      	b.n	80021fa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d102      	bne.n	8002030 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff f9c4 	bl	80013b8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002040:	f7ff fbb4 	bl	80017ac <HAL_GetTick>
 8002044:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002046:	e012      	b.n	800206e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002048:	f7ff fbb0 	bl	80017ac <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b0a      	cmp	r3, #10
 8002054:	d90b      	bls.n	800206e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2205      	movs	r2, #5
 8002066:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e0c5      	b.n	80021fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0e5      	beq.n	8002048 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0202 	bic.w	r2, r2, #2
 800208a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800208c:	f7ff fb8e 	bl	80017ac <HAL_GetTick>
 8002090:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002092:	e012      	b.n	80020ba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002094:	f7ff fb8a 	bl	80017ac <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b0a      	cmp	r3, #10
 80020a0:	d90b      	bls.n	80020ba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2205      	movs	r2, #5
 80020b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e09f      	b.n	80021fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1e5      	bne.n	8002094 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7e1b      	ldrb	r3, [r3, #24]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d108      	bne.n	80020e2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	e007      	b.n	80020f2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	7e5b      	ldrb	r3, [r3, #25]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d108      	bne.n	800210c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	e007      	b.n	800211c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800211a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	7e9b      	ldrb	r3, [r3, #26]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d108      	bne.n	8002136 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0220 	orr.w	r2, r2, #32
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	e007      	b.n	8002146 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0220 	bic.w	r2, r2, #32
 8002144:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7edb      	ldrb	r3, [r3, #27]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d108      	bne.n	8002160 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0210 	bic.w	r2, r2, #16
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	e007      	b.n	8002170 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0210 	orr.w	r2, r2, #16
 800216e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	7f1b      	ldrb	r3, [r3, #28]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d108      	bne.n	800218a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0208 	orr.w	r2, r2, #8
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	e007      	b.n	800219a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0208 	bic.w	r2, r2, #8
 8002198:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	7f5b      	ldrb	r3, [r3, #29]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d108      	bne.n	80021b4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f042 0204 	orr.w	r2, r2, #4
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	e007      	b.n	80021c4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0204 	bic.w	r2, r2, #4
 80021c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	ea42 0103 	orr.w	r1, r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	1e5a      	subs	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002204:	b480      	push	{r7}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3020 	ldrb.w	r3, [r3, #32]
 800221a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800221c:	7cfb      	ldrb	r3, [r7, #19]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d003      	beq.n	800222a <HAL_CAN_ConfigFilter+0x26>
 8002222:	7cfb      	ldrb	r3, [r7, #19]
 8002224:	2b02      	cmp	r3, #2
 8002226:	f040 80c7 	bne.w	80023b8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a69      	ldr	r2, [pc, #420]	@ (80023d4 <HAL_CAN_ConfigFilter+0x1d0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d001      	beq.n	8002238 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002234:	4b68      	ldr	r3, [pc, #416]	@ (80023d8 <HAL_CAN_ConfigFilter+0x1d4>)
 8002236:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800223e:	f043 0201 	orr.w	r2, r3, #1
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	4a63      	ldr	r2, [pc, #396]	@ (80023d8 <HAL_CAN_ConfigFilter+0x1d4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d111      	bne.n	8002274 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002256:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226a:	021b      	lsls	r3, r3, #8
 800226c:	431a      	orrs	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	2201      	movs	r2, #1
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	43db      	mvns	r3, r3
 800228e:	401a      	ands	r2, r3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d123      	bne.n	80022e6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	43db      	mvns	r3, r3
 80022a8:	401a      	ands	r2, r3
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	3248      	adds	r2, #72	@ 0x48
 80022c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022dc:	6979      	ldr	r1, [r7, #20]
 80022de:	3348      	adds	r3, #72	@ 0x48
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	440b      	add	r3, r1
 80022e4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d122      	bne.n	8002334 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800230e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	3248      	adds	r2, #72	@ 0x48
 8002314:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002328:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800232a:	6979      	ldr	r1, [r7, #20]
 800232c:	3348      	adds	r3, #72	@ 0x48
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	440b      	add	r3, r1
 8002332:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d109      	bne.n	8002350 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	43db      	mvns	r3, r3
 8002346:	401a      	ands	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800234e:	e007      	b.n	8002360 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	431a      	orrs	r2, r3
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d109      	bne.n	800237c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	43db      	mvns	r3, r3
 8002372:	401a      	ands	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800237a:	e007      	b.n	800238c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	431a      	orrs	r2, r3
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d107      	bne.n	80023a4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	431a      	orrs	r2, r3
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80023aa:	f023 0201 	bic.w	r2, r3, #1
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	e006      	b.n	80023c6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023bc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
  }
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	371c      	adds	r7, #28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40003400 	.word	0x40003400
 80023d8:	40006400 	.word	0x40006400

080023dc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d12e      	bne.n	800244e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0201 	bic.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002408:	f7ff f9d0 	bl	80017ac <HAL_GetTick>
 800240c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800240e:	e012      	b.n	8002436 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002410:	f7ff f9cc 	bl	80017ac <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b0a      	cmp	r3, #10
 800241c:	d90b      	bls.n	8002436 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002422:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2205      	movs	r2, #5
 800242e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e012      	b.n	800245c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1e5      	bne.n	8002410 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	e006      	b.n	800245c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002452:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
  }
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	@ 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
 8002470:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002478:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002482:	7ffb      	ldrb	r3, [r7, #31]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d003      	beq.n	8002490 <HAL_CAN_AddTxMessage+0x2c>
 8002488:	7ffb      	ldrb	r3, [r7, #31]
 800248a:	2b02      	cmp	r3, #2
 800248c:	f040 80ad 	bne.w	80025ea <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10a      	bne.n	80024b0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d105      	bne.n	80024b0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 8095 	beq.w	80025da <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	0e1b      	lsrs	r3, r3, #24
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80024ba:	2201      	movs	r2, #1
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	409a      	lsls	r2, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10d      	bne.n	80024e8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80024d6:	68f9      	ldr	r1, [r7, #12]
 80024d8:	6809      	ldr	r1, [r1, #0]
 80024da:	431a      	orrs	r2, r3
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	3318      	adds	r3, #24
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	440b      	add	r3, r1
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	e00f      	b.n	8002508 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024f2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024f8:	68f9      	ldr	r1, [r7, #12]
 80024fa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80024fc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	3318      	adds	r3, #24
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	440b      	add	r3, r1
 8002506:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6819      	ldr	r1, [r3, #0]
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	3318      	adds	r3, #24
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	440b      	add	r3, r1
 8002518:	3304      	adds	r3, #4
 800251a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	7d1b      	ldrb	r3, [r3, #20]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d111      	bne.n	8002548 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	3318      	adds	r3, #24
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	4413      	add	r3, r2
 8002530:	3304      	adds	r3, #4
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	6811      	ldr	r1, [r2, #0]
 8002538:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	3318      	adds	r3, #24
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	440b      	add	r3, r1
 8002544:	3304      	adds	r3, #4
 8002546:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3307      	adds	r3, #7
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	061a      	lsls	r2, r3, #24
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3306      	adds	r3, #6
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	041b      	lsls	r3, r3, #16
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3305      	adds	r3, #5
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	021b      	lsls	r3, r3, #8
 8002562:	4313      	orrs	r3, r2
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	3204      	adds	r2, #4
 8002568:	7812      	ldrb	r2, [r2, #0]
 800256a:	4610      	mov	r0, r2
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	6811      	ldr	r1, [r2, #0]
 8002570:	ea43 0200 	orr.w	r2, r3, r0
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	440b      	add	r3, r1
 800257a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800257e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3303      	adds	r3, #3
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	061a      	lsls	r2, r3, #24
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3302      	adds	r3, #2
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	041b      	lsls	r3, r3, #16
 8002590:	431a      	orrs	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3301      	adds	r3, #1
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	021b      	lsls	r3, r3, #8
 800259a:	4313      	orrs	r3, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	7812      	ldrb	r2, [r2, #0]
 80025a0:	4610      	mov	r0, r2
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	6811      	ldr	r1, [r2, #0]
 80025a6:	ea43 0200 	orr.w	r2, r3, r0
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	440b      	add	r3, r1
 80025b0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80025b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	3318      	adds	r3, #24
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	4413      	add	r3, r2
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	6811      	ldr	r1, [r2, #0]
 80025c8:	f043 0201 	orr.w	r2, r3, #1
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	3318      	adds	r3, #24
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	440b      	add	r3, r1
 80025d4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	e00e      	b.n	80025f8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025de:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e006      	b.n	80025f8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
  }
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3724      	adds	r7, #36	@ 0x24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002618:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800261a:	7dfb      	ldrb	r3, [r7, #23]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d003      	beq.n	8002628 <HAL_CAN_GetRxMessage+0x24>
 8002620:	7dfb      	ldrb	r3, [r7, #23]
 8002622:	2b02      	cmp	r3, #2
 8002624:	f040 80f3 	bne.w	800280e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10e      	bne.n	800264c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d116      	bne.n	800266a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002640:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0e7      	b.n	800281c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d107      	bne.n	800266a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e0d8      	b.n	800281c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	331b      	adds	r3, #27
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	4413      	add	r3, r2
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0204 	and.w	r2, r3, #4
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10c      	bne.n	80026a2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	331b      	adds	r3, #27
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	4413      	add	r3, r2
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	0d5b      	lsrs	r3, r3, #21
 8002698:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	e00b      	b.n	80026ba <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	331b      	adds	r3, #27
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	4413      	add	r3, r2
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	08db      	lsrs	r3, r3, #3
 80026b2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	331b      	adds	r3, #27
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	4413      	add	r3, r2
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0202 	and.w	r2, r3, #2
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	331b      	adds	r3, #27
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	4413      	add	r3, r2
 80026dc:	3304      	adds	r3, #4
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 020f 	and.w	r2, r3, #15
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	331b      	adds	r3, #27
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	4413      	add	r3, r2
 80026f4:	3304      	adds	r3, #4
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	331b      	adds	r3, #27
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	4413      	add	r3, r2
 800270c:	3304      	adds	r3, #4
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	0c1b      	lsrs	r3, r3, #16
 8002712:	b29a      	uxth	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	4413      	add	r3, r2
 8002722:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	b2da      	uxtb	r2, r3
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	4413      	add	r3, r2
 8002738:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	0a1a      	lsrs	r2, r3, #8
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	3301      	adds	r3, #1
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	4413      	add	r3, r2
 8002752:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	0c1a      	lsrs	r2, r3, #16
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	3302      	adds	r3, #2
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	4413      	add	r3, r2
 800276c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	0e1a      	lsrs	r2, r3, #24
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	3303      	adds	r3, #3
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	4413      	add	r3, r2
 8002786:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	3304      	adds	r3, #4
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	4413      	add	r3, r2
 800279e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	0a1a      	lsrs	r2, r3, #8
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	3305      	adds	r3, #5
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	0c1a      	lsrs	r2, r3, #16
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	3306      	adds	r3, #6
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	0e1a      	lsrs	r2, r3, #24
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	3307      	adds	r3, #7
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d108      	bne.n	80027fa <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0220 	orr.w	r2, r2, #32
 80027f6:	60da      	str	r2, [r3, #12]
 80027f8:	e007      	b.n	800280a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0220 	orr.w	r2, r2, #32
 8002808:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	e006      	b.n	800281c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002812:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
  }
}
 800281c:	4618      	mov	r0, r3
 800281e:	371c      	adds	r7, #28
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002838:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d002      	beq.n	8002846 <HAL_CAN_ActivateNotification+0x1e>
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d109      	bne.n	800285a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6959      	ldr	r1, [r3, #20]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	e006      	b.n	8002868 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
  }
}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08a      	sub	sp, #40	@ 0x28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800287c:	2300      	movs	r3, #0
 800287e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d07c      	beq.n	80029b4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d023      	beq.n	800290c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2201      	movs	r2, #1
 80028ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f983 	bl	8002be2 <HAL_CAN_TxMailbox0CompleteCallback>
 80028dc:	e016      	b.n	800290c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d004      	beq.n	80028f2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80028e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80028ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80028f0:	e00c      	b.n	800290c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d004      	beq.n	8002906 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80028fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002902:	627b      	str	r3, [r7, #36]	@ 0x24
 8002904:	e002      	b.n	800290c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f989 	bl	8002c1e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d024      	beq.n	8002960 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800291e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f963 	bl	8002bf6 <HAL_CAN_TxMailbox1CompleteCallback>
 8002930:	e016      	b.n	8002960 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002938:	2b00      	cmp	r3, #0
 800293a:	d004      	beq.n	8002946 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800293c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002942:	627b      	str	r3, [r7, #36]	@ 0x24
 8002944:	e00c      	b.n	8002960 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800294c:	2b00      	cmp	r3, #0
 800294e:	d004      	beq.n	800295a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002952:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002956:	627b      	str	r3, [r7, #36]	@ 0x24
 8002958:	e002      	b.n	8002960 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f969 	bl	8002c32 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d024      	beq.n	80029b4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002972:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f943 	bl	8002c0a <HAL_CAN_TxMailbox2CompleteCallback>
 8002984:	e016      	b.n	80029b4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d004      	beq.n	800299a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002992:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002996:	627b      	str	r3, [r7, #36]	@ 0x24
 8002998:	e00c      	b.n	80029b4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d004      	beq.n	80029ae <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80029a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ac:	e002      	b.n	80029b4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f949 	bl	8002c46 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00c      	beq.n	80029d8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f003 0310 	and.w	r3, r3, #16
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d007      	beq.n	80029d8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80029c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029ce:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2210      	movs	r2, #16
 80029d6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00b      	beq.n	80029fa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d006      	beq.n	80029fa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2208      	movs	r2, #8
 80029f2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f930 	bl	8002c5a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d009      	beq.n	8002a18 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d002      	beq.n	8002a18 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7fe fb5a 	bl	80010cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00c      	beq.n	8002a3c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d007      	beq.n	8002a3c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a32:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2210      	movs	r2, #16
 8002a3a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	f003 0320 	and.w	r3, r3, #32
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00b      	beq.n	8002a5e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d006      	beq.n	8002a5e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2208      	movs	r2, #8
 8002a56:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f912 	bl	8002c82 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d009      	beq.n	8002a7c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f8f9 	bl	8002c6e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00b      	beq.n	8002a9e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d006      	beq.n	8002a9e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2210      	movs	r2, #16
 8002a96:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f8fc 	bl	8002c96 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00b      	beq.n	8002ac0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d006      	beq.n	8002ac0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2208      	movs	r2, #8
 8002ab8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f8f5 	bl	8002caa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d07b      	beq.n	8002bc2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d072      	beq.n	8002bba <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d008      	beq.n	8002af0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d008      	beq.n	8002b0c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b06:	f043 0302 	orr.w	r3, r3, #2
 8002b0a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d008      	beq.n	8002b28 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b22:	f043 0304 	orr.w	r3, r3, #4
 8002b26:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d043      	beq.n	8002bba <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d03e      	beq.n	8002bba <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b42:	2b60      	cmp	r3, #96	@ 0x60
 8002b44:	d02b      	beq.n	8002b9e <HAL_CAN_IRQHandler+0x32a>
 8002b46:	2b60      	cmp	r3, #96	@ 0x60
 8002b48:	d82e      	bhi.n	8002ba8 <HAL_CAN_IRQHandler+0x334>
 8002b4a:	2b50      	cmp	r3, #80	@ 0x50
 8002b4c:	d022      	beq.n	8002b94 <HAL_CAN_IRQHandler+0x320>
 8002b4e:	2b50      	cmp	r3, #80	@ 0x50
 8002b50:	d82a      	bhi.n	8002ba8 <HAL_CAN_IRQHandler+0x334>
 8002b52:	2b40      	cmp	r3, #64	@ 0x40
 8002b54:	d019      	beq.n	8002b8a <HAL_CAN_IRQHandler+0x316>
 8002b56:	2b40      	cmp	r3, #64	@ 0x40
 8002b58:	d826      	bhi.n	8002ba8 <HAL_CAN_IRQHandler+0x334>
 8002b5a:	2b30      	cmp	r3, #48	@ 0x30
 8002b5c:	d010      	beq.n	8002b80 <HAL_CAN_IRQHandler+0x30c>
 8002b5e:	2b30      	cmp	r3, #48	@ 0x30
 8002b60:	d822      	bhi.n	8002ba8 <HAL_CAN_IRQHandler+0x334>
 8002b62:	2b10      	cmp	r3, #16
 8002b64:	d002      	beq.n	8002b6c <HAL_CAN_IRQHandler+0x2f8>
 8002b66:	2b20      	cmp	r3, #32
 8002b68:	d005      	beq.n	8002b76 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002b6a:	e01d      	b.n	8002ba8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6e:	f043 0308 	orr.w	r3, r3, #8
 8002b72:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b74:	e019      	b.n	8002baa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b78:	f043 0310 	orr.w	r3, r3, #16
 8002b7c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b7e:	e014      	b.n	8002baa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b82:	f043 0320 	orr.w	r3, r3, #32
 8002b86:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b88:	e00f      	b.n	8002baa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b90:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b92:	e00a      	b.n	8002baa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b9a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b9c:	e005      	b.n	8002baa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ba4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ba6:	e000      	b.n	8002baa <HAL_CAN_IRQHandler+0x336>
            break;
 8002ba8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	699a      	ldr	r2, [r3, #24]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002bb8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2204      	movs	r2, #4
 8002bc0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d008      	beq.n	8002bda <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f872 	bl	8002cbe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002bda:	bf00      	nop
 8002bdc:	3728      	adds	r7, #40	@ 0x28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
	...

08002cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d14 <__NVIC_SetPriorityGrouping+0x40>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cfc:	4b06      	ldr	r3, [pc, #24]	@ (8002d18 <__NVIC_SetPriorityGrouping+0x44>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d02:	4a04      	ldr	r2, [pc, #16]	@ (8002d14 <__NVIC_SetPriorityGrouping+0x40>)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	60d3      	str	r3, [r2, #12]
}
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	e000ed00 	.word	0xe000ed00
 8002d18:	05fa0000 	.word	0x05fa0000

08002d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d20:	4b04      	ldr	r3, [pc, #16]	@ (8002d34 <__NVIC_GetPriorityGrouping+0x18>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	0a1b      	lsrs	r3, r3, #8
 8002d26:	f003 0307 	and.w	r3, r3, #7
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	e000ed00 	.word	0xe000ed00

08002d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	db0b      	blt.n	8002d62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	f003 021f 	and.w	r2, r3, #31
 8002d50:	4907      	ldr	r1, [pc, #28]	@ (8002d70 <__NVIC_EnableIRQ+0x38>)
 8002d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	2001      	movs	r0, #1
 8002d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	e000e100 	.word	0xe000e100

08002d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	6039      	str	r1, [r7, #0]
 8002d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	db0a      	blt.n	8002d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	490c      	ldr	r1, [pc, #48]	@ (8002dc0 <__NVIC_SetPriority+0x4c>)
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	0112      	lsls	r2, r2, #4
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	440b      	add	r3, r1
 8002d98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d9c:	e00a      	b.n	8002db4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	4908      	ldr	r1, [pc, #32]	@ (8002dc4 <__NVIC_SetPriority+0x50>)
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	3b04      	subs	r3, #4
 8002dac:	0112      	lsls	r2, r2, #4
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	440b      	add	r3, r1
 8002db2:	761a      	strb	r2, [r3, #24]
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	e000e100 	.word	0xe000e100
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b089      	sub	sp, #36	@ 0x24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f1c3 0307 	rsb	r3, r3, #7
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	bf28      	it	cs
 8002de6:	2304      	movcs	r3, #4
 8002de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3304      	adds	r3, #4
 8002dee:	2b06      	cmp	r3, #6
 8002df0:	d902      	bls.n	8002df8 <NVIC_EncodePriority+0x30>
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3b03      	subs	r3, #3
 8002df6:	e000      	b.n	8002dfa <NVIC_EncodePriority+0x32>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43da      	mvns	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	401a      	ands	r2, r3
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e10:	f04f 31ff 	mov.w	r1, #4294967295
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1a:	43d9      	mvns	r1, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e20:	4313      	orrs	r3, r2
         );
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3724      	adds	r7, #36	@ 0x24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
	...

08002e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e40:	d301      	bcc.n	8002e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e42:	2301      	movs	r3, #1
 8002e44:	e00f      	b.n	8002e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e46:	4a0a      	ldr	r2, [pc, #40]	@ (8002e70 <SysTick_Config+0x40>)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e4e:	210f      	movs	r1, #15
 8002e50:	f04f 30ff 	mov.w	r0, #4294967295
 8002e54:	f7ff ff8e 	bl	8002d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e58:	4b05      	ldr	r3, [pc, #20]	@ (8002e70 <SysTick_Config+0x40>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e5e:	4b04      	ldr	r3, [pc, #16]	@ (8002e70 <SysTick_Config+0x40>)
 8002e60:	2207      	movs	r2, #7
 8002e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	e000e010 	.word	0xe000e010

08002e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7ff ff29 	bl	8002cd4 <__NVIC_SetPriorityGrouping>
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b086      	sub	sp, #24
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	4603      	mov	r3, r0
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	607a      	str	r2, [r7, #4]
 8002e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e9c:	f7ff ff3e 	bl	8002d1c <__NVIC_GetPriorityGrouping>
 8002ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	68b9      	ldr	r1, [r7, #8]
 8002ea6:	6978      	ldr	r0, [r7, #20]
 8002ea8:	f7ff ff8e 	bl	8002dc8 <NVIC_EncodePriority>
 8002eac:	4602      	mov	r2, r0
 8002eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ff5d 	bl	8002d74 <__NVIC_SetPriority>
}
 8002eba:	bf00      	nop
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	4603      	mov	r3, r0
 8002eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ff31 	bl	8002d38 <__NVIC_EnableIRQ>
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff ffa2 	bl	8002e30 <SysTick_Config>
 8002eec:	4603      	mov	r3, r0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002efc:	f3bf 8f5f 	dmb	sy
}
 8002f00:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002f02:	4b07      	ldr	r3, [pc, #28]	@ (8002f20 <HAL_MPU_Disable+0x28>)
 8002f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f06:	4a06      	ldr	r2, [pc, #24]	@ (8002f20 <HAL_MPU_Disable+0x28>)
 8002f08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f0c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002f0e:	4b05      	ldr	r3, [pc, #20]	@ (8002f24 <HAL_MPU_Disable+0x2c>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	605a      	str	r2, [r3, #4]
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	e000ed00 	.word	0xe000ed00
 8002f24:	e000ed90 	.word	0xe000ed90

08002f28 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002f30:	4a0b      	ldr	r2, [pc, #44]	@ (8002f60 <HAL_MPU_Enable+0x38>)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f64 <HAL_MPU_Enable+0x3c>)
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3e:	4a09      	ldr	r2, [pc, #36]	@ (8002f64 <HAL_MPU_Enable+0x3c>)
 8002f40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f44:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002f46:	f3bf 8f4f 	dsb	sy
}
 8002f4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f4c:	f3bf 8f6f 	isb	sy
}
 8002f50:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000ed90 	.word	0xe000ed90
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	785a      	ldrb	r2, [r3, #1]
 8002f74:	4b1d      	ldr	r3, [pc, #116]	@ (8002fec <HAL_MPU_ConfigRegion+0x84>)
 8002f76:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d029      	beq.n	8002fd4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8002f80:	4a1a      	ldr	r2, [pc, #104]	@ (8002fec <HAL_MPU_ConfigRegion+0x84>)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	7b1b      	ldrb	r3, [r3, #12]
 8002f8c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	7adb      	ldrb	r3, [r3, #11]
 8002f92:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f94:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	7a9b      	ldrb	r3, [r3, #10]
 8002f9a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002f9c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	7b5b      	ldrb	r3, [r3, #13]
 8002fa2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002fa4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	7b9b      	ldrb	r3, [r3, #14]
 8002faa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002fac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	7bdb      	ldrb	r3, [r3, #15]
 8002fb2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002fb4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	7a5b      	ldrb	r3, [r3, #9]
 8002fba:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002fbc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	7a1b      	ldrb	r3, [r3, #8]
 8002fc2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002fc4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	7812      	ldrb	r2, [r2, #0]
 8002fca:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002fcc:	4a07      	ldr	r2, [pc, #28]	@ (8002fec <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002fce:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002fd0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002fd2:	e005      	b.n	8002fe0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002fd4:	4b05      	ldr	r3, [pc, #20]	@ (8002fec <HAL_MPU_ConfigRegion+0x84>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002fda:	4b04      	ldr	r3, [pc, #16]	@ (8002fec <HAL_MPU_ConfigRegion+0x84>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	611a      	str	r2, [r3, #16]
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000ed90 	.word	0xe000ed90

08002ff0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ffc:	f7fe fbd6 	bl	80017ac <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e099      	b.n	8003140 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0201 	bic.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800302c:	e00f      	b.n	800304e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800302e:	f7fe fbbd 	bl	80017ac <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b05      	cmp	r3, #5
 800303a:	d908      	bls.n	800304e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2220      	movs	r2, #32
 8003040:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2203      	movs	r2, #3
 8003046:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e078      	b.n	8003140 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1e8      	bne.n	800302e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4b38      	ldr	r3, [pc, #224]	@ (8003148 <HAL_DMA_Init+0x158>)
 8003068:	4013      	ands	r3, r2
 800306a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800307a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003086:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003092:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d107      	bne.n	80030b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b0:	4313      	orrs	r3, r2
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f023 0307 	bic.w	r3, r3, #7
 80030ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d117      	bne.n	8003112 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00e      	beq.n	8003112 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 fa77 	bl	80035e8 <DMA_CheckFifoParam>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2240      	movs	r2, #64	@ 0x40
 8003104:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800310e:	2301      	movs	r3, #1
 8003110:	e016      	b.n	8003140 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fa2e 	bl	800357c <DMA_CalcBaseAndBitshift>
 8003120:	4603      	mov	r3, r0
 8003122:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003128:	223f      	movs	r2, #63	@ 0x3f
 800312a:	409a      	lsls	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	e010803f 	.word	0xe010803f

0800314c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003162:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_DMA_Start_IT+0x26>
 800316e:	2302      	movs	r3, #2
 8003170:	e048      	b.n	8003204 <HAL_DMA_Start_IT+0xb8>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b01      	cmp	r3, #1
 8003184:	d137      	bne.n	80031f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2202      	movs	r2, #2
 800318a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 f9c0 	bl	8003520 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a4:	223f      	movs	r2, #63	@ 0x3f
 80031a6:	409a      	lsls	r2, r3
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0216 	orr.w	r2, r2, #22
 80031ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695a      	ldr	r2, [r3, #20]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80031ca:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d007      	beq.n	80031e4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0208 	orr.w	r2, r2, #8
 80031e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	e005      	b.n	8003202 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031fe:	2302      	movs	r3, #2
 8003200:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003202:	7dfb      	ldrb	r3, [r7, #23]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003214:	2300      	movs	r3, #0
 8003216:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003218:	4b8e      	ldr	r3, [pc, #568]	@ (8003454 <HAL_DMA_IRQHandler+0x248>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a8e      	ldr	r2, [pc, #568]	@ (8003458 <HAL_DMA_IRQHandler+0x24c>)
 800321e:	fba2 2303 	umull	r2, r3, r2, r3
 8003222:	0a9b      	lsrs	r3, r3, #10
 8003224:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003236:	2208      	movs	r2, #8
 8003238:	409a      	lsls	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4013      	ands	r3, r2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d01a      	beq.n	8003278 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d013      	beq.n	8003278 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0204 	bic.w	r2, r2, #4
 800325e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003264:	2208      	movs	r2, #8
 8003266:	409a      	lsls	r2, r3
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003270:	f043 0201 	orr.w	r2, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800327c:	2201      	movs	r2, #1
 800327e:	409a      	lsls	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4013      	ands	r3, r2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d012      	beq.n	80032ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00b      	beq.n	80032ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800329a:	2201      	movs	r2, #1
 800329c:	409a      	lsls	r2, r3
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a6:	f043 0202 	orr.w	r2, r3, #2
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b2:	2204      	movs	r2, #4
 80032b4:	409a      	lsls	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d012      	beq.n	80032e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00b      	beq.n	80032e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d0:	2204      	movs	r2, #4
 80032d2:	409a      	lsls	r2, r3
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032dc:	f043 0204 	orr.w	r2, r3, #4
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e8:	2210      	movs	r2, #16
 80032ea:	409a      	lsls	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d043      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d03c      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003306:	2210      	movs	r2, #16
 8003308:	409a      	lsls	r2, r3
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d018      	beq.n	800334e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d108      	bne.n	800333c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d024      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	4798      	blx	r3
 800333a:	e01f      	b.n	800337c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01b      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	4798      	blx	r3
 800334c:	e016      	b.n	800337c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d107      	bne.n	800336c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0208 	bic.w	r2, r2, #8
 800336a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003380:	2220      	movs	r2, #32
 8003382:	409a      	lsls	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4013      	ands	r3, r2
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 808f 	beq.w	80034ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 8087 	beq.w	80034ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a2:	2220      	movs	r2, #32
 80033a4:	409a      	lsls	r2, r3
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b05      	cmp	r3, #5
 80033b4:	d136      	bne.n	8003424 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0216 	bic.w	r2, r2, #22
 80033c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695a      	ldr	r2, [r3, #20]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d103      	bne.n	80033e6 <HAL_DMA_IRQHandler+0x1da>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d007      	beq.n	80033f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0208 	bic.w	r2, r2, #8
 80033f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fa:	223f      	movs	r2, #63	@ 0x3f
 80033fc:	409a      	lsls	r2, r3
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003416:	2b00      	cmp	r3, #0
 8003418:	d07e      	beq.n	8003518 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	4798      	blx	r3
        }
        return;
 8003422:	e079      	b.n	8003518 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d01d      	beq.n	800346e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10d      	bne.n	800345c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003444:	2b00      	cmp	r3, #0
 8003446:	d031      	beq.n	80034ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	4798      	blx	r3
 8003450:	e02c      	b.n	80034ac <HAL_DMA_IRQHandler+0x2a0>
 8003452:	bf00      	nop
 8003454:	20000000 	.word	0x20000000
 8003458:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003460:	2b00      	cmp	r3, #0
 8003462:	d023      	beq.n	80034ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	4798      	blx	r3
 800346c:	e01e      	b.n	80034ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10f      	bne.n	800349c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0210 	bic.w	r2, r2, #16
 800348a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d032      	beq.n	800351a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d022      	beq.n	8003506 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2205      	movs	r2, #5
 80034c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0201 	bic.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	3301      	adds	r3, #1
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d307      	bcc.n	80034f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f2      	bne.n	80034d8 <HAL_DMA_IRQHandler+0x2cc>
 80034f2:	e000      	b.n	80034f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800350a:	2b00      	cmp	r3, #0
 800350c:	d005      	beq.n	800351a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	4798      	blx	r3
 8003516:	e000      	b.n	800351a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003518:	bf00      	nop
    }
  }
}
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800353c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2b40      	cmp	r3, #64	@ 0x40
 800354c:	d108      	bne.n	8003560 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800355e:	e007      	b.n	8003570 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	60da      	str	r2, [r3, #12]
}
 8003570:	bf00      	nop
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	3b10      	subs	r3, #16
 800358c:	4a13      	ldr	r2, [pc, #76]	@ (80035dc <DMA_CalcBaseAndBitshift+0x60>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	091b      	lsrs	r3, r3, #4
 8003594:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003596:	4a12      	ldr	r2, [pc, #72]	@ (80035e0 <DMA_CalcBaseAndBitshift+0x64>)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4413      	add	r3, r2
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d908      	bls.n	80035bc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	4b0c      	ldr	r3, [pc, #48]	@ (80035e4 <DMA_CalcBaseAndBitshift+0x68>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	1d1a      	adds	r2, r3, #4
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80035ba:	e006      	b.n	80035ca <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	4b08      	ldr	r3, [pc, #32]	@ (80035e4 <DMA_CalcBaseAndBitshift+0x68>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	aaaaaaab 	.word	0xaaaaaaab
 80035e0:	08004f40 	.word	0x08004f40
 80035e4:	fffffc00 	.word	0xfffffc00

080035e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d11f      	bne.n	8003642 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d856      	bhi.n	80036b6 <DMA_CheckFifoParam+0xce>
 8003608:	a201      	add	r2, pc, #4	@ (adr r2, 8003610 <DMA_CheckFifoParam+0x28>)
 800360a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360e:	bf00      	nop
 8003610:	08003621 	.word	0x08003621
 8003614:	08003633 	.word	0x08003633
 8003618:	08003621 	.word	0x08003621
 800361c:	080036b7 	.word	0x080036b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003624:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d046      	beq.n	80036ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003630:	e043      	b.n	80036ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003636:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800363a:	d140      	bne.n	80036be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003640:	e03d      	b.n	80036be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800364a:	d121      	bne.n	8003690 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b03      	cmp	r3, #3
 8003650:	d837      	bhi.n	80036c2 <DMA_CheckFifoParam+0xda>
 8003652:	a201      	add	r2, pc, #4	@ (adr r2, 8003658 <DMA_CheckFifoParam+0x70>)
 8003654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003658:	08003669 	.word	0x08003669
 800365c:	0800366f 	.word	0x0800366f
 8003660:	08003669 	.word	0x08003669
 8003664:	08003681 	.word	0x08003681
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
      break;
 800366c:	e030      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003672:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d025      	beq.n	80036c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800367e:	e022      	b.n	80036c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003684:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003688:	d11f      	bne.n	80036ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800368e:	e01c      	b.n	80036ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d903      	bls.n	800369e <DMA_CheckFifoParam+0xb6>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2b03      	cmp	r3, #3
 800369a:	d003      	beq.n	80036a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800369c:	e018      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	73fb      	strb	r3, [r7, #15]
      break;
 80036a2:	e015      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00e      	beq.n	80036ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	73fb      	strb	r3, [r7, #15]
      break;
 80036b4:	e00b      	b.n	80036ce <DMA_CheckFifoParam+0xe6>
      break;
 80036b6:	bf00      	nop
 80036b8:	e00a      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      break;
 80036ba:	bf00      	nop
 80036bc:	e008      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      break;
 80036be:	bf00      	nop
 80036c0:	e006      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      break;
 80036c2:	bf00      	nop
 80036c4:	e004      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      break;
 80036c6:	bf00      	nop
 80036c8:	e002      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80036ca:	bf00      	nop
 80036cc:	e000      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      break;
 80036ce:	bf00      	nop
    }
  } 
  
  return status; 
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop

080036e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b089      	sub	sp, #36	@ 0x24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	e175      	b.n	80039ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003700:	2201      	movs	r2, #1
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	429a      	cmp	r2, r3
 800371a:	f040 8164 	bne.w	80039e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	2b01      	cmp	r3, #1
 8003728:	d005      	beq.n	8003736 <HAL_GPIO_Init+0x56>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d130      	bne.n	8003798 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	2203      	movs	r2, #3
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4313      	orrs	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800376c:	2201      	movs	r2, #1
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f003 0201 	and.w	r2, r3, #1
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d017      	beq.n	80037d4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	2203      	movs	r2, #3
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4013      	ands	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 0303 	and.w	r3, r3, #3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d123      	bne.n	8003828 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	08da      	lsrs	r2, r3, #3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3208      	adds	r2, #8
 80037e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	220f      	movs	r2, #15
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4013      	ands	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4313      	orrs	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	08da      	lsrs	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3208      	adds	r2, #8
 8003822:	69b9      	ldr	r1, [r7, #24]
 8003824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	2203      	movs	r2, #3
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	43db      	mvns	r3, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4013      	ands	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 0203 	and.w	r2, r3, #3
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80be 	beq.w	80039e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800386a:	4b66      	ldr	r3, [pc, #408]	@ (8003a04 <HAL_GPIO_Init+0x324>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386e:	4a65      	ldr	r2, [pc, #404]	@ (8003a04 <HAL_GPIO_Init+0x324>)
 8003870:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003874:	6453      	str	r3, [r2, #68]	@ 0x44
 8003876:	4b63      	ldr	r3, [pc, #396]	@ (8003a04 <HAL_GPIO_Init+0x324>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003882:	4a61      	ldr	r2, [pc, #388]	@ (8003a08 <HAL_GPIO_Init+0x328>)
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	089b      	lsrs	r3, r3, #2
 8003888:	3302      	adds	r3, #2
 800388a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	220f      	movs	r2, #15
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4013      	ands	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a58      	ldr	r2, [pc, #352]	@ (8003a0c <HAL_GPIO_Init+0x32c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d037      	beq.n	800391e <HAL_GPIO_Init+0x23e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a57      	ldr	r2, [pc, #348]	@ (8003a10 <HAL_GPIO_Init+0x330>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d031      	beq.n	800391a <HAL_GPIO_Init+0x23a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a56      	ldr	r2, [pc, #344]	@ (8003a14 <HAL_GPIO_Init+0x334>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d02b      	beq.n	8003916 <HAL_GPIO_Init+0x236>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a55      	ldr	r2, [pc, #340]	@ (8003a18 <HAL_GPIO_Init+0x338>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d025      	beq.n	8003912 <HAL_GPIO_Init+0x232>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a54      	ldr	r2, [pc, #336]	@ (8003a1c <HAL_GPIO_Init+0x33c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d01f      	beq.n	800390e <HAL_GPIO_Init+0x22e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a53      	ldr	r2, [pc, #332]	@ (8003a20 <HAL_GPIO_Init+0x340>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d019      	beq.n	800390a <HAL_GPIO_Init+0x22a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a52      	ldr	r2, [pc, #328]	@ (8003a24 <HAL_GPIO_Init+0x344>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d013      	beq.n	8003906 <HAL_GPIO_Init+0x226>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a51      	ldr	r2, [pc, #324]	@ (8003a28 <HAL_GPIO_Init+0x348>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00d      	beq.n	8003902 <HAL_GPIO_Init+0x222>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a50      	ldr	r2, [pc, #320]	@ (8003a2c <HAL_GPIO_Init+0x34c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d007      	beq.n	80038fe <HAL_GPIO_Init+0x21e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a4f      	ldr	r2, [pc, #316]	@ (8003a30 <HAL_GPIO_Init+0x350>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d101      	bne.n	80038fa <HAL_GPIO_Init+0x21a>
 80038f6:	2309      	movs	r3, #9
 80038f8:	e012      	b.n	8003920 <HAL_GPIO_Init+0x240>
 80038fa:	230a      	movs	r3, #10
 80038fc:	e010      	b.n	8003920 <HAL_GPIO_Init+0x240>
 80038fe:	2308      	movs	r3, #8
 8003900:	e00e      	b.n	8003920 <HAL_GPIO_Init+0x240>
 8003902:	2307      	movs	r3, #7
 8003904:	e00c      	b.n	8003920 <HAL_GPIO_Init+0x240>
 8003906:	2306      	movs	r3, #6
 8003908:	e00a      	b.n	8003920 <HAL_GPIO_Init+0x240>
 800390a:	2305      	movs	r3, #5
 800390c:	e008      	b.n	8003920 <HAL_GPIO_Init+0x240>
 800390e:	2304      	movs	r3, #4
 8003910:	e006      	b.n	8003920 <HAL_GPIO_Init+0x240>
 8003912:	2303      	movs	r3, #3
 8003914:	e004      	b.n	8003920 <HAL_GPIO_Init+0x240>
 8003916:	2302      	movs	r3, #2
 8003918:	e002      	b.n	8003920 <HAL_GPIO_Init+0x240>
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <HAL_GPIO_Init+0x240>
 800391e:	2300      	movs	r3, #0
 8003920:	69fa      	ldr	r2, [r7, #28]
 8003922:	f002 0203 	and.w	r2, r2, #3
 8003926:	0092      	lsls	r2, r2, #2
 8003928:	4093      	lsls	r3, r2
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4313      	orrs	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003930:	4935      	ldr	r1, [pc, #212]	@ (8003a08 <HAL_GPIO_Init+0x328>)
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	089b      	lsrs	r3, r3, #2
 8003936:	3302      	adds	r3, #2
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800393e:	4b3d      	ldr	r3, [pc, #244]	@ (8003a34 <HAL_GPIO_Init+0x354>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	43db      	mvns	r3, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4013      	ands	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003962:	4a34      	ldr	r2, [pc, #208]	@ (8003a34 <HAL_GPIO_Init+0x354>)
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003968:	4b32      	ldr	r3, [pc, #200]	@ (8003a34 <HAL_GPIO_Init+0x354>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	43db      	mvns	r3, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4013      	ands	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4313      	orrs	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800398c:	4a29      	ldr	r2, [pc, #164]	@ (8003a34 <HAL_GPIO_Init+0x354>)
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003992:	4b28      	ldr	r3, [pc, #160]	@ (8003a34 <HAL_GPIO_Init+0x354>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	43db      	mvns	r3, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4013      	ands	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003a34 <HAL_GPIO_Init+0x354>)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003a34 <HAL_GPIO_Init+0x354>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	43db      	mvns	r3, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039e0:	4a14      	ldr	r2, [pc, #80]	@ (8003a34 <HAL_GPIO_Init+0x354>)
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	3301      	adds	r3, #1
 80039ea:	61fb      	str	r3, [r7, #28]
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	2b0f      	cmp	r3, #15
 80039f0:	f67f ae86 	bls.w	8003700 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80039f4:	bf00      	nop
 80039f6:	bf00      	nop
 80039f8:	3724      	adds	r7, #36	@ 0x24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40023800 	.word	0x40023800
 8003a08:	40013800 	.word	0x40013800
 8003a0c:	40020000 	.word	0x40020000
 8003a10:	40020400 	.word	0x40020400
 8003a14:	40020800 	.word	0x40020800
 8003a18:	40020c00 	.word	0x40020c00
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40021400 	.word	0x40021400
 8003a24:	40021800 	.word	0x40021800
 8003a28:	40021c00 	.word	0x40021c00
 8003a2c:	40022000 	.word	0x40022000
 8003a30:	40022400 	.word	0x40022400
 8003a34:	40013c00 	.word	0x40013c00

08003a38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	887b      	ldrh	r3, [r7, #2]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a50:	2301      	movs	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]
 8003a54:	e001      	b.n	8003a5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a56:	2300      	movs	r3, #0
 8003a58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a72:	4b23      	ldr	r3, [pc, #140]	@ (8003b00 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a76:	4a22      	ldr	r2, [pc, #136]	@ (8003b00 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a7e:	4b20      	ldr	r3, [pc, #128]	@ (8003b00 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8003b04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a1d      	ldr	r2, [pc, #116]	@ (8003b04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a94:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a96:	f7fd fe89 	bl	80017ac <HAL_GetTick>
 8003a9a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a9c:	e009      	b.n	8003ab2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a9e:	f7fd fe85 	bl	80017ac <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003aac:	d901      	bls.n	8003ab2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e022      	b.n	8003af8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ab2:	4b14      	ldr	r3, [pc, #80]	@ (8003b04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003abe:	d1ee      	bne.n	8003a9e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ac0:	4b10      	ldr	r3, [pc, #64]	@ (8003b04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a0f      	ldr	r2, [pc, #60]	@ (8003b04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ac6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003acc:	f7fd fe6e 	bl	80017ac <HAL_GetTick>
 8003ad0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ad2:	e009      	b.n	8003ae8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ad4:	f7fd fe6a 	bl	80017ac <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ae2:	d901      	bls.n	8003ae8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e007      	b.n	8003af8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ae8:	4b06      	ldr	r3, [pc, #24]	@ (8003b04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003af4:	d1ee      	bne.n	8003ad4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40023800 	.word	0x40023800
 8003b04:	40007000 	.word	0x40007000

08003b08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b10:	2300      	movs	r3, #0
 8003b12:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e29b      	b.n	8004056 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 8087 	beq.w	8003c3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b2c:	4b96      	ldr	r3, [pc, #600]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 030c 	and.w	r3, r3, #12
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d00c      	beq.n	8003b52 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b38:	4b93      	ldr	r3, [pc, #588]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 030c 	and.w	r3, r3, #12
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d112      	bne.n	8003b6a <HAL_RCC_OscConfig+0x62>
 8003b44:	4b90      	ldr	r3, [pc, #576]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b50:	d10b      	bne.n	8003b6a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b52:	4b8d      	ldr	r3, [pc, #564]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d06c      	beq.n	8003c38 <HAL_RCC_OscConfig+0x130>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d168      	bne.n	8003c38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e275      	b.n	8004056 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b72:	d106      	bne.n	8003b82 <HAL_RCC_OscConfig+0x7a>
 8003b74:	4b84      	ldr	r3, [pc, #528]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a83      	ldr	r2, [pc, #524]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003b7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	e02e      	b.n	8003be0 <HAL_RCC_OscConfig+0xd8>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x9c>
 8003b8a:	4b7f      	ldr	r3, [pc, #508]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a7e      	ldr	r2, [pc, #504]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003b90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	4b7c      	ldr	r3, [pc, #496]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a7b      	ldr	r2, [pc, #492]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003b9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	e01d      	b.n	8003be0 <HAL_RCC_OscConfig+0xd8>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bac:	d10c      	bne.n	8003bc8 <HAL_RCC_OscConfig+0xc0>
 8003bae:	4b76      	ldr	r3, [pc, #472]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a75      	ldr	r2, [pc, #468]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003bb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	4b73      	ldr	r3, [pc, #460]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a72      	ldr	r2, [pc, #456]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	e00b      	b.n	8003be0 <HAL_RCC_OscConfig+0xd8>
 8003bc8:	4b6f      	ldr	r3, [pc, #444]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a6e      	ldr	r2, [pc, #440]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003bce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	4b6c      	ldr	r3, [pc, #432]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a6b      	ldr	r2, [pc, #428]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003bda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d013      	beq.n	8003c10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be8:	f7fd fde0 	bl	80017ac <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bf0:	f7fd fddc 	bl	80017ac <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b64      	cmp	r3, #100	@ 0x64
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e229      	b.n	8004056 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c02:	4b61      	ldr	r3, [pc, #388]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCC_OscConfig+0xe8>
 8003c0e:	e014      	b.n	8003c3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fd fdcc 	bl	80017ac <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c18:	f7fd fdc8 	bl	80017ac <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b64      	cmp	r3, #100	@ 0x64
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e215      	b.n	8004056 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c2a:	4b57      	ldr	r3, [pc, #348]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0x110>
 8003c36:	e000      	b.n	8003c3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d069      	beq.n	8003d1a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c46:	4b50      	ldr	r3, [pc, #320]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00b      	beq.n	8003c6a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c52:	4b4d      	ldr	r3, [pc, #308]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d11c      	bne.n	8003c98 <HAL_RCC_OscConfig+0x190>
 8003c5e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d116      	bne.n	8003c98 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c6a:	4b47      	ldr	r3, [pc, #284]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <HAL_RCC_OscConfig+0x17a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d001      	beq.n	8003c82 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e1e9      	b.n	8004056 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c82:	4b41      	ldr	r3, [pc, #260]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	493d      	ldr	r1, [pc, #244]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c96:	e040      	b.n	8003d1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d023      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ca0:	4b39      	ldr	r3, [pc, #228]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a38      	ldr	r2, [pc, #224]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cac:	f7fd fd7e 	bl	80017ac <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb4:	f7fd fd7a 	bl	80017ac <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e1c7      	b.n	8004056 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc6:	4b30      	ldr	r3, [pc, #192]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	4929      	ldr	r1, [pc, #164]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	600b      	str	r3, [r1, #0]
 8003ce6:	e018      	b.n	8003d1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ce8:	4b27      	ldr	r3, [pc, #156]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a26      	ldr	r2, [pc, #152]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003cee:	f023 0301 	bic.w	r3, r3, #1
 8003cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7fd fd5a 	bl	80017ac <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cfc:	f7fd fd56 	bl	80017ac <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e1a3      	b.n	8004056 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d038      	beq.n	8003d98 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d019      	beq.n	8003d62 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d2e:	4b16      	ldr	r3, [pc, #88]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d32:	4a15      	ldr	r2, [pc, #84]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3a:	f7fd fd37 	bl	80017ac <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d42:	f7fd fd33 	bl	80017ac <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e180      	b.n	8004056 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d54:	4b0c      	ldr	r3, [pc, #48]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003d56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCC_OscConfig+0x23a>
 8003d60:	e01a      	b.n	8003d98 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d62:	4b09      	ldr	r3, [pc, #36]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003d64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d66:	4a08      	ldr	r2, [pc, #32]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003d68:	f023 0301 	bic.w	r3, r3, #1
 8003d6c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6e:	f7fd fd1d 	bl	80017ac <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d74:	e00a      	b.n	8003d8c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d76:	f7fd fd19 	bl	80017ac <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d903      	bls.n	8003d8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e166      	b.n	8004056 <HAL_RCC_OscConfig+0x54e>
 8003d88:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d8c:	4b92      	ldr	r3, [pc, #584]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003d8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1ee      	bne.n	8003d76 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 80a4 	beq.w	8003eee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da6:	4b8c      	ldr	r3, [pc, #560]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10d      	bne.n	8003dce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db2:	4b89      	ldr	r3, [pc, #548]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db6:	4a88      	ldr	r2, [pc, #544]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dbe:	4b86      	ldr	r3, [pc, #536]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dc6:	60bb      	str	r3, [r7, #8]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dce:	4b83      	ldr	r3, [pc, #524]	@ (8003fdc <HAL_RCC_OscConfig+0x4d4>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d118      	bne.n	8003e0c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003dda:	4b80      	ldr	r3, [pc, #512]	@ (8003fdc <HAL_RCC_OscConfig+0x4d4>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a7f      	ldr	r2, [pc, #508]	@ (8003fdc <HAL_RCC_OscConfig+0x4d4>)
 8003de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003de6:	f7fd fce1 	bl	80017ac <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dee:	f7fd fcdd 	bl	80017ac <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b64      	cmp	r3, #100	@ 0x64
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e12a      	b.n	8004056 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e00:	4b76      	ldr	r3, [pc, #472]	@ (8003fdc <HAL_RCC_OscConfig+0x4d4>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0f0      	beq.n	8003dee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d106      	bne.n	8003e22 <HAL_RCC_OscConfig+0x31a>
 8003e14:	4b70      	ldr	r3, [pc, #448]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e18:	4a6f      	ldr	r2, [pc, #444]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e20:	e02d      	b.n	8003e7e <HAL_RCC_OscConfig+0x376>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10c      	bne.n	8003e44 <HAL_RCC_OscConfig+0x33c>
 8003e2a:	4b6b      	ldr	r3, [pc, #428]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2e:	4a6a      	ldr	r2, [pc, #424]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003e30:	f023 0301 	bic.w	r3, r3, #1
 8003e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e36:	4b68      	ldr	r3, [pc, #416]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3a:	4a67      	ldr	r2, [pc, #412]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003e3c:	f023 0304 	bic.w	r3, r3, #4
 8003e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e42:	e01c      	b.n	8003e7e <HAL_RCC_OscConfig+0x376>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2b05      	cmp	r3, #5
 8003e4a:	d10c      	bne.n	8003e66 <HAL_RCC_OscConfig+0x35e>
 8003e4c:	4b62      	ldr	r3, [pc, #392]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e50:	4a61      	ldr	r2, [pc, #388]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003e52:	f043 0304 	orr.w	r3, r3, #4
 8003e56:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e58:	4b5f      	ldr	r3, [pc, #380]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5c:	4a5e      	ldr	r2, [pc, #376]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e64:	e00b      	b.n	8003e7e <HAL_RCC_OscConfig+0x376>
 8003e66:	4b5c      	ldr	r3, [pc, #368]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6a:	4a5b      	ldr	r2, [pc, #364]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003e6c:	f023 0301 	bic.w	r3, r3, #1
 8003e70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e72:	4b59      	ldr	r3, [pc, #356]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e76:	4a58      	ldr	r2, [pc, #352]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003e78:	f023 0304 	bic.w	r3, r3, #4
 8003e7c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d015      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e86:	f7fd fc91 	bl	80017ac <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e8c:	e00a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8e:	f7fd fc8d 	bl	80017ac <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e0d8      	b.n	8004056 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea4:	4b4c      	ldr	r3, [pc, #304]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0ee      	beq.n	8003e8e <HAL_RCC_OscConfig+0x386>
 8003eb0:	e014      	b.n	8003edc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb2:	f7fd fc7b 	bl	80017ac <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb8:	e00a      	b.n	8003ed0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eba:	f7fd fc77 	bl	80017ac <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e0c2      	b.n	8004056 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed0:	4b41      	ldr	r3, [pc, #260]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1ee      	bne.n	8003eba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003edc:	7dfb      	ldrb	r3, [r7, #23]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d105      	bne.n	8003eee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ee2:	4b3d      	ldr	r3, [pc, #244]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee6:	4a3c      	ldr	r2, [pc, #240]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003ee8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eec:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 80ae 	beq.w	8004054 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ef8:	4b37      	ldr	r3, [pc, #220]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 030c 	and.w	r3, r3, #12
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d06d      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d14b      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f0c:	4b32      	ldr	r3, [pc, #200]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a31      	ldr	r2, [pc, #196]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003f12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f18:	f7fd fc48 	bl	80017ac <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f20:	f7fd fc44 	bl	80017ac <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e091      	b.n	8004056 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f32:	4b29      	ldr	r3, [pc, #164]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1f0      	bne.n	8003f20 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69da      	ldr	r2, [r3, #28]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4c:	019b      	lsls	r3, r3, #6
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f54:	085b      	lsrs	r3, r3, #1
 8003f56:	3b01      	subs	r3, #1
 8003f58:	041b      	lsls	r3, r3, #16
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f60:	061b      	lsls	r3, r3, #24
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f68:	071b      	lsls	r3, r3, #28
 8003f6a:	491b      	ldr	r1, [pc, #108]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f70:	4b19      	ldr	r3, [pc, #100]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a18      	ldr	r2, [pc, #96]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003f76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7c:	f7fd fc16 	bl	80017ac <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f84:	f7fd fc12 	bl	80017ac <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e05f      	b.n	8004056 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f96:	4b10      	ldr	r3, [pc, #64]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0f0      	beq.n	8003f84 <HAL_RCC_OscConfig+0x47c>
 8003fa2:	e057      	b.n	8004054 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a0b      	ldr	r2, [pc, #44]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003faa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb0:	f7fd fbfc 	bl	80017ac <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb8:	f7fd fbf8 	bl	80017ac <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e045      	b.n	8004056 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fca:	4b03      	ldr	r3, [pc, #12]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f0      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x4b0>
 8003fd6:	e03d      	b.n	8004054 <HAL_RCC_OscConfig+0x54c>
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8004060 <HAL_RCC_OscConfig+0x558>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d030      	beq.n	8004050 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d129      	bne.n	8004050 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004006:	429a      	cmp	r2, r3
 8004008:	d122      	bne.n	8004050 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004010:	4013      	ands	r3, r2
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004016:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004018:	4293      	cmp	r3, r2
 800401a:	d119      	bne.n	8004050 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004026:	085b      	lsrs	r3, r3, #1
 8004028:	3b01      	subs	r3, #1
 800402a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800402c:	429a      	cmp	r2, r3
 800402e:	d10f      	bne.n	8004050 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800403c:	429a      	cmp	r2, r3
 800403e:	d107      	bne.n	8004050 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800404c:	429a      	cmp	r2, r3
 800404e:	d001      	beq.n	8004054 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e000      	b.n	8004056 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40023800 	.word	0x40023800

08004064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800406e:	2300      	movs	r3, #0
 8004070:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0d0      	b.n	800421e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800407c:	4b6a      	ldr	r3, [pc, #424]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 030f 	and.w	r3, r3, #15
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d910      	bls.n	80040ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408a:	4b67      	ldr	r3, [pc, #412]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f023 020f 	bic.w	r2, r3, #15
 8004092:	4965      	ldr	r1, [pc, #404]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	4313      	orrs	r3, r2
 8004098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800409a:	4b63      	ldr	r3, [pc, #396]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d001      	beq.n	80040ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0b8      	b.n	800421e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d020      	beq.n	80040fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040c4:	4b59      	ldr	r3, [pc, #356]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	4a58      	ldr	r2, [pc, #352]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80040ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040dc:	4b53      	ldr	r3, [pc, #332]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	4a52      	ldr	r2, [pc, #328]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80040e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e8:	4b50      	ldr	r3, [pc, #320]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	494d      	ldr	r1, [pc, #308]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d040      	beq.n	8004188 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d107      	bne.n	800411e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410e:	4b47      	ldr	r3, [pc, #284]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d115      	bne.n	8004146 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e07f      	b.n	800421e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d107      	bne.n	8004136 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004126:	4b41      	ldr	r3, [pc, #260]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d109      	bne.n	8004146 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e073      	b.n	800421e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004136:	4b3d      	ldr	r3, [pc, #244]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e06b      	b.n	800421e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004146:	4b39      	ldr	r3, [pc, #228]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f023 0203 	bic.w	r2, r3, #3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	4936      	ldr	r1, [pc, #216]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004154:	4313      	orrs	r3, r2
 8004156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004158:	f7fd fb28 	bl	80017ac <HAL_GetTick>
 800415c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415e:	e00a      	b.n	8004176 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004160:	f7fd fb24 	bl	80017ac <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e053      	b.n	800421e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004176:	4b2d      	ldr	r3, [pc, #180]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 020c 	and.w	r2, r3, #12
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	429a      	cmp	r2, r3
 8004186:	d1eb      	bne.n	8004160 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004188:	4b27      	ldr	r3, [pc, #156]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 030f 	and.w	r3, r3, #15
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d210      	bcs.n	80041b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004196:	4b24      	ldr	r3, [pc, #144]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f023 020f 	bic.w	r2, r3, #15
 800419e:	4922      	ldr	r1, [pc, #136]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a6:	4b20      	ldr	r3, [pc, #128]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d001      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e032      	b.n	800421e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d008      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c4:	4b19      	ldr	r3, [pc, #100]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4916      	ldr	r1, [pc, #88]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d009      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041e2:	4b12      	ldr	r3, [pc, #72]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	490e      	ldr	r1, [pc, #56]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041f6:	f000 f821 	bl	800423c <HAL_RCC_GetSysClockFreq>
 80041fa:	4602      	mov	r2, r0
 80041fc:	4b0b      	ldr	r3, [pc, #44]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	091b      	lsrs	r3, r3, #4
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	490a      	ldr	r1, [pc, #40]	@ (8004230 <HAL_RCC_ClockConfig+0x1cc>)
 8004208:	5ccb      	ldrb	r3, [r1, r3]
 800420a:	fa22 f303 	lsr.w	r3, r2, r3
 800420e:	4a09      	ldr	r2, [pc, #36]	@ (8004234 <HAL_RCC_ClockConfig+0x1d0>)
 8004210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004212:	4b09      	ldr	r3, [pc, #36]	@ (8004238 <HAL_RCC_ClockConfig+0x1d4>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f7fd fa84 	bl	8001724 <HAL_InitTick>

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40023c00 	.word	0x40023c00
 800422c:	40023800 	.word	0x40023800
 8004230:	08004f30 	.word	0x08004f30
 8004234:	20000000 	.word	0x20000000
 8004238:	20000004 	.word	0x20000004

0800423c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800423c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004240:	b090      	sub	sp, #64	@ 0x40
 8004242:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	637b      	str	r3, [r7, #52]	@ 0x34
 8004248:	2300      	movs	r3, #0
 800424a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800424c:	2300      	movs	r3, #0
 800424e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004250:	2300      	movs	r3, #0
 8004252:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004254:	4b59      	ldr	r3, [pc, #356]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 030c 	and.w	r3, r3, #12
 800425c:	2b08      	cmp	r3, #8
 800425e:	d00d      	beq.n	800427c <HAL_RCC_GetSysClockFreq+0x40>
 8004260:	2b08      	cmp	r3, #8
 8004262:	f200 80a1 	bhi.w	80043a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <HAL_RCC_GetSysClockFreq+0x34>
 800426a:	2b04      	cmp	r3, #4
 800426c:	d003      	beq.n	8004276 <HAL_RCC_GetSysClockFreq+0x3a>
 800426e:	e09b      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004270:	4b53      	ldr	r3, [pc, #332]	@ (80043c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004272:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004274:	e09b      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004276:	4b53      	ldr	r3, [pc, #332]	@ (80043c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004278:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800427a:	e098      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800427c:	4b4f      	ldr	r3, [pc, #316]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x180>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004284:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004286:	4b4d      	ldr	r3, [pc, #308]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d028      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004292:	4b4a      	ldr	r3, [pc, #296]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	099b      	lsrs	r3, r3, #6
 8004298:	2200      	movs	r2, #0
 800429a:	623b      	str	r3, [r7, #32]
 800429c:	627a      	str	r2, [r7, #36]	@ 0x24
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80042a4:	2100      	movs	r1, #0
 80042a6:	4b47      	ldr	r3, [pc, #284]	@ (80043c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80042a8:	fb03 f201 	mul.w	r2, r3, r1
 80042ac:	2300      	movs	r3, #0
 80042ae:	fb00 f303 	mul.w	r3, r0, r3
 80042b2:	4413      	add	r3, r2
 80042b4:	4a43      	ldr	r2, [pc, #268]	@ (80043c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80042b6:	fba0 1202 	umull	r1, r2, r0, r2
 80042ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042bc:	460a      	mov	r2, r1
 80042be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80042c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042c2:	4413      	add	r3, r2
 80042c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c8:	2200      	movs	r2, #0
 80042ca:	61bb      	str	r3, [r7, #24]
 80042cc:	61fa      	str	r2, [r7, #28]
 80042ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80042d6:	f7fb ffaf 	bl	8000238 <__aeabi_uldivmod>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4613      	mov	r3, r2
 80042e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042e2:	e053      	b.n	800438c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e4:	4b35      	ldr	r3, [pc, #212]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x180>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	099b      	lsrs	r3, r3, #6
 80042ea:	2200      	movs	r2, #0
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	617a      	str	r2, [r7, #20]
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80042f6:	f04f 0b00 	mov.w	fp, #0
 80042fa:	4652      	mov	r2, sl
 80042fc:	465b      	mov	r3, fp
 80042fe:	f04f 0000 	mov.w	r0, #0
 8004302:	f04f 0100 	mov.w	r1, #0
 8004306:	0159      	lsls	r1, r3, #5
 8004308:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800430c:	0150      	lsls	r0, r2, #5
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	ebb2 080a 	subs.w	r8, r2, sl
 8004316:	eb63 090b 	sbc.w	r9, r3, fp
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	f04f 0300 	mov.w	r3, #0
 8004322:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004326:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800432a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800432e:	ebb2 0408 	subs.w	r4, r2, r8
 8004332:	eb63 0509 	sbc.w	r5, r3, r9
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	00eb      	lsls	r3, r5, #3
 8004340:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004344:	00e2      	lsls	r2, r4, #3
 8004346:	4614      	mov	r4, r2
 8004348:	461d      	mov	r5, r3
 800434a:	eb14 030a 	adds.w	r3, r4, sl
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	eb45 030b 	adc.w	r3, r5, fp
 8004354:	607b      	str	r3, [r7, #4]
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004362:	4629      	mov	r1, r5
 8004364:	028b      	lsls	r3, r1, #10
 8004366:	4621      	mov	r1, r4
 8004368:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800436c:	4621      	mov	r1, r4
 800436e:	028a      	lsls	r2, r1, #10
 8004370:	4610      	mov	r0, r2
 8004372:	4619      	mov	r1, r3
 8004374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004376:	2200      	movs	r2, #0
 8004378:	60bb      	str	r3, [r7, #8]
 800437a:	60fa      	str	r2, [r7, #12]
 800437c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004380:	f7fb ff5a 	bl	8000238 <__aeabi_uldivmod>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4613      	mov	r3, r2
 800438a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800438c:	4b0b      	ldr	r3, [pc, #44]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x180>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	0c1b      	lsrs	r3, r3, #16
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	3301      	adds	r3, #1
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800439c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800439e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043a6:	e002      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043a8:	4b05      	ldr	r3, [pc, #20]	@ (80043c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80043aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3740      	adds	r7, #64	@ 0x40
 80043b4:	46bd      	mov	sp, r7
 80043b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ba:	bf00      	nop
 80043bc:	40023800 	.word	0x40023800
 80043c0:	00f42400 	.word	0x00f42400
 80043c4:	017d7840 	.word	0x017d7840

080043c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e049      	b.n	800446e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d106      	bne.n	80043f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fd f8a0 	bl	8001534 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3304      	adds	r3, #4
 8004404:	4619      	mov	r1, r3
 8004406:	4610      	mov	r0, r2
 8004408:	f000 fb30 	bl	8004a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
	...

08004478 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b01      	cmp	r3, #1
 800448a:	d001      	beq.n	8004490 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e04c      	b.n	800452a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a26      	ldr	r2, [pc, #152]	@ (8004538 <HAL_TIM_Base_Start+0xc0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d022      	beq.n	80044e8 <HAL_TIM_Base_Start+0x70>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044aa:	d01d      	beq.n	80044e8 <HAL_TIM_Base_Start+0x70>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a22      	ldr	r2, [pc, #136]	@ (800453c <HAL_TIM_Base_Start+0xc4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d018      	beq.n	80044e8 <HAL_TIM_Base_Start+0x70>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a21      	ldr	r2, [pc, #132]	@ (8004540 <HAL_TIM_Base_Start+0xc8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d013      	beq.n	80044e8 <HAL_TIM_Base_Start+0x70>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004544 <HAL_TIM_Base_Start+0xcc>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00e      	beq.n	80044e8 <HAL_TIM_Base_Start+0x70>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004548 <HAL_TIM_Base_Start+0xd0>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d009      	beq.n	80044e8 <HAL_TIM_Base_Start+0x70>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a1c      	ldr	r2, [pc, #112]	@ (800454c <HAL_TIM_Base_Start+0xd4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d004      	beq.n	80044e8 <HAL_TIM_Base_Start+0x70>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004550 <HAL_TIM_Base_Start+0xd8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d115      	bne.n	8004514 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	4b19      	ldr	r3, [pc, #100]	@ (8004554 <HAL_TIM_Base_Start+0xdc>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b06      	cmp	r3, #6
 80044f8:	d015      	beq.n	8004526 <HAL_TIM_Base_Start+0xae>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004500:	d011      	beq.n	8004526 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f042 0201 	orr.w	r2, r2, #1
 8004510:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004512:	e008      	b.n	8004526 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	e000      	b.n	8004528 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004526:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	40010000 	.word	0x40010000
 800453c:	40000400 	.word	0x40000400
 8004540:	40000800 	.word	0x40000800
 8004544:	40000c00 	.word	0x40000c00
 8004548:	40010400 	.word	0x40010400
 800454c:	40014000 	.word	0x40014000
 8004550:	40001800 	.word	0x40001800
 8004554:	00010007 	.word	0x00010007

08004558 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b01      	cmp	r3, #1
 800456a:	d001      	beq.n	8004570 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e054      	b.n	800461a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0201 	orr.w	r2, r2, #1
 8004586:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a26      	ldr	r2, [pc, #152]	@ (8004628 <HAL_TIM_Base_Start_IT+0xd0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d022      	beq.n	80045d8 <HAL_TIM_Base_Start_IT+0x80>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800459a:	d01d      	beq.n	80045d8 <HAL_TIM_Base_Start_IT+0x80>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a22      	ldr	r2, [pc, #136]	@ (800462c <HAL_TIM_Base_Start_IT+0xd4>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d018      	beq.n	80045d8 <HAL_TIM_Base_Start_IT+0x80>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a21      	ldr	r2, [pc, #132]	@ (8004630 <HAL_TIM_Base_Start_IT+0xd8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d013      	beq.n	80045d8 <HAL_TIM_Base_Start_IT+0x80>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004634 <HAL_TIM_Base_Start_IT+0xdc>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00e      	beq.n	80045d8 <HAL_TIM_Base_Start_IT+0x80>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a1e      	ldr	r2, [pc, #120]	@ (8004638 <HAL_TIM_Base_Start_IT+0xe0>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d009      	beq.n	80045d8 <HAL_TIM_Base_Start_IT+0x80>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a1c      	ldr	r2, [pc, #112]	@ (800463c <HAL_TIM_Base_Start_IT+0xe4>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d004      	beq.n	80045d8 <HAL_TIM_Base_Start_IT+0x80>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004640 <HAL_TIM_Base_Start_IT+0xe8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d115      	bne.n	8004604 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	4b19      	ldr	r3, [pc, #100]	@ (8004644 <HAL_TIM_Base_Start_IT+0xec>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2b06      	cmp	r3, #6
 80045e8:	d015      	beq.n	8004616 <HAL_TIM_Base_Start_IT+0xbe>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045f0:	d011      	beq.n	8004616 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f042 0201 	orr.w	r2, r2, #1
 8004600:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004602:	e008      	b.n	8004616 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	e000      	b.n	8004618 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004616:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40010000 	.word	0x40010000
 800462c:	40000400 	.word	0x40000400
 8004630:	40000800 	.word	0x40000800
 8004634:	40000c00 	.word	0x40000c00
 8004638:	40010400 	.word	0x40010400
 800463c:	40014000 	.word	0x40014000
 8004640:	40001800 	.word	0x40001800
 8004644:	00010007 	.word	0x00010007

08004648 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b02      	cmp	r3, #2
 800465c:	d122      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b02      	cmp	r3, #2
 800466a:	d11b      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0202 	mvn.w	r2, #2
 8004674:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f9d0 	bl	8004a30 <HAL_TIM_IC_CaptureCallback>
 8004690:	e005      	b.n	800469e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f9c2 	bl	8004a1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f9d3 	bl	8004a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	f003 0304 	and.w	r3, r3, #4
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d122      	bne.n	80046f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d11b      	bne.n	80046f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f06f 0204 	mvn.w	r2, #4
 80046c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2202      	movs	r2, #2
 80046ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f9a6 	bl	8004a30 <HAL_TIM_IC_CaptureCallback>
 80046e4:	e005      	b.n	80046f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f998 	bl	8004a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f9a9 	bl	8004a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b08      	cmp	r3, #8
 8004704:	d122      	bne.n	800474c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b08      	cmp	r3, #8
 8004712:	d11b      	bne.n	800474c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f06f 0208 	mvn.w	r2, #8
 800471c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2204      	movs	r2, #4
 8004722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f97c 	bl	8004a30 <HAL_TIM_IC_CaptureCallback>
 8004738:	e005      	b.n	8004746 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f96e 	bl	8004a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f97f 	bl	8004a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f003 0310 	and.w	r3, r3, #16
 8004756:	2b10      	cmp	r3, #16
 8004758:	d122      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	2b10      	cmp	r3, #16
 8004766:	d11b      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0210 	mvn.w	r2, #16
 8004770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2208      	movs	r2, #8
 8004776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f952 	bl	8004a30 <HAL_TIM_IC_CaptureCallback>
 800478c:	e005      	b.n	800479a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f944 	bl	8004a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f955 	bl	8004a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d10e      	bne.n	80047cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d107      	bne.n	80047cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f06f 0201 	mvn.w	r2, #1
 80047c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7fc fb9a 	bl	8000f00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047d6:	2b80      	cmp	r3, #128	@ 0x80
 80047d8:	d10e      	bne.n	80047f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e4:	2b80      	cmp	r3, #128	@ 0x80
 80047e6:	d107      	bne.n	80047f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80047f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fb0c 	bl	8004e10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004802:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004806:	d10e      	bne.n	8004826 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004812:	2b80      	cmp	r3, #128	@ 0x80
 8004814:	d107      	bne.n	8004826 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800481e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 faff 	bl	8004e24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004830:	2b40      	cmp	r3, #64	@ 0x40
 8004832:	d10e      	bne.n	8004852 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800483e:	2b40      	cmp	r3, #64	@ 0x40
 8004840:	d107      	bne.n	8004852 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800484a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f903 	bl	8004a58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	f003 0320 	and.w	r3, r3, #32
 800485c:	2b20      	cmp	r3, #32
 800485e:	d10e      	bne.n	800487e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b20      	cmp	r3, #32
 800486c:	d107      	bne.n	800487e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f06f 0220 	mvn.w	r2, #32
 8004876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 fabf 	bl	8004dfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800487e:	bf00      	nop
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_TIM_ConfigClockSource+0x1c>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e0b4      	b.n	8004a0e <HAL_TIM_ConfigClockSource+0x186>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	4b56      	ldr	r3, [pc, #344]	@ (8004a18 <HAL_TIM_ConfigClockSource+0x190>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048dc:	d03e      	beq.n	800495c <HAL_TIM_ConfigClockSource+0xd4>
 80048de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048e2:	f200 8087 	bhi.w	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
 80048e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ea:	f000 8086 	beq.w	80049fa <HAL_TIM_ConfigClockSource+0x172>
 80048ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048f2:	d87f      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
 80048f4:	2b70      	cmp	r3, #112	@ 0x70
 80048f6:	d01a      	beq.n	800492e <HAL_TIM_ConfigClockSource+0xa6>
 80048f8:	2b70      	cmp	r3, #112	@ 0x70
 80048fa:	d87b      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
 80048fc:	2b60      	cmp	r3, #96	@ 0x60
 80048fe:	d050      	beq.n	80049a2 <HAL_TIM_ConfigClockSource+0x11a>
 8004900:	2b60      	cmp	r3, #96	@ 0x60
 8004902:	d877      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004904:	2b50      	cmp	r3, #80	@ 0x50
 8004906:	d03c      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0xfa>
 8004908:	2b50      	cmp	r3, #80	@ 0x50
 800490a:	d873      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
 800490c:	2b40      	cmp	r3, #64	@ 0x40
 800490e:	d058      	beq.n	80049c2 <HAL_TIM_ConfigClockSource+0x13a>
 8004910:	2b40      	cmp	r3, #64	@ 0x40
 8004912:	d86f      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004914:	2b30      	cmp	r3, #48	@ 0x30
 8004916:	d064      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004918:	2b30      	cmp	r3, #48	@ 0x30
 800491a:	d86b      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
 800491c:	2b20      	cmp	r3, #32
 800491e:	d060      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004920:	2b20      	cmp	r3, #32
 8004922:	d867      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004924:	2b00      	cmp	r3, #0
 8004926:	d05c      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004928:	2b10      	cmp	r3, #16
 800492a:	d05a      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0x15a>
 800492c:	e062      	b.n	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800493e:	f000 f9af 	bl	8004ca0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004950:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	609a      	str	r2, [r3, #8]
      break;
 800495a:	e04f      	b.n	80049fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800496c:	f000 f998 	bl	8004ca0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800497e:	609a      	str	r2, [r3, #8]
      break;
 8004980:	e03c      	b.n	80049fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800498e:	461a      	mov	r2, r3
 8004990:	f000 f90c 	bl	8004bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2150      	movs	r1, #80	@ 0x50
 800499a:	4618      	mov	r0, r3
 800499c:	f000 f965 	bl	8004c6a <TIM_ITRx_SetConfig>
      break;
 80049a0:	e02c      	b.n	80049fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049ae:	461a      	mov	r2, r3
 80049b0:	f000 f92b 	bl	8004c0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2160      	movs	r1, #96	@ 0x60
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 f955 	bl	8004c6a <TIM_ITRx_SetConfig>
      break;
 80049c0:	e01c      	b.n	80049fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ce:	461a      	mov	r2, r3
 80049d0:	f000 f8ec 	bl	8004bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2140      	movs	r1, #64	@ 0x40
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 f945 	bl	8004c6a <TIM_ITRx_SetConfig>
      break;
 80049e0:	e00c      	b.n	80049fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4619      	mov	r1, r3
 80049ec:	4610      	mov	r0, r2
 80049ee:	f000 f93c 	bl	8004c6a <TIM_ITRx_SetConfig>
      break;
 80049f2:	e003      	b.n	80049fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	73fb      	strb	r3, [r7, #15]
      break;
 80049f8:	e000      	b.n	80049fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	fffeff88 	.word	0xfffeff88

08004a1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a40      	ldr	r2, [pc, #256]	@ (8004b80 <TIM_Base_SetConfig+0x114>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d013      	beq.n	8004aac <TIM_Base_SetConfig+0x40>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a8a:	d00f      	beq.n	8004aac <TIM_Base_SetConfig+0x40>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a3d      	ldr	r2, [pc, #244]	@ (8004b84 <TIM_Base_SetConfig+0x118>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d00b      	beq.n	8004aac <TIM_Base_SetConfig+0x40>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a3c      	ldr	r2, [pc, #240]	@ (8004b88 <TIM_Base_SetConfig+0x11c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d007      	beq.n	8004aac <TIM_Base_SetConfig+0x40>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a3b      	ldr	r2, [pc, #236]	@ (8004b8c <TIM_Base_SetConfig+0x120>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d003      	beq.n	8004aac <TIM_Base_SetConfig+0x40>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a3a      	ldr	r2, [pc, #232]	@ (8004b90 <TIM_Base_SetConfig+0x124>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d108      	bne.n	8004abe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a2f      	ldr	r2, [pc, #188]	@ (8004b80 <TIM_Base_SetConfig+0x114>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d02b      	beq.n	8004b1e <TIM_Base_SetConfig+0xb2>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004acc:	d027      	beq.n	8004b1e <TIM_Base_SetConfig+0xb2>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a2c      	ldr	r2, [pc, #176]	@ (8004b84 <TIM_Base_SetConfig+0x118>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d023      	beq.n	8004b1e <TIM_Base_SetConfig+0xb2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a2b      	ldr	r2, [pc, #172]	@ (8004b88 <TIM_Base_SetConfig+0x11c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d01f      	beq.n	8004b1e <TIM_Base_SetConfig+0xb2>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a2a      	ldr	r2, [pc, #168]	@ (8004b8c <TIM_Base_SetConfig+0x120>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d01b      	beq.n	8004b1e <TIM_Base_SetConfig+0xb2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a29      	ldr	r2, [pc, #164]	@ (8004b90 <TIM_Base_SetConfig+0x124>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d017      	beq.n	8004b1e <TIM_Base_SetConfig+0xb2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a28      	ldr	r2, [pc, #160]	@ (8004b94 <TIM_Base_SetConfig+0x128>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d013      	beq.n	8004b1e <TIM_Base_SetConfig+0xb2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a27      	ldr	r2, [pc, #156]	@ (8004b98 <TIM_Base_SetConfig+0x12c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d00f      	beq.n	8004b1e <TIM_Base_SetConfig+0xb2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a26      	ldr	r2, [pc, #152]	@ (8004b9c <TIM_Base_SetConfig+0x130>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00b      	beq.n	8004b1e <TIM_Base_SetConfig+0xb2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a25      	ldr	r2, [pc, #148]	@ (8004ba0 <TIM_Base_SetConfig+0x134>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d007      	beq.n	8004b1e <TIM_Base_SetConfig+0xb2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a24      	ldr	r2, [pc, #144]	@ (8004ba4 <TIM_Base_SetConfig+0x138>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d003      	beq.n	8004b1e <TIM_Base_SetConfig+0xb2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a23      	ldr	r2, [pc, #140]	@ (8004ba8 <TIM_Base_SetConfig+0x13c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d108      	bne.n	8004b30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a0a      	ldr	r2, [pc, #40]	@ (8004b80 <TIM_Base_SetConfig+0x114>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d003      	beq.n	8004b64 <TIM_Base_SetConfig+0xf8>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a0c      	ldr	r2, [pc, #48]	@ (8004b90 <TIM_Base_SetConfig+0x124>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d103      	bne.n	8004b6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	691a      	ldr	r2, [r3, #16]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	615a      	str	r2, [r3, #20]
}
 8004b72:	bf00      	nop
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	40010000 	.word	0x40010000
 8004b84:	40000400 	.word	0x40000400
 8004b88:	40000800 	.word	0x40000800
 8004b8c:	40000c00 	.word	0x40000c00
 8004b90:	40010400 	.word	0x40010400
 8004b94:	40014000 	.word	0x40014000
 8004b98:	40014400 	.word	0x40014400
 8004b9c:	40014800 	.word	0x40014800
 8004ba0:	40001800 	.word	0x40001800
 8004ba4:	40001c00 	.word	0x40001c00
 8004ba8:	40002000 	.word	0x40002000

08004bac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	f023 0201 	bic.w	r2, r3, #1
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f023 030a 	bic.w	r3, r3, #10
 8004be8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	621a      	str	r2, [r3, #32]
}
 8004bfe:	bf00      	nop
 8004c00:	371c      	adds	r7, #28
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b087      	sub	sp, #28
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	60f8      	str	r0, [r7, #12]
 8004c12:	60b9      	str	r1, [r7, #8]
 8004c14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	f023 0210 	bic.w	r2, r3, #16
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	031b      	lsls	r3, r3, #12
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	621a      	str	r2, [r3, #32]
}
 8004c5e:	bf00      	nop
 8004c60:	371c      	adds	r7, #28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b085      	sub	sp, #20
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
 8004c72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f043 0307 	orr.w	r3, r3, #7
 8004c8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	609a      	str	r2, [r3, #8]
}
 8004c94:	bf00      	nop
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	021a      	lsls	r2, r3, #8
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	609a      	str	r2, [r3, #8]
}
 8004cd4:	bf00      	nop
 8004cd6:	371c      	adds	r7, #28
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e06d      	b.n	8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a30      	ldr	r2, [pc, #192]	@ (8004de0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d004      	beq.n	8004d2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a2f      	ldr	r2, [pc, #188]	@ (8004de4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d108      	bne.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004d32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a20      	ldr	r2, [pc, #128]	@ (8004de0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d022      	beq.n	8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d6a:	d01d      	beq.n	8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a1d      	ldr	r2, [pc, #116]	@ (8004de8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d018      	beq.n	8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8004dec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d013      	beq.n	8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a1a      	ldr	r2, [pc, #104]	@ (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d00e      	beq.n	8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a15      	ldr	r2, [pc, #84]	@ (8004de4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d009      	beq.n	8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a16      	ldr	r2, [pc, #88]	@ (8004df4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d004      	beq.n	8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a15      	ldr	r2, [pc, #84]	@ (8004df8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d10c      	bne.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	40010000 	.word	0x40010000
 8004de4:	40010400 	.word	0x40010400
 8004de8:	40000400 	.word	0x40000400
 8004dec:	40000800 	.word	0x40000800
 8004df0:	40000c00 	.word	0x40000c00
 8004df4:	40014000 	.word	0x40014000
 8004df8:	40001800 	.word	0x40001800

08004dfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <memset>:
 8004e38:	4402      	add	r2, r0
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d100      	bne.n	8004e42 <memset+0xa>
 8004e40:	4770      	bx	lr
 8004e42:	f803 1b01 	strb.w	r1, [r3], #1
 8004e46:	e7f9      	b.n	8004e3c <memset+0x4>

08004e48 <__libc_init_array>:
 8004e48:	b570      	push	{r4, r5, r6, lr}
 8004e4a:	4d0d      	ldr	r5, [pc, #52]	@ (8004e80 <__libc_init_array+0x38>)
 8004e4c:	4c0d      	ldr	r4, [pc, #52]	@ (8004e84 <__libc_init_array+0x3c>)
 8004e4e:	1b64      	subs	r4, r4, r5
 8004e50:	10a4      	asrs	r4, r4, #2
 8004e52:	2600      	movs	r6, #0
 8004e54:	42a6      	cmp	r6, r4
 8004e56:	d109      	bne.n	8004e6c <__libc_init_array+0x24>
 8004e58:	4d0b      	ldr	r5, [pc, #44]	@ (8004e88 <__libc_init_array+0x40>)
 8004e5a:	4c0c      	ldr	r4, [pc, #48]	@ (8004e8c <__libc_init_array+0x44>)
 8004e5c:	f000 f85c 	bl	8004f18 <_init>
 8004e60:	1b64      	subs	r4, r4, r5
 8004e62:	10a4      	asrs	r4, r4, #2
 8004e64:	2600      	movs	r6, #0
 8004e66:	42a6      	cmp	r6, r4
 8004e68:	d105      	bne.n	8004e76 <__libc_init_array+0x2e>
 8004e6a:	bd70      	pop	{r4, r5, r6, pc}
 8004e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e70:	4798      	blx	r3
 8004e72:	3601      	adds	r6, #1
 8004e74:	e7ee      	b.n	8004e54 <__libc_init_array+0xc>
 8004e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e7a:	4798      	blx	r3
 8004e7c:	3601      	adds	r6, #1
 8004e7e:	e7f2      	b.n	8004e66 <__libc_init_array+0x1e>
 8004e80:	08004f50 	.word	0x08004f50
 8004e84:	08004f50 	.word	0x08004f50
 8004e88:	08004f50 	.word	0x08004f50
 8004e8c:	08004f54 	.word	0x08004f54

08004e90 <round>:
 8004e90:	ee10 3a90 	vmov	r3, s1
 8004e94:	f3c3 510a 	ubfx	r1, r3, #20, #11
 8004e98:	f2a1 32ff 	subw	r2, r1, #1023	@ 0x3ff
 8004e9c:	2a13      	cmp	r2, #19
 8004e9e:	b510      	push	{r4, lr}
 8004ea0:	ee10 4a10 	vmov	r4, s0
 8004ea4:	dc1d      	bgt.n	8004ee2 <round+0x52>
 8004ea6:	2a00      	cmp	r2, #0
 8004ea8:	da0d      	bge.n	8004ec6 <round+0x36>
 8004eaa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004eae:	3201      	adds	r2, #1
 8004eb0:	bf04      	itt	eq
 8004eb2:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8004eb6:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8004eba:	2200      	movs	r2, #0
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	ec41 0b10 	vmov	d0, r0, r1
 8004ec4:	e014      	b.n	8004ef0 <round+0x60>
 8004ec6:	4813      	ldr	r0, [pc, #76]	@ (8004f14 <round+0x84>)
 8004ec8:	4110      	asrs	r0, r2
 8004eca:	ea00 0103 	and.w	r1, r0, r3
 8004ece:	4321      	orrs	r1, r4
 8004ed0:	d00e      	beq.n	8004ef0 <round+0x60>
 8004ed2:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004ed6:	fa41 f202 	asr.w	r2, r1, r2
 8004eda:	4413      	add	r3, r2
 8004edc:	ea23 0300 	bic.w	r3, r3, r0
 8004ee0:	e7eb      	b.n	8004eba <round+0x2a>
 8004ee2:	2a33      	cmp	r2, #51	@ 0x33
 8004ee4:	dd05      	ble.n	8004ef2 <round+0x62>
 8004ee6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8004eea:	d101      	bne.n	8004ef0 <round+0x60>
 8004eec:	ee30 0b00 	vadd.f64	d0, d0, d0
 8004ef0:	bd10      	pop	{r4, pc}
 8004ef2:	f2a1 4113 	subw	r1, r1, #1043	@ 0x413
 8004ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8004efa:	40c8      	lsrs	r0, r1
 8004efc:	4220      	tst	r0, r4
 8004efe:	d0f7      	beq.n	8004ef0 <round+0x60>
 8004f00:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8004f04:	2201      	movs	r2, #1
 8004f06:	408a      	lsls	r2, r1
 8004f08:	1912      	adds	r2, r2, r4
 8004f0a:	bf28      	it	cs
 8004f0c:	3301      	addcs	r3, #1
 8004f0e:	ea22 0200 	bic.w	r2, r2, r0
 8004f12:	e7d3      	b.n	8004ebc <round+0x2c>
 8004f14:	000fffff 	.word	0x000fffff

08004f18 <_init>:
 8004f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1a:	bf00      	nop
 8004f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f1e:	bc08      	pop	{r3}
 8004f20:	469e      	mov	lr, r3
 8004f22:	4770      	bx	lr

08004f24 <_fini>:
 8004f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f26:	bf00      	nop
 8004f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2a:	bc08      	pop	{r3}
 8004f2c:	469e      	mov	lr, r3
 8004f2e:	4770      	bx	lr
