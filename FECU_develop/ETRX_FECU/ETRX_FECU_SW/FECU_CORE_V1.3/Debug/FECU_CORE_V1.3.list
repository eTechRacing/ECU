
FECU_CORE_V1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040a0  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004298  08004298  00005298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042b0  080042b0  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080042b0  080042b0  000052b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042b8  080042b8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042b8  080042b8  000052b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042bc  080042bc  000052bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080042c0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  2000000c  080042cc  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  080042cc  0000623c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec10  00000000  00000000  0000603a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002360  00000000  00000000  00014c4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  00016fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af8  00000000  00000000  00017de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028891  00000000  00000000  000188e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010154  00000000  00000000  00041171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100073  00000000  00000000  000512c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  00151338  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c64  00000000  00000000  001513c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  00155024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004280 	.word	0x08004280

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08004280 	.word	0x08004280

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <CAN1_FILTER_INIT>:





void CAN1_FILTER_INIT(CAN_FilterTypeDef *canfil){
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	   canfil->FilterBank = 0;								// This refers to which filter is being configured. On this case is the filter number 0
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2200      	movs	r2, #0
 8000534:	615a      	str	r2, [r3, #20]
	   canfil->FilterMode = CAN_FILTERMODE_IDMASK;					// FilterMode: How are we filtering the incoming messages. Only the messages that coincide with the mask and the filter are accepted
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	619a      	str	r2, [r3, #24]
	   canfil->FilterFIFOAssignment = CAN_FILTER_FIFO0;			// Defines at which FIFO is this filter being configured to.
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2200      	movs	r2, #0
 8000540:	611a      	str	r2, [r3, #16]
	   canfil->FilterIdHigh = 0x0000;						// MSB: Most Significant Bit. When it's in 0, accepts all the messages
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
	   canfil->FilterIdLow = 0x0000;						// LSB: Least Significant Bit. When it's in 0, accepts all the messages
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2200      	movs	r2, #0
 800054c:	605a      	str	r2, [r3, #4]
	   canfil->FilterMaskIdHigh = 0x0000;					// Most Significant Bit of the mask. When it's in 0, accepts all the messages
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
	   canfil->FilterMaskIdLow = 0x0000;					// Least Significant Bit of the mask. When it's in 0, accepts all the messages
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
	   canfil->FilterScale = CAN_FILTERSCALE_32BIT;				// Defines the Filter Scale. (use the 32 bits)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2201      	movs	r2, #1
 800055e:	61da      	str	r2, [r3, #28]
	   canfil->FilterActivation = DISABLE;					// This activates the filter as it is enable
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2200      	movs	r2, #0
 8000564:	621a      	str	r2, [r3, #32]
	   canfil->SlaveStartFilterBank = 14;					// Indicates the first filter slave number. In this case it is the principal filter.
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	220e      	movs	r2, #14
 800056a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <CAN2_FILTER_INIT>:

void CAN2_FILTER_INIT(CAN_FilterTypeDef *canfil){
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	   canfil->FilterBank = 14;								// This refers to which filter is being configured. On this case is the filter number 0
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	220e      	movs	r2, #14
 8000584:	615a      	str	r2, [r3, #20]
	   canfil->FilterMode = CAN_FILTERMODE_IDMASK;					// FilterMode: How are we filtering the incoming messages. Only the messages that coincide with the mask and the filter are accepted
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2200      	movs	r2, #0
 800058a:	619a      	str	r2, [r3, #24]
	   canfil->FilterFIFOAssignment = CAN_FILTER_FIFO1;			// Defines at which FIFO is this filter being configured to.
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2201      	movs	r2, #1
 8000590:	611a      	str	r2, [r3, #16]
	   canfil->FilterIdHigh = 0x0000;						// MSB: Most Significant Bit. When it's in 0, accepts all the messages
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
	   canfil->FilterIdLow = 0x0000;						// LSB: Least Significant Bit. When it's in 0, accepts all the messages
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2200      	movs	r2, #0
 800059c:	605a      	str	r2, [r3, #4]
	   canfil->FilterMaskIdHigh = 0x0000;					// Most Significant Bit of the mask. When it's in 0, accepts all the messages
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
	   canfil->FilterMaskIdLow = 0x0000;					// Least Significant Bit of the mask. When it's in 0, accepts all the messages
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
	   canfil->FilterScale = CAN_FILTERSCALE_32BIT;				// Defines the Filter Scale. (use the 32 bits)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	61da      	str	r2, [r3, #28]
	   canfil->FilterActivation = DISABLE;					// This activates the filter as it is enable
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2200      	movs	r2, #0
 80005b4:	621a      	str	r2, [r3, #32]
	   canfil->SlaveStartFilterBank = 14;					// Indicates the first filter slave number. In this case it is the principal filter.
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	220e      	movs	r2, #14
 80005ba:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <CAN1_CONFIG_INIT>:

void CAN1_CONFIG_INIT(CAN_FilterTypeDef canfil, CAN_HandleTypeDef hcan){
 80005c8:	b084      	sub	sp, #16
 80005ca:	b490      	push	{r4, r7}
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	f107 0408 	add.w	r4, r7, #8
 80005d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    //if(HAL_CAN_ConfigFilter(&hcan, &canfil) != HAL_OK) Error_Handler();
    //if(HAL_CAN_Start(&hcan) != HAL_OK)Error_Handler();
    //if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)Error_Handler();
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc90      	pop	{r4, r7}
 80005dc:	b004      	add	sp, #16
 80005de:	4770      	bx	lr

080005e0 <CAN2_CONFIG_INIT>:

void CAN2_CONFIG_INIT(CAN_FilterTypeDef canfil, CAN_HandleTypeDef hcan){
 80005e0:	b084      	sub	sp, #16
 80005e2:	b490      	push	{r4, r7}
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	f107 0408 	add.w	r4, r7, #8
 80005ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    //if(HAL_CAN_ConfigFilter(&hcan, &canfil) != HAL_OK) Error_Handler();
    //if(HAL_CAN_Start(&hcan) != HAL_OK)Error_Handler();
    //if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)Error_Handler();
}
 80005ee:	bf00      	nop
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc90      	pop	{r4, r7}
 80005f4:	b004      	add	sp, #16
 80005f6:	4770      	bx	lr

080005f8 <message_cantx_FECU_Data1>:





	void message_cantx_FECU_Data1(CAN_HandleTypeDef hcan2,uint16_t APPS1, uint16_t APPS2, uint16_t Brake_Pedal,uint16_t Steering_Sensor,uint8_t *TxData, CAN_TxHeaderTypeDef TxHeader){
 80005f8:	b084      	sub	sp, #16
 80005fa:	b580      	push	{r7, lr}
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	f107 0c08 	add.w	ip, r7, #8
 8000602:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

		TxHeader.DLC = 8; 									//Number of bites to be transmitted max- 8. DLC: Data Length Code
 8000606:	2308      	movs	r3, #8
 8000608:	657b      	str	r3, [r7, #84]	@ 0x54
		TxHeader.IDE = 0;									//IDE: Identifier Extension. ID_STD: Standard Identifier. Dominant(0) = 11 bit ID, Recessive(1) = 29 bit ID
 800060a:	2300      	movs	r3, #0
 800060c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		TxHeader.RTR = 0;									//RTR: Remote Transmission Request, Dominant(0) = Data frame, Recessive (1) = Remote Frame. Type of trace
 800060e:	2300      	movs	r3, #0
 8000610:	653b      	str	r3, [r7, #80]	@ 0x50
		TxHeader.StdId = 0x90;								//Standard identifier ID
 8000612:	2390      	movs	r3, #144	@ 0x90
 8000614:	647b      	str	r3, [r7, #68]	@ 0x44
		TxHeader.TransmitGlobalTime = DISABLE;				//A temporal mark in the CAN message is not added
 8000616:	2300      	movs	r3, #0
 8000618:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
		TxData[0] = APPS1 >> 8;						//Sent data. The TxData is the buffer where the data is saved
 800061c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800061e:	0a1b      	lsrs	r3, r3, #8
 8000620:	b29b      	uxth	r3, r3
 8000622:	b2da      	uxtb	r2, r3
 8000624:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000626:	701a      	strb	r2, [r3, #0]
		TxData[1] = APPS1;
 8000628:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800062a:	3301      	adds	r3, #1
 800062c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800062e:	b2d2      	uxtb	r2, r2
 8000630:	701a      	strb	r2, [r3, #0]
		TxData[2] = APPS2 >> 8;
 8000632:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000634:	0a1b      	lsrs	r3, r3, #8
 8000636:	b29a      	uxth	r2, r3
 8000638:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800063a:	3302      	adds	r3, #2
 800063c:	b2d2      	uxtb	r2, r2
 800063e:	701a      	strb	r2, [r3, #0]
		TxData[3] = APPS2;
 8000640:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000642:	3303      	adds	r3, #3
 8000644:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8000646:	b2d2      	uxtb	r2, r2
 8000648:	701a      	strb	r2, [r3, #0]
		TxData[4] = Brake_Pedal >> 8;						//Sent data. The TxData is the buffer where the data is saved
 800064a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800064c:	0a1b      	lsrs	r3, r3, #8
 800064e:	b29a      	uxth	r2, r3
 8000650:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000652:	3304      	adds	r3, #4
 8000654:	b2d2      	uxtb	r2, r2
 8000656:	701a      	strb	r2, [r3, #0]
		TxData[5] = Brake_Pedal;
 8000658:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800065a:	3305      	adds	r3, #5
 800065c:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800065e:	b2d2      	uxtb	r2, r2
 8000660:	701a      	strb	r2, [r3, #0]
		TxData[6] = Steering_Sensor >> 8;
 8000662:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000664:	0a1b      	lsrs	r3, r3, #8
 8000666:	b29a      	uxth	r2, r3
 8000668:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800066a:	3306      	adds	r3, #6
 800066c:	b2d2      	uxtb	r2, r2
 800066e:	701a      	strb	r2, [r3, #0]
		TxData[7] = Steering_Sensor;
 8000670:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000672:	3307      	adds	r3, #7
 8000674:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8000676:	b2d2      	uxtb	r2, r2
 8000678:	701a      	strb	r2, [r3, #0]
		if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK);
 800067a:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800067e:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <message_cantx_FECU_Data1+0xa0>)
 8000680:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000682:	f107 0008 	add.w	r0, r7, #8
 8000686:	f001 fbfc 	bl	8001e82 <HAL_CAN_AddTxMessage>
						//Sent data. The TxData is the buffer where the data is saved

		}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000692:	b004      	add	sp, #16
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20000028 	.word	0x20000028

0800069c <message_cantx_FECU_Data2>:

	void message_cantx_FECU_Data2(CAN_HandleTypeDef hcan2,uint16_t Susp_F_R, uint16_t Susp_F_L, uint8_t SDC, uint8_t *TxData, CAN_TxHeaderTypeDef TxHeader){
 800069c:	b084      	sub	sp, #16
 800069e:	b580      	push	{r7, lr}
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	f107 0c08 	add.w	ip, r7, #8
 80006a6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

		TxHeader.DLC = 5; 									//Number of bites to be transmitted max- 8. DLC: Data Length Code
 80006aa:	2305      	movs	r3, #5
 80006ac:	653b      	str	r3, [r7, #80]	@ 0x50
		TxHeader.IDE = 0;									//IDE: Identifier Extension. ID_STD: Standard Identifier. Dominant(0) = 11 bit ID, Recessive(1) = 29 bit ID
 80006ae:	2300      	movs	r3, #0
 80006b0:	64bb      	str	r3, [r7, #72]	@ 0x48
		TxHeader.RTR = 0;									//RTR: Remote Transmission Request, Dominant(0) = Data frame, Recessive (1) = Remote Frame. Type of trace
 80006b2:	2300      	movs	r3, #0
 80006b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
		TxHeader.StdId = 0x91;								//Standard identifier ID
 80006b6:	2391      	movs	r3, #145	@ 0x91
 80006b8:	643b      	str	r3, [r7, #64]	@ 0x40
		TxHeader.TransmitGlobalTime = DISABLE;				//A temporal mark in the CAN message is not added
 80006ba:	2300      	movs	r3, #0
 80006bc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
		TxData[0] = Susp_F_R >> 8;						//Sent data. The TxData is the buffer where the data is saved
 80006c0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80006c2:	0a1b      	lsrs	r3, r3, #8
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006ca:	701a      	strb	r2, [r3, #0]
		TxData[1] = Susp_F_R;
 80006cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006ce:	3301      	adds	r3, #1
 80006d0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80006d2:	b2d2      	uxtb	r2, r2
 80006d4:	701a      	strb	r2, [r3, #0]
		TxData[2] = Susp_F_L >> 8;
 80006d6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80006d8:	0a1b      	lsrs	r3, r3, #8
 80006da:	b29a      	uxth	r2, r3
 80006dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006de:	3302      	adds	r3, #2
 80006e0:	b2d2      	uxtb	r2, r2
 80006e2:	701a      	strb	r2, [r3, #0]
		TxData[3] = Susp_F_L;
 80006e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006e6:	3303      	adds	r3, #3
 80006e8:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80006ea:	b2d2      	uxtb	r2, r2
 80006ec:	701a      	strb	r2, [r3, #0]
		TxData[4] = SDC;
 80006ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006f0:	3304      	adds	r3, #4
 80006f2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80006f6:	701a      	strb	r2, [r3, #0]
		if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK);
 80006f8:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80006fc:	4b05      	ldr	r3, [pc, #20]	@ (8000714 <message_cantx_FECU_Data2+0x78>)
 80006fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000700:	f107 0008 	add.w	r0, r7, #8
 8000704:	f001 fbbd 	bl	8001e82 <HAL_CAN_AddTxMessage>
						//Sent data. The TxData is the buffer where the data is saved

		}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000710:	b004      	add	sp, #16
 8000712:	4770      	bx	lr
 8000714:	20000028 	.word	0x20000028

08000718 <message_cantx_FECU_Keep_Alive>:
		if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK);
						//Sent data. The TxData is the buffer where the data is saved

		}

	void message_cantx_FECU_Keep_Alive(CAN_HandleTypeDef hcan, uint8_t Keep_Alive,uint8_t *TxData, CAN_TxHeaderTypeDef TxHeader){
 8000718:	b084      	sub	sp, #16
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
 800071e:	f107 0c08 	add.w	ip, r7, #8
 8000722:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

		TxHeader.DLC = 1; 									//Number of bites to be transmitted max- 8. DLC: Data Length Code
 8000726:	2301      	movs	r3, #1
 8000728:	64bb      	str	r3, [r7, #72]	@ 0x48
		TxHeader.IDE = 0;									//IDE: Identifier Extension. ID_STD: Standard Identifier. Dominant(0) = 11 bit ID, Recessive(1) = 29 bit ID
 800072a:	2300      	movs	r3, #0
 800072c:	643b      	str	r3, [r7, #64]	@ 0x40
		TxHeader.RTR = 0;									//RTR: Remote Transmission Request, Dominant(0) = Data frame, Recessive (1) = Remote Frame. Type of trace
 800072e:	2300      	movs	r3, #0
 8000730:	647b      	str	r3, [r7, #68]	@ 0x44
		TxHeader.StdId = 0xCA;								//Standard identifier ID
 8000732:	23ca      	movs	r3, #202	@ 0xca
 8000734:	63bb      	str	r3, [r7, #56]	@ 0x38
		TxHeader.TransmitGlobalTime = DISABLE;				//A temporal mark in the CAN message is not added
 8000736:	2300      	movs	r3, #0
 8000738:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
		TxData[0] = Keep_Alive;						//Sent data. The TxData is the buffer where the data is saved
 800073c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800073e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000742:	701a      	strb	r2, [r3, #0]
		if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK);
 8000744:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000748:	4b05      	ldr	r3, [pc, #20]	@ (8000760 <message_cantx_FECU_Keep_Alive+0x48>)
 800074a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800074c:	f107 0008 	add.w	r0, r7, #8
 8000750:	f001 fb97 	bl	8001e82 <HAL_CAN_AddTxMessage>
						//Sent data. The TxData is the buffer where the data is saved

		}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800075c:	b004      	add	sp, #16
 800075e:	4770      	bx	lr
 8000760:	20000028 	.word	0x20000028

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000766:	b091      	sub	sp, #68	@ 0x44
 8000768:	af10      	add	r7, sp, #64	@ 0x40
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800076a:	f000 fb9d 	bl	8000ea8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076e:	f000 fe0c 	bl	800138a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000772:	f000 f85d 	bl	8000830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000776:	f000 fa49 	bl	8000c0c <MX_GPIO_Init>
  MX_DMA_Init();
 800077a:	f000 fa29 	bl	8000bd0 <MX_DMA_Init>
  MX_ADC1_Init();
 800077e:	f000 f8c7 	bl	8000910 <MX_ADC1_Init>
  MX_TIM5_Init();
 8000782:	f000 f9d7 	bl	8000b34 <MX_TIM5_Init>
  MX_CAN1_Init();
 8000786:	f000 f969 	bl	8000a5c <MX_CAN1_Init>
  MX_CAN2_Init();
 800078a:	f000 f99d 	bl	8000ac8 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */

  CAN1_FILTER_INIT(&canfil);												//CAN 1 Filter
 800078e:	4821      	ldr	r0, [pc, #132]	@ (8000814 <main+0xb0>)
 8000790:	f7ff feca 	bl	8000528 <CAN1_FILTER_INIT>
  CAN2_FILTER_INIT(&canfil2);											//CAN 2 Filter
 8000794:	4820      	ldr	r0, [pc, #128]	@ (8000818 <main+0xb4>)
 8000796:	f7ff feef 	bl	8000578 <CAN2_FILTER_INIT>

  CAN1_CONFIG_INIT(canfil, hcan1);										//CAN 1 Configuration - Initialization
 800079a:	4e1e      	ldr	r6, [pc, #120]	@ (8000814 <main+0xb0>)
 800079c:	4b1f      	ldr	r3, [pc, #124]	@ (800081c <main+0xb8>)
 800079e:	ac06      	add	r4, sp, #24
 80007a0:	461d      	mov	r5, r3
 80007a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007ae:	e884 0003 	stmia.w	r4, {r0, r1}
 80007b2:	466d      	mov	r5, sp
 80007b4:	f106 0410 	add.w	r4, r6, #16
 80007b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80007c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80007c4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007c8:	f7ff fefe 	bl	80005c8 <CAN1_CONFIG_INIT>
  CAN2_CONFIG_INIT(canfil2, hcan2);
 80007cc:	4e12      	ldr	r6, [pc, #72]	@ (8000818 <main+0xb4>)
 80007ce:	4b14      	ldr	r3, [pc, #80]	@ (8000820 <main+0xbc>)
 80007d0:	ac06      	add	r4, sp, #24
 80007d2:	461d      	mov	r5, r3
 80007d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007e0:	e884 0003 	stmia.w	r4, {r0, r1}
 80007e4:	466d      	mov	r5, sp
 80007e6:	f106 0410 	add.w	r4, r6, #16
 80007ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80007f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80007f6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007fa:	f7ff fef1 	bl	80005e0 <CAN2_CONFIG_INIT>

  HAL_TIM_Base_Start(&htim5);
 80007fe:	4809      	ldr	r0, [pc, #36]	@ (8000824 <main+0xc0>)
 8000800:	f003 fa04 	bl	8003c0c <HAL_TIM_Base_Start>
  //HAL_TIM_Base_Start_IT(&htim14);
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*) adc_buffer, 7);
 8000804:	2207      	movs	r2, #7
 8000806:	4908      	ldr	r1, [pc, #32]	@ (8000828 <main+0xc4>)
 8000808:	4808      	ldr	r0, [pc, #32]	@ (800082c <main+0xc8>)
 800080a:	f000 fe5f 	bl	80014cc <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800080e:	bf00      	nop
 8000810:	e7fd      	b.n	800080e <main+0xaa>
 8000812:	bf00      	nop
 8000814:	200001c4 	.word	0x200001c4
 8000818:	200001ec 	.word	0x200001ec
 800081c:	200000d4 	.word	0x200000d4
 8000820:	200000fc 	.word	0x200000fc
 8000824:	20000124 	.word	0x20000124
 8000828:	20000174 	.word	0x20000174
 800082c:	2000002c 	.word	0x2000002c

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b094      	sub	sp, #80	@ 0x50
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2234      	movs	r2, #52	@ 0x34
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f003 fcf2 	bl	8004228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000854:	4b2c      	ldr	r3, [pc, #176]	@ (8000908 <SystemClock_Config+0xd8>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000858:	4a2b      	ldr	r2, [pc, #172]	@ (8000908 <SystemClock_Config+0xd8>)
 800085a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800085e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000860:	4b29      	ldr	r3, [pc, #164]	@ (8000908 <SystemClock_Config+0xd8>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000864:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800086c:	4b27      	ldr	r3, [pc, #156]	@ (800090c <SystemClock_Config+0xdc>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000874:	4a25      	ldr	r2, [pc, #148]	@ (800090c <SystemClock_Config+0xdc>)
 8000876:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800087a:	6013      	str	r3, [r2, #0]
 800087c:	4b23      	ldr	r3, [pc, #140]	@ (800090c <SystemClock_Config+0xdc>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000888:	2302      	movs	r3, #2
 800088a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800088c:	2301      	movs	r3, #1
 800088e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000890:	2310      	movs	r3, #16
 8000892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000894:	2302      	movs	r3, #2
 8000896:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000898:	2300      	movs	r3, #0
 800089a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800089c:	2308      	movs	r3, #8
 800089e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 108;
 80008a0:	236c      	movs	r3, #108	@ 0x6c
 80008a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4618      	mov	r0, r3
 80008b6:	f002 fcf1 	bl	800329c <HAL_RCC_OscConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008c0:	f000 fb1e 	bl	8000f00 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008c4:	f002 fc9a 	bl	80031fc <HAL_PWREx_EnableOverDrive>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80008ce:	f000 fb17 	bl	8000f00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d2:	230f      	movs	r3, #15
 80008d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d6:	2302      	movs	r3, #2
 80008d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	2103      	movs	r1, #3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 ff82 	bl	80037f8 <HAL_RCC_ClockConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0xce>
  {
    Error_Handler();
 80008fa:	f000 fb01 	bl	8000f00 <Error_Handler>
  }
}
 80008fe:	bf00      	nop
 8000900:	3750      	adds	r7, #80	@ 0x50
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800
 800090c:	40007000 	.word	0x40007000

08000910 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000916:	463b      	mov	r3, r7
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000922:	4b4c      	ldr	r3, [pc, #304]	@ (8000a54 <MX_ADC1_Init+0x144>)
 8000924:	4a4c      	ldr	r2, [pc, #304]	@ (8000a58 <MX_ADC1_Init+0x148>)
 8000926:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000928:	4b4a      	ldr	r3, [pc, #296]	@ (8000a54 <MX_ADC1_Init+0x144>)
 800092a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800092e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000930:	4b48      	ldr	r3, [pc, #288]	@ (8000a54 <MX_ADC1_Init+0x144>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000936:	4b47      	ldr	r3, [pc, #284]	@ (8000a54 <MX_ADC1_Init+0x144>)
 8000938:	2201      	movs	r2, #1
 800093a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800093c:	4b45      	ldr	r3, [pc, #276]	@ (8000a54 <MX_ADC1_Init+0x144>)
 800093e:	2201      	movs	r2, #1
 8000940:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000942:	4b44      	ldr	r3, [pc, #272]	@ (8000a54 <MX_ADC1_Init+0x144>)
 8000944:	2200      	movs	r2, #0
 8000946:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800094a:	4b42      	ldr	r3, [pc, #264]	@ (8000a54 <MX_ADC1_Init+0x144>)
 800094c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000950:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T5_TRGO;
 8000952:	4b40      	ldr	r3, [pc, #256]	@ (8000a54 <MX_ADC1_Init+0x144>)
 8000954:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000958:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800095a:	4b3e      	ldr	r3, [pc, #248]	@ (8000a54 <MX_ADC1_Init+0x144>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8000960:	4b3c      	ldr	r3, [pc, #240]	@ (8000a54 <MX_ADC1_Init+0x144>)
 8000962:	2207      	movs	r2, #7
 8000964:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000966:	4b3b      	ldr	r3, [pc, #236]	@ (8000a54 <MX_ADC1_Init+0x144>)
 8000968:	2201      	movs	r2, #1
 800096a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800096e:	4b39      	ldr	r3, [pc, #228]	@ (8000a54 <MX_ADC1_Init+0x144>)
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000974:	4837      	ldr	r0, [pc, #220]	@ (8000a54 <MX_ADC1_Init+0x144>)
 8000976:	f000 fd65 	bl	8001444 <HAL_ADC_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000980:	f000 fabe 	bl	8000f00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000984:	2300      	movs	r3, #0
 8000986:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000988:	2301      	movs	r3, #1
 800098a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800098c:	2303      	movs	r3, #3
 800098e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000990:	463b      	mov	r3, r7
 8000992:	4619      	mov	r1, r3
 8000994:	482f      	ldr	r0, [pc, #188]	@ (8000a54 <MX_ADC1_Init+0x144>)
 8000996:	f000 fea7 	bl	80016e8 <HAL_ADC_ConfigChannel>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80009a0:	f000 faae 	bl	8000f00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009a4:	2301      	movs	r3, #1
 80009a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ac:	463b      	mov	r3, r7
 80009ae:	4619      	mov	r1, r3
 80009b0:	4828      	ldr	r0, [pc, #160]	@ (8000a54 <MX_ADC1_Init+0x144>)
 80009b2:	f000 fe99 	bl	80016e8 <HAL_ADC_ConfigChannel>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80009bc:	f000 faa0 	bl	8000f00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80009c4:	2303      	movs	r3, #3
 80009c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c8:	463b      	mov	r3, r7
 80009ca:	4619      	mov	r1, r3
 80009cc:	4821      	ldr	r0, [pc, #132]	@ (8000a54 <MX_ADC1_Init+0x144>)
 80009ce:	f000 fe8b 	bl	80016e8 <HAL_ADC_ConfigChannel>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80009d8:	f000 fa92 	bl	8000f00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009dc:	2309      	movs	r3, #9
 80009de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80009e0:	2304      	movs	r3, #4
 80009e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e4:	463b      	mov	r3, r7
 80009e6:	4619      	mov	r1, r3
 80009e8:	481a      	ldr	r0, [pc, #104]	@ (8000a54 <MX_ADC1_Init+0x144>)
 80009ea:	f000 fe7d 	bl	80016e8 <HAL_ADC_ConfigChannel>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80009f4:	f000 fa84 	bl	8000f00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80009f8:	230b      	movs	r3, #11
 80009fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80009fc:	2305      	movs	r3, #5
 80009fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a00:	463b      	mov	r3, r7
 8000a02:	4619      	mov	r1, r3
 8000a04:	4813      	ldr	r0, [pc, #76]	@ (8000a54 <MX_ADC1_Init+0x144>)
 8000a06:	f000 fe6f 	bl	80016e8 <HAL_ADC_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8000a10:	f000 fa76 	bl	8000f00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000a14:	230c      	movs	r3, #12
 8000a16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000a18:	2306      	movs	r3, #6
 8000a1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480c      	ldr	r0, [pc, #48]	@ (8000a54 <MX_ADC1_Init+0x144>)
 8000a22:	f000 fe61 	bl	80016e8 <HAL_ADC_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8000a2c:	f000 fa68 	bl	8000f00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000a30:	230d      	movs	r3, #13
 8000a32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000a34:	2307      	movs	r3, #7
 8000a36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a38:	463b      	mov	r3, r7
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	@ (8000a54 <MX_ADC1_Init+0x144>)
 8000a3e:	f000 fe53 	bl	80016e8 <HAL_ADC_ConfigChannel>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8000a48:	f000 fa5a 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	2000002c 	.word	0x2000002c
 8000a58:	40012000 	.word	0x40012000

08000a5c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a60:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <MX_CAN1_Init+0x64>)
 8000a62:	4a18      	ldr	r2, [pc, #96]	@ (8000ac4 <MX_CAN1_Init+0x68>)
 8000a64:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000a66:	4b16      	ldr	r3, [pc, #88]	@ (8000ac0 <MX_CAN1_Init+0x64>)
 8000a68:	220c      	movs	r2, #12
 8000a6a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	@ (8000ac0 <MX_CAN1_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a72:	4b13      	ldr	r3, [pc, #76]	@ (8000ac0 <MX_CAN1_Init+0x64>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000a78:	4b11      	ldr	r3, [pc, #68]	@ (8000ac0 <MX_CAN1_Init+0x64>)
 8000a7a:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8000a7e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <MX_CAN1_Init+0x64>)
 8000a82:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000a86:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a88:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac0 <MX_CAN1_Init+0x64>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <MX_CAN1_Init+0x64>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <MX_CAN1_Init+0x64>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ac0 <MX_CAN1_Init+0x64>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000aa0:	4b07      	ldr	r3, [pc, #28]	@ (8000ac0 <MX_CAN1_Init+0x64>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000aa6:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <MX_CAN1_Init+0x64>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000aac:	4804      	ldr	r0, [pc, #16]	@ (8000ac0 <MX_CAN1_Init+0x64>)
 8000aae:	f001 f8ed 	bl	8001c8c <HAL_CAN_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000ab8:	f000 fa22 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200000d4 	.word	0x200000d4
 8000ac4:	40006400 	.word	0x40006400

08000ac8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000acc:	4b17      	ldr	r3, [pc, #92]	@ (8000b2c <MX_CAN2_Init+0x64>)
 8000ace:	4a18      	ldr	r2, [pc, #96]	@ (8000b30 <MX_CAN2_Init+0x68>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 12;
 8000ad2:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <MX_CAN2_Init+0x64>)
 8000ad4:	220c      	movs	r2, #12
 8000ad6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	@ (8000b2c <MX_CAN2_Init+0x64>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ade:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <MX_CAN2_Init+0x64>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <MX_CAN2_Init+0x64>)
 8000ae6:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8000aea:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <MX_CAN2_Init+0x64>)
 8000aee:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000af2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000af4:	4b0d      	ldr	r3, [pc, #52]	@ (8000b2c <MX_CAN2_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000afa:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <MX_CAN2_Init+0x64>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <MX_CAN2_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000b06:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <MX_CAN2_Init+0x64>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <MX_CAN2_Init+0x64>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000b12:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <MX_CAN2_Init+0x64>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000b18:	4804      	ldr	r0, [pc, #16]	@ (8000b2c <MX_CAN2_Init+0x64>)
 8000b1a:	f001 f8b7 	bl	8001c8c <HAL_CAN_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000b24:	f000 f9ec 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200000fc 	.word	0x200000fc
 8000b30:	40006800 	.word	0x40006800

08000b34 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b52:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc8 <MX_TIM5_Init+0x94>)
 8000b54:	4a1d      	ldr	r2, [pc, #116]	@ (8000bcc <MX_TIM5_Init+0x98>)
 8000b56:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 108;
 8000b58:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc8 <MX_TIM5_Init+0x94>)
 8000b5a:	226c      	movs	r2, #108	@ 0x6c
 8000b5c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc8 <MX_TIM5_Init+0x94>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 25000;
 8000b64:	4b18      	ldr	r3, [pc, #96]	@ (8000bc8 <MX_TIM5_Init+0x94>)
 8000b66:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8000b6a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6c:	4b16      	ldr	r3, [pc, #88]	@ (8000bc8 <MX_TIM5_Init+0x94>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b72:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <MX_TIM5_Init+0x94>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000b78:	4813      	ldr	r0, [pc, #76]	@ (8000bc8 <MX_TIM5_Init+0x94>)
 8000b7a:	f002 ffef 	bl	8003b5c <HAL_TIM_Base_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000b84:	f000 f9bc 	bl	8000f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000b8e:	f107 0310 	add.w	r3, r7, #16
 8000b92:	4619      	mov	r1, r3
 8000b94:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <MX_TIM5_Init+0x94>)
 8000b96:	f003 f8a9 	bl	8003cec <HAL_TIM_ConfigClockSource>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000ba0:	f000 f9ae 	bl	8000f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ba4:	2320      	movs	r3, #32
 8000ba6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <MX_TIM5_Init+0x94>)
 8000bb2:	f003 faab 	bl	800410c <HAL_TIMEx_MasterConfigSynchronization>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000bbc:	f000 f9a0 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	3720      	adds	r7, #32
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000124 	.word	0x20000124
 8000bcc:	40000c00 	.word	0x40000c00

08000bd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <MX_DMA_Init+0x38>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	4a0b      	ldr	r2, [pc, #44]	@ (8000c08 <MX_DMA_Init+0x38>)
 8000bdc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be2:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <MX_DMA_Init+0x38>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2038      	movs	r0, #56	@ 0x38
 8000bf4:	f001 fd15 	bl	8002622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bf8:	2038      	movs	r0, #56	@ 0x38
 8000bfa:	f001 fd2e 	bl	800265a <HAL_NVIC_EnableIRQ>

}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40023800 	.word	0x40023800

08000c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	@ 0x28
 8000c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c22:	4b30      	ldr	r3, [pc, #192]	@ (8000ce4 <MX_GPIO_Init+0xd8>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	4a2f      	ldr	r2, [pc, #188]	@ (8000ce4 <MX_GPIO_Init+0xd8>)
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ce4 <MX_GPIO_Init+0xd8>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	f003 0304 	and.w	r3, r3, #4
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce4 <MX_GPIO_Init+0xd8>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a29      	ldr	r2, [pc, #164]	@ (8000ce4 <MX_GPIO_Init+0xd8>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b27      	ldr	r3, [pc, #156]	@ (8000ce4 <MX_GPIO_Init+0xd8>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	4b24      	ldr	r3, [pc, #144]	@ (8000ce4 <MX_GPIO_Init+0xd8>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a23      	ldr	r2, [pc, #140]	@ (8000ce4 <MX_GPIO_Init+0xd8>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ce4 <MX_GPIO_Init+0xd8>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce4 <MX_GPIO_Init+0xd8>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ce4 <MX_GPIO_Init+0xd8>)
 8000c70:	f043 0310 	orr.w	r3, r3, #16
 8000c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c76:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce4 <MX_GPIO_Init+0xd8>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	f003 0310 	and.w	r3, r3, #16
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c82:	4b18      	ldr	r3, [pc, #96]	@ (8000ce4 <MX_GPIO_Init+0xd8>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a17      	ldr	r2, [pc, #92]	@ (8000ce4 <MX_GPIO_Init+0xd8>)
 8000c88:	f043 0308 	orr.w	r3, r3, #8
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <MX_GPIO_Init+0xd8>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0308 	and.w	r3, r3, #8
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2118      	movs	r1, #24
 8000c9e:	4812      	ldr	r0, [pc, #72]	@ (8000ce8 <MX_GPIO_Init+0xdc>)
 8000ca0:	f002 fa92 	bl	80031c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000ca4:	2318      	movs	r3, #24
 8000ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480b      	ldr	r0, [pc, #44]	@ (8000ce8 <MX_GPIO_Init+0xdc>)
 8000cbc:	f002 f8d8 	bl	8002e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : Setas_Pin BOTS_Pin Inertia_Pin */
  GPIO_InitStruct.Pin = Setas_Pin|BOTS_Pin|Inertia_Pin;
 8000cc0:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	@ (8000cec <MX_GPIO_Init+0xe0>)
 8000cd6:	f002 f8cb 	bl	8002e70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	@ 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020000 	.word	0x40020000
 8000cec:	40021000 	.word	0x40021000

08000cf0 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 {
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	/*
   if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){ //missatge rebut per CAN1
   }
   */
 }
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
 {
 8000d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d06:	b099      	sub	sp, #100	@ 0x64
 8000d08:	af12      	add	r7, sp, #72	@ 0x48
 8000d0a:	6178      	str	r0, [r7, #20]
	/*
   if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK){ //missatge rebut per CAN2
   }
   */
	   if(RxHeader.StdId == ETAS_SYNC){
 8000d0c:	4b3e      	ldr	r3, [pc, #248]	@ (8000e08 <HAL_CAN_RxFifo1MsgPendingCallback+0x104>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b80      	cmp	r3, #128	@ 0x80
 8000d12:	d175      	bne.n	8000e00 <HAL_CAN_RxFifo1MsgPendingCallback+0xfc>
		   message_cantx_FECU_Keep_Alive(hcan2, KA, TxData, TxHeader);
 8000d14:	4b3d      	ldr	r3, [pc, #244]	@ (8000e0c <HAL_CAN_RxFifo1MsgPendingCallback+0x108>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4e3d      	ldr	r6, [pc, #244]	@ (8000e10 <HAL_CAN_RxFifo1MsgPendingCallback+0x10c>)
 8000d1c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e14 <HAL_CAN_RxFifo1MsgPendingCallback+0x110>)
 8000d1e:	ac08      	add	r4, sp, #32
 8000d20:	461d      	mov	r5, r3
 8000d22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d26:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d2a:	e884 0003 	stmia.w	r4, {r0, r1}
 8000d2e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e18 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8000d30:	9307      	str	r3, [sp, #28]
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	9306      	str	r3, [sp, #24]
 8000d36:	466d      	mov	r5, sp
 8000d38:	f106 0410 	add.w	r4, r6, #16
 8000d3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d44:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d48:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000d4c:	f7ff fce4 	bl	8000718 <message_cantx_FECU_Keep_Alive>
		   KA++;
 8000d50:	4b2e      	ldr	r3, [pc, #184]	@ (8000e0c <HAL_CAN_RxFifo1MsgPendingCallback+0x108>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	3301      	adds	r3, #1
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	4b2c      	ldr	r3, [pc, #176]	@ (8000e0c <HAL_CAN_RxFifo1MsgPendingCallback+0x108>)
 8000d5a:	701a      	strb	r2, [r3, #0]
		   SDC_Setas=HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
		   SDC_Bots=HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8);
		   SDC_Intertia=HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9);
		   SDC=SDC_Setas<<2 | SDC_Intertia<<1 | SDC_Bots;
		   */
		   message_cantx_FECU_Data1(hcan2, APPS1, APPS2, BrakePedal, SteeringSensor,TxData, TxHeader);
 8000d5c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e1c <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b2f      	ldr	r3, [pc, #188]	@ (8000e20 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8000d64:	881a      	ldrh	r2, [r3, #0]
 8000d66:	60fa      	str	r2, [r7, #12]
 8000d68:	4b2e      	ldr	r3, [pc, #184]	@ (8000e24 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8000d6a:	8819      	ldrh	r1, [r3, #0]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e28 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 8000d70:	8818      	ldrh	r0, [r3, #0]
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	4e26      	ldr	r6, [pc, #152]	@ (8000e10 <HAL_CAN_RxFifo1MsgPendingCallback+0x10c>)
 8000d76:	4b27      	ldr	r3, [pc, #156]	@ (8000e14 <HAL_CAN_RxFifo1MsgPendingCallback+0x110>)
 8000d78:	ac0b      	add	r4, sp, #44	@ 0x2c
 8000d7a:	461d      	mov	r5, r3
 8000d7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d80:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d84:	e884 0003 	stmia.w	r4, {r0, r1}
 8000d88:	4b23      	ldr	r3, [pc, #140]	@ (8000e18 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8000d8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	9009      	str	r0, [sp, #36]	@ 0x24
 8000d90:	68b9      	ldr	r1, [r7, #8]
 8000d92:	9108      	str	r1, [sp, #32]
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	9207      	str	r2, [sp, #28]
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	9306      	str	r3, [sp, #24]
 8000d9c:	466d      	mov	r5, sp
 8000d9e:	f106 0410 	add.w	r4, r6, #16
 8000da2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000da4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000da6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000daa:	e885 0003 	stmia.w	r5, {r0, r1}
 8000dae:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000db2:	f7ff fc21 	bl	80005f8 <message_cantx_FECU_Data1>
		   message_cantx_FECU_Data2(hcan2, Suspe_F_R, Suspe_F_L, 7, TxData, TxHeader);
 8000db6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e2c <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000dbe:	881a      	ldrh	r2, [r3, #0]
 8000dc0:	60fa      	str	r2, [r7, #12]
 8000dc2:	4e13      	ldr	r6, [pc, #76]	@ (8000e10 <HAL_CAN_RxFifo1MsgPendingCallback+0x10c>)
 8000dc4:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <HAL_CAN_RxFifo1MsgPendingCallback+0x110>)
 8000dc6:	ac0a      	add	r4, sp, #40	@ 0x28
 8000dc8:	461d      	mov	r5, r3
 8000dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dce:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dd2:	e884 0003 	stmia.w	r4, {r0, r1}
 8000dd6:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8000dd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8000dda:	2307      	movs	r3, #7
 8000ddc:	9308      	str	r3, [sp, #32]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	9207      	str	r2, [sp, #28]
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	9306      	str	r3, [sp, #24]
 8000de6:	466d      	mov	r5, sp
 8000de8:	f106 0410 	add.w	r4, r6, #16
 8000dec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000df0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000df4:	e885 0003 	stmia.w	r5, {r0, r1}
 8000df8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000dfc:	f7ff fc4e 	bl	800069c <message_cantx_FECU_Data2>
	      }
   }
 8000e00:	bf00      	nop
 8000e02:	371c      	adds	r7, #28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e08:	20000190 	.word	0x20000190
 8000e0c:	20000170 	.word	0x20000170
 8000e10:	200000fc 	.word	0x200000fc
 8000e14:	200001ac 	.word	0x200001ac
 8000e18:	20000214 	.word	0x20000214
 8000e1c:	20000182 	.word	0x20000182
 8000e20:	20000184 	.word	0x20000184
 8000e24:	20000186 	.word	0x20000186
 8000e28:	20000188 	.word	0x20000188
 8000e2c:	2000018a 	.word	0x2000018a
 8000e30:	2000018c 	.word	0x2000018c

08000e34 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	   APPS1 = adc_buffer[0];
 8000e3c:	4b13      	ldr	r3, [pc, #76]	@ (8000e8c <HAL_ADC_ConvCpltCallback+0x58>)
 8000e3e:	881a      	ldrh	r2, [r3, #0]
 8000e40:	4b13      	ldr	r3, [pc, #76]	@ (8000e90 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000e42:	801a      	strh	r2, [r3, #0]
	   APPS2 = (4095-adc_buffer[1])/2;
 8000e44:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <HAL_ADC_ConvCpltCallback+0x58>)
 8000e46:	885b      	ldrh	r3, [r3, #2]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000e4e:	1a9b      	subs	r3, r3, r2
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	da00      	bge.n	8000e56 <HAL_ADC_ConvCpltCallback+0x22>
 8000e54:	3301      	adds	r3, #1
 8000e56:	105b      	asrs	r3, r3, #1
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <HAL_ADC_ConvCpltCallback+0x60>)
 8000e5c:	801a      	strh	r2, [r3, #0]
	   BrakePedal = adc_buffer[2];
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <HAL_ADC_ConvCpltCallback+0x58>)
 8000e60:	889a      	ldrh	r2, [r3, #4]
 8000e62:	4b0d      	ldr	r3, [pc, #52]	@ (8000e98 <HAL_ADC_ConvCpltCallback+0x64>)
 8000e64:	801a      	strh	r2, [r3, #0]
	   //PitotSensor = adc_buffer[3];
	   SteeringSensor = adc_buffer[4];
 8000e66:	4b09      	ldr	r3, [pc, #36]	@ (8000e8c <HAL_ADC_ConvCpltCallback+0x58>)
 8000e68:	891a      	ldrh	r2, [r3, #8]
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e9c <HAL_ADC_ConvCpltCallback+0x68>)
 8000e6c:	801a      	strh	r2, [r3, #0]
	   Suspe_F_R = adc_buffer[5];
 8000e6e:	4b07      	ldr	r3, [pc, #28]	@ (8000e8c <HAL_ADC_ConvCpltCallback+0x58>)
 8000e70:	895a      	ldrh	r2, [r3, #10]
 8000e72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000e74:	801a      	strh	r2, [r3, #0]
	   Suspe_F_L = adc_buffer[6];
 8000e76:	4b05      	ldr	r3, [pc, #20]	@ (8000e8c <HAL_ADC_ConvCpltCallback+0x58>)
 8000e78:	899a      	ldrh	r2, [r3, #12]
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <HAL_ADC_ConvCpltCallback+0x70>)
 8000e7c:	801a      	strh	r2, [r3, #0]
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000174 	.word	0x20000174
 8000e90:	20000182 	.word	0x20000182
 8000e94:	20000184 	.word	0x20000184
 8000e98:	20000186 	.word	0x20000186
 8000e9c:	20000188 	.word	0x20000188
 8000ea0:	2000018a 	.word	0x2000018a
 8000ea4:	2000018c 	.word	0x2000018c

08000ea8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000eba:	f001 fbe9 	bl	8002690 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000eca:	231f      	movs	r3, #31
 8000ecc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ece:	2387      	movs	r3, #135	@ 0x87
 8000ed0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000eda:	2301      	movs	r3, #1
 8000edc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eea:	463b      	mov	r3, r7
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 fc07 	bl	8002700 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ef2:	2004      	movs	r0, #4
 8000ef4:	f001 fbe4 	bl	80026c0 <HAL_MPU_Enable>

}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f04:	b672      	cpsid	i
}
 8000f06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <Error_Handler+0x8>

08000f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f12:	4b0f      	ldr	r3, [pc, #60]	@ (8000f50 <HAL_MspInit+0x44>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f16:	4a0e      	ldr	r2, [pc, #56]	@ (8000f50 <HAL_MspInit+0x44>)
 8000f18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <HAL_MspInit+0x44>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2a:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <HAL_MspInit+0x44>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2e:	4a08      	ldr	r2, [pc, #32]	@ (8000f50 <HAL_MspInit+0x44>)
 8000f30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f36:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <HAL_MspInit+0x44>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800

08000f54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08c      	sub	sp, #48	@ 0x30
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a45      	ldr	r2, [pc, #276]	@ (8001088 <HAL_ADC_MspInit+0x134>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	f040 8084 	bne.w	8001080 <HAL_ADC_MspInit+0x12c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f78:	4b44      	ldr	r3, [pc, #272]	@ (800108c <HAL_ADC_MspInit+0x138>)
 8000f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7c:	4a43      	ldr	r2, [pc, #268]	@ (800108c <HAL_ADC_MspInit+0x138>)
 8000f7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f82:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f84:	4b41      	ldr	r3, [pc, #260]	@ (800108c <HAL_ADC_MspInit+0x138>)
 8000f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f8c:	61bb      	str	r3, [r7, #24]
 8000f8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f90:	4b3e      	ldr	r3, [pc, #248]	@ (800108c <HAL_ADC_MspInit+0x138>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f94:	4a3d      	ldr	r2, [pc, #244]	@ (800108c <HAL_ADC_MspInit+0x138>)
 8000f96:	f043 0304 	orr.w	r3, r3, #4
 8000f9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9c:	4b3b      	ldr	r3, [pc, #236]	@ (800108c <HAL_ADC_MspInit+0x138>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa0:	f003 0304 	and.w	r3, r3, #4
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa8:	4b38      	ldr	r3, [pc, #224]	@ (800108c <HAL_ADC_MspInit+0x138>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fac:	4a37      	ldr	r2, [pc, #220]	@ (800108c <HAL_ADC_MspInit+0x138>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb4:	4b35      	ldr	r3, [pc, #212]	@ (800108c <HAL_ADC_MspInit+0x138>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc0:	4b32      	ldr	r3, [pc, #200]	@ (800108c <HAL_ADC_MspInit+0x138>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc4:	4a31      	ldr	r2, [pc, #196]	@ (800108c <HAL_ADC_MspInit+0x138>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fcc:	4b2f      	ldr	r3, [pc, #188]	@ (800108c <HAL_ADC_MspInit+0x138>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000fd8:	230e      	movs	r3, #14
 8000fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4829      	ldr	r0, [pc, #164]	@ (8001090 <HAL_ADC_MspInit+0x13c>)
 8000fec:	f001 ff40 	bl	8002e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000ff0:	2307      	movs	r3, #7
 8000ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	4824      	ldr	r0, [pc, #144]	@ (8001094 <HAL_ADC_MspInit+0x140>)
 8001004:	f001 ff34 	bl	8002e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001008:	2302      	movs	r3, #2
 800100a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100c:	2303      	movs	r3, #3
 800100e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	4619      	mov	r1, r3
 800101a:	481f      	ldr	r0, [pc, #124]	@ (8001098 <HAL_ADC_MspInit+0x144>)
 800101c:	f001 ff28 	bl	8002e70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001020:	4b1e      	ldr	r3, [pc, #120]	@ (800109c <HAL_ADC_MspInit+0x148>)
 8001022:	4a1f      	ldr	r2, [pc, #124]	@ (80010a0 <HAL_ADC_MspInit+0x14c>)
 8001024:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001026:	4b1d      	ldr	r3, [pc, #116]	@ (800109c <HAL_ADC_MspInit+0x148>)
 8001028:	2200      	movs	r2, #0
 800102a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800102c:	4b1b      	ldr	r3, [pc, #108]	@ (800109c <HAL_ADC_MspInit+0x148>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001032:	4b1a      	ldr	r3, [pc, #104]	@ (800109c <HAL_ADC_MspInit+0x148>)
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001038:	4b18      	ldr	r3, [pc, #96]	@ (800109c <HAL_ADC_MspInit+0x148>)
 800103a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800103e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001040:	4b16      	ldr	r3, [pc, #88]	@ (800109c <HAL_ADC_MspInit+0x148>)
 8001042:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001046:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001048:	4b14      	ldr	r3, [pc, #80]	@ (800109c <HAL_ADC_MspInit+0x148>)
 800104a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800104e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001050:	4b12      	ldr	r3, [pc, #72]	@ (800109c <HAL_ADC_MspInit+0x148>)
 8001052:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001056:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001058:	4b10      	ldr	r3, [pc, #64]	@ (800109c <HAL_ADC_MspInit+0x148>)
 800105a:	2200      	movs	r2, #0
 800105c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800105e:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <HAL_ADC_MspInit+0x148>)
 8001060:	2200      	movs	r2, #0
 8001062:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001064:	480d      	ldr	r0, [pc, #52]	@ (800109c <HAL_ADC_MspInit+0x148>)
 8001066:	f001 fb8b 	bl	8002780 <HAL_DMA_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 8001070:	f7ff ff46 	bl	8000f00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a09      	ldr	r2, [pc, #36]	@ (800109c <HAL_ADC_MspInit+0x148>)
 8001078:	639a      	str	r2, [r3, #56]	@ 0x38
 800107a:	4a08      	ldr	r2, [pc, #32]	@ (800109c <HAL_ADC_MspInit+0x148>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001080:	bf00      	nop
 8001082:	3730      	adds	r7, #48	@ 0x30
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40012000 	.word	0x40012000
 800108c:	40023800 	.word	0x40023800
 8001090:	40020800 	.word	0x40020800
 8001094:	40020000 	.word	0x40020000
 8001098:	40020400 	.word	0x40020400
 800109c:	20000074 	.word	0x20000074
 80010a0:	40026410 	.word	0x40026410

080010a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08c      	sub	sp, #48	@ 0x30
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a4d      	ldr	r2, [pc, #308]	@ (80011f8 <HAL_CAN_MspInit+0x154>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d141      	bne.n	800114a <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80010c6:	4b4d      	ldr	r3, [pc, #308]	@ (80011fc <HAL_CAN_MspInit+0x158>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	3301      	adds	r3, #1
 80010cc:	4a4b      	ldr	r2, [pc, #300]	@ (80011fc <HAL_CAN_MspInit+0x158>)
 80010ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80010d0:	4b4a      	ldr	r3, [pc, #296]	@ (80011fc <HAL_CAN_MspInit+0x158>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d10b      	bne.n	80010f0 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80010d8:	4b49      	ldr	r3, [pc, #292]	@ (8001200 <HAL_CAN_MspInit+0x15c>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010dc:	4a48      	ldr	r2, [pc, #288]	@ (8001200 <HAL_CAN_MspInit+0x15c>)
 80010de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e4:	4b46      	ldr	r3, [pc, #280]	@ (8001200 <HAL_CAN_MspInit+0x15c>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010ec:	61bb      	str	r3, [r7, #24]
 80010ee:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f0:	4b43      	ldr	r3, [pc, #268]	@ (8001200 <HAL_CAN_MspInit+0x15c>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f4:	4a42      	ldr	r2, [pc, #264]	@ (8001200 <HAL_CAN_MspInit+0x15c>)
 80010f6:	f043 0308 	orr.w	r3, r3, #8
 80010fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fc:	4b40      	ldr	r3, [pc, #256]	@ (8001200 <HAL_CAN_MspInit+0x15c>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001100:	f003 0308 	and.w	r3, r3, #8
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001108:	2303      	movs	r3, #3
 800110a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001114:	2303      	movs	r3, #3
 8001116:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001118:	2309      	movs	r3, #9
 800111a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	4619      	mov	r1, r3
 8001122:	4838      	ldr	r0, [pc, #224]	@ (8001204 <HAL_CAN_MspInit+0x160>)
 8001124:	f001 fea4 	bl	8002e70 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8001128:	2200      	movs	r2, #0
 800112a:	2101      	movs	r1, #1
 800112c:	2014      	movs	r0, #20
 800112e:	f001 fa78 	bl	8002622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001132:	2014      	movs	r0, #20
 8001134:	f001 fa91 	bl	800265a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2101      	movs	r1, #1
 800113c:	2015      	movs	r0, #21
 800113e:	f001 fa70 	bl	8002622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001142:	2015      	movs	r0, #21
 8001144:	f001 fa89 	bl	800265a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001148:	e052      	b.n	80011f0 <HAL_CAN_MspInit+0x14c>
  else if(hcan->Instance==CAN2)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a2e      	ldr	r2, [pc, #184]	@ (8001208 <HAL_CAN_MspInit+0x164>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d14d      	bne.n	80011f0 <HAL_CAN_MspInit+0x14c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001154:	4b2a      	ldr	r3, [pc, #168]	@ (8001200 <HAL_CAN_MspInit+0x15c>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001158:	4a29      	ldr	r2, [pc, #164]	@ (8001200 <HAL_CAN_MspInit+0x15c>)
 800115a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800115e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001160:	4b27      	ldr	r3, [pc, #156]	@ (8001200 <HAL_CAN_MspInit+0x15c>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001164:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800116c:	4b23      	ldr	r3, [pc, #140]	@ (80011fc <HAL_CAN_MspInit+0x158>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	3301      	adds	r3, #1
 8001172:	4a22      	ldr	r2, [pc, #136]	@ (80011fc <HAL_CAN_MspInit+0x158>)
 8001174:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001176:	4b21      	ldr	r3, [pc, #132]	@ (80011fc <HAL_CAN_MspInit+0x158>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d10b      	bne.n	8001196 <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800117e:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <HAL_CAN_MspInit+0x15c>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	4a1f      	ldr	r2, [pc, #124]	@ (8001200 <HAL_CAN_MspInit+0x15c>)
 8001184:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001188:	6413      	str	r3, [r2, #64]	@ 0x40
 800118a:	4b1d      	ldr	r3, [pc, #116]	@ (8001200 <HAL_CAN_MspInit+0x15c>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <HAL_CAN_MspInit+0x15c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	4a19      	ldr	r2, [pc, #100]	@ (8001200 <HAL_CAN_MspInit+0x15c>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a2:	4b17      	ldr	r3, [pc, #92]	@ (8001200 <HAL_CAN_MspInit+0x15c>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80011ae:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80011b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80011c0:	2309      	movs	r3, #9
 80011c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	4619      	mov	r1, r3
 80011ca:	4810      	ldr	r0, [pc, #64]	@ (800120c <HAL_CAN_MspInit+0x168>)
 80011cc:	f001 fe50 	bl	8002e70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 1, 0);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2101      	movs	r1, #1
 80011d4:	2040      	movs	r0, #64	@ 0x40
 80011d6:	f001 fa24 	bl	8002622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80011da:	2040      	movs	r0, #64	@ 0x40
 80011dc:	f001 fa3d 	bl	800265a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 1, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2101      	movs	r1, #1
 80011e4:	2041      	movs	r0, #65	@ 0x41
 80011e6:	f001 fa1c 	bl	8002622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80011ea:	2041      	movs	r0, #65	@ 0x41
 80011ec:	f001 fa35 	bl	800265a <HAL_NVIC_EnableIRQ>
}
 80011f0:	bf00      	nop
 80011f2:	3730      	adds	r7, #48	@ 0x30
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40006400 	.word	0x40006400
 80011fc:	20000234 	.word	0x20000234
 8001200:	40023800 	.word	0x40023800
 8001204:	40020c00 	.word	0x40020c00
 8001208:	40006800 	.word	0x40006800
 800120c:	40020400 	.word	0x40020400

08001210 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0a      	ldr	r2, [pc, #40]	@ (8001248 <HAL_TIM_Base_MspInit+0x38>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d10b      	bne.n	800123a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001222:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <HAL_TIM_Base_MspInit+0x3c>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001226:	4a09      	ldr	r2, [pc, #36]	@ (800124c <HAL_TIM_Base_MspInit+0x3c>)
 8001228:	f043 0308 	orr.w	r3, r3, #8
 800122c:	6413      	str	r3, [r2, #64]	@ 0x40
 800122e:	4b07      	ldr	r3, [pc, #28]	@ (800124c <HAL_TIM_Base_MspInit+0x3c>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 800123a:	bf00      	nop
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40000c00 	.word	0x40000c00
 800124c:	40023800 	.word	0x40023800

08001250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <NMI_Handler+0x4>

08001258 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <HardFault_Handler+0x4>

08001260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <MemManage_Handler+0x4>

08001268 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <BusFault_Handler+0x4>

08001270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <UsageFault_Handler+0x4>

08001278 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a6:	f000 f8ad 	bl	8001404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012b4:	4802      	ldr	r0, [pc, #8]	@ (80012c0 <CAN1_RX0_IRQHandler+0x10>)
 80012b6:	f000 feb4 	bl	8002022 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200000d4 	.word	0x200000d4

080012c4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012c8:	4802      	ldr	r0, [pc, #8]	@ (80012d4 <CAN1_RX1_IRQHandler+0x10>)
 80012ca:	f000 feaa 	bl	8002022 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200000d4 	.word	0x200000d4

080012d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012dc:	4802      	ldr	r0, [pc, #8]	@ (80012e8 <DMA2_Stream0_IRQHandler+0x10>)
 80012de:	f001 fb5d 	bl	800299c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000074 	.word	0x20000074

080012ec <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80012f0:	4802      	ldr	r0, [pc, #8]	@ (80012fc <CAN2_RX0_IRQHandler+0x10>)
 80012f2:	f000 fe96 	bl	8002022 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200000fc 	.word	0x200000fc

08001300 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001304:	4802      	ldr	r0, [pc, #8]	@ (8001310 <CAN2_RX1_IRQHandler+0x10>)
 8001306:	f000 fe8c 	bl	8002022 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200000fc 	.word	0x200000fc

08001314 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001318:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <SystemInit+0x20>)
 800131a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800131e:	4a05      	ldr	r2, [pc, #20]	@ (8001334 <SystemInit+0x20>)
 8001320:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001324:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001338:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001370 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 800133c:	f7ff ffea 	bl	8001314 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001340:	480c      	ldr	r0, [pc, #48]	@ (8001374 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001342:	490d      	ldr	r1, [pc, #52]	@ (8001378 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001344:	4a0d      	ldr	r2, [pc, #52]	@ (800137c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001348:	e002      	b.n	8001350 <LoopCopyDataInit>

0800134a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800134c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134e:	3304      	adds	r3, #4

08001350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001354:	d3f9      	bcc.n	800134a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001356:	4a0a      	ldr	r2, [pc, #40]	@ (8001380 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001358:	4c0a      	ldr	r4, [pc, #40]	@ (8001384 <LoopFillZerobss+0x22>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800135c:	e001      	b.n	8001362 <LoopFillZerobss>

0800135e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001360:	3204      	adds	r2, #4

08001362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001364:	d3fb      	bcc.n	800135e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001366:	f002 ff67 	bl	8004238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800136a:	f7ff f9fb 	bl	8000764 <main>
  bx  lr    
 800136e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001370:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001378:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800137c:	080042c0 	.word	0x080042c0
  ldr r2, =_sbss
 8001380:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001384:	2000023c 	.word	0x2000023c

08001388 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001388:	e7fe      	b.n	8001388 <ADC_IRQHandler>

0800138a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138e:	2003      	movs	r0, #3
 8001390:	f001 f93c 	bl	800260c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001394:	200f      	movs	r0, #15
 8001396:	f000 f805 	bl	80013a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800139a:	f7ff fdb7 	bl	8000f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013ac:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <HAL_InitTick+0x54>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <HAL_InitTick+0x58>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	4619      	mov	r1, r3
 80013b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80013be:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c2:	4618      	mov	r0, r3
 80013c4:	f001 f957 	bl	8002676 <HAL_SYSTICK_Config>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e00e      	b.n	80013f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b0f      	cmp	r3, #15
 80013d6:	d80a      	bhi.n	80013ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d8:	2200      	movs	r2, #0
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	f04f 30ff 	mov.w	r0, #4294967295
 80013e0:	f001 f91f 	bl	8002622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e4:	4a06      	ldr	r2, [pc, #24]	@ (8001400 <HAL_InitTick+0x5c>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	e000      	b.n	80013f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000000 	.word	0x20000000
 80013fc:	20000008 	.word	0x20000008
 8001400:	20000004 	.word	0x20000004

08001404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001408:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <HAL_IncTick+0x20>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <HAL_IncTick+0x24>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4413      	add	r3, r2
 8001414:	4a04      	ldr	r2, [pc, #16]	@ (8001428 <HAL_IncTick+0x24>)
 8001416:	6013      	str	r3, [r2, #0]
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000008 	.word	0x20000008
 8001428:	20000238 	.word	0x20000238

0800142c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return uwTick;
 8001430:	4b03      	ldr	r3, [pc, #12]	@ (8001440 <HAL_GetTick+0x14>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000238 	.word	0x20000238

08001444 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e031      	b.n	80014be <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	2b00      	cmp	r3, #0
 8001460:	d109      	bne.n	8001476 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff fd76 	bl	8000f54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	f003 0310 	and.w	r3, r3, #16
 800147e:	2b00      	cmp	r3, #0
 8001480:	d116      	bne.n	80014b0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001486:	4b10      	ldr	r3, [pc, #64]	@ (80014c8 <HAL_ADC_Init+0x84>)
 8001488:	4013      	ands	r3, r2
 800148a:	f043 0202 	orr.w	r2, r3, #2
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 fa7e 	bl	8001994 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	f023 0303 	bic.w	r3, r3, #3
 80014a6:	f043 0201 	orr.w	r2, r3, #1
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80014ae:	e001      	b.n	80014b4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	ffffeefd 	.word	0xffffeefd

080014cc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d101      	bne.n	80014ea <HAL_ADC_Start_DMA+0x1e>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e0d4      	b.n	8001694 <HAL_ADC_Start_DMA+0x1c8>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d018      	beq.n	8001532 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001510:	4b62      	ldr	r3, [pc, #392]	@ (800169c <HAL_ADC_Start_DMA+0x1d0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a62      	ldr	r2, [pc, #392]	@ (80016a0 <HAL_ADC_Start_DMA+0x1d4>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	0c9a      	lsrs	r2, r3, #18
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001524:	e002      	b.n	800152c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3b01      	subs	r3, #1
 800152a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f9      	bne.n	8001526 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b01      	cmp	r3, #1
 800153e:	f040 809c 	bne.w	800167a <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001546:	4b57      	ldr	r3, [pc, #348]	@ (80016a4 <HAL_ADC_Start_DMA+0x1d8>)
 8001548:	4013      	ands	r3, r2
 800154a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800155c:	2b00      	cmp	r3, #0
 800155e:	d007      	beq.n	8001570 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001564:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001568:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001574:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800157c:	d106      	bne.n	800158c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	f023 0206 	bic.w	r2, r3, #6
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	645a      	str	r2, [r3, #68]	@ 0x44
 800158a:	e002      	b.n	8001592 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2200      	movs	r2, #0
 8001590:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800159e:	4a42      	ldr	r2, [pc, #264]	@ (80016a8 <HAL_ADC_Start_DMA+0x1dc>)
 80015a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015a6:	4a41      	ldr	r2, [pc, #260]	@ (80016ac <HAL_ADC_Start_DMA+0x1e0>)
 80015a8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ae:	4a40      	ldr	r2, [pc, #256]	@ (80016b0 <HAL_ADC_Start_DMA+0x1e4>)
 80015b0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80015ba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80015ca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015da:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	334c      	adds	r3, #76	@ 0x4c
 80015e6:	4619      	mov	r1, r3
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f001 f976 	bl	80028dc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80015f0:	4b30      	ldr	r3, [pc, #192]	@ (80016b4 <HAL_ADC_Start_DMA+0x1e8>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 031f 	and.w	r3, r3, #31
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10f      	bne.n	800161c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d143      	bne.n	8001692 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	e03a      	b.n	8001692 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a25      	ldr	r2, [pc, #148]	@ (80016b8 <HAL_ADC_Start_DMA+0x1ec>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d10e      	bne.n	8001644 <HAL_ADC_Start_DMA+0x178>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d107      	bne.n	8001644 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001642:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001644:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <HAL_ADC_Start_DMA+0x1e8>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	2b00      	cmp	r3, #0
 800164e:	d120      	bne.n	8001692 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a19      	ldr	r2, [pc, #100]	@ (80016bc <HAL_ADC_Start_DMA+0x1f0>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d11b      	bne.n	8001692 <HAL_ADC_Start_DMA+0x1c6>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d114      	bne.n	8001692 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	e00b      	b.n	8001692 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	f043 0210 	orr.w	r2, r3, #16
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168a:	f043 0201 	orr.w	r2, r3, #1
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000000 	.word	0x20000000
 80016a0:	431bde83 	.word	0x431bde83
 80016a4:	fffff8fe 	.word	0xfffff8fe
 80016a8:	08001b89 	.word	0x08001b89
 80016ac:	08001c43 	.word	0x08001c43
 80016b0:	08001c5f 	.word	0x08001c5f
 80016b4:	40012300 	.word	0x40012300
 80016b8:	40012000 	.word	0x40012000
 80016bc:	40012200 	.word	0x40012200

080016c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d101      	bne.n	8001704 <HAL_ADC_ConfigChannel+0x1c>
 8001700:	2302      	movs	r3, #2
 8001702:	e136      	b.n	8001972 <HAL_ADC_ConfigChannel+0x28a>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b09      	cmp	r3, #9
 8001712:	d93a      	bls.n	800178a <HAL_ADC_ConfigChannel+0xa2>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800171c:	d035      	beq.n	800178a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68d9      	ldr	r1, [r3, #12]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	b29b      	uxth	r3, r3
 800172a:	461a      	mov	r2, r3
 800172c:	4613      	mov	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	3b1e      	subs	r3, #30
 8001734:	2207      	movs	r2, #7
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43da      	mvns	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	400a      	ands	r2, r1
 8001742:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a8d      	ldr	r2, [pc, #564]	@ (8001980 <HAL_ADC_ConfigChannel+0x298>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d10a      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68d9      	ldr	r1, [r3, #12]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	061a      	lsls	r2, r3, #24
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001762:	e035      	b.n	80017d0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68d9      	ldr	r1, [r3, #12]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	b29b      	uxth	r3, r3
 8001774:	4618      	mov	r0, r3
 8001776:	4603      	mov	r3, r0
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4403      	add	r3, r0
 800177c:	3b1e      	subs	r3, #30
 800177e:	409a      	lsls	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001788:	e022      	b.n	80017d0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6919      	ldr	r1, [r3, #16]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	b29b      	uxth	r3, r3
 8001796:	461a      	mov	r2, r3
 8001798:	4613      	mov	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4413      	add	r3, r2
 800179e:	2207      	movs	r2, #7
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43da      	mvns	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	400a      	ands	r2, r1
 80017ac:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6919      	ldr	r1, [r3, #16]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	4618      	mov	r0, r3
 80017c0:	4603      	mov	r3, r0
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4403      	add	r3, r0
 80017c6:	409a      	lsls	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b06      	cmp	r3, #6
 80017d6:	d824      	bhi.n	8001822 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	3b05      	subs	r3, #5
 80017ea:	221f      	movs	r2, #31
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43da      	mvns	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	400a      	ands	r2, r1
 80017f8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	b29b      	uxth	r3, r3
 8001806:	4618      	mov	r0, r3
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	3b05      	subs	r3, #5
 8001814:	fa00 f203 	lsl.w	r2, r0, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001820:	e04c      	b.n	80018bc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b0c      	cmp	r3, #12
 8001828:	d824      	bhi.n	8001874 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	3b23      	subs	r3, #35	@ 0x23
 800183c:	221f      	movs	r2, #31
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43da      	mvns	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	400a      	ands	r2, r1
 800184a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	b29b      	uxth	r3, r3
 8001858:	4618      	mov	r0, r3
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	3b23      	subs	r3, #35	@ 0x23
 8001866:	fa00 f203 	lsl.w	r2, r0, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	631a      	str	r2, [r3, #48]	@ 0x30
 8001872:	e023      	b.n	80018bc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	3b41      	subs	r3, #65	@ 0x41
 8001886:	221f      	movs	r2, #31
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43da      	mvns	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	400a      	ands	r2, r1
 8001894:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	3b41      	subs	r3, #65	@ 0x41
 80018b0:	fa00 f203 	lsl.w	r2, r0, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a30      	ldr	r2, [pc, #192]	@ (8001984 <HAL_ADC_ConfigChannel+0x29c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d10a      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x1f4>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80018ce:	d105      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80018d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001988 <HAL_ADC_ConfigChannel+0x2a0>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	4a2c      	ldr	r2, [pc, #176]	@ (8001988 <HAL_ADC_ConfigChannel+0x2a0>)
 80018d6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80018da:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a28      	ldr	r2, [pc, #160]	@ (8001984 <HAL_ADC_ConfigChannel+0x29c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d10f      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x21e>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b12      	cmp	r3, #18
 80018ec:	d10b      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80018ee:	4b26      	ldr	r3, [pc, #152]	@ (8001988 <HAL_ADC_ConfigChannel+0x2a0>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4a25      	ldr	r2, [pc, #148]	@ (8001988 <HAL_ADC_ConfigChannel+0x2a0>)
 80018f4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80018f8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80018fa:	4b23      	ldr	r3, [pc, #140]	@ (8001988 <HAL_ADC_ConfigChannel+0x2a0>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	4a22      	ldr	r2, [pc, #136]	@ (8001988 <HAL_ADC_ConfigChannel+0x2a0>)
 8001900:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001904:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a1e      	ldr	r2, [pc, #120]	@ (8001984 <HAL_ADC_ConfigChannel+0x29c>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d12b      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x280>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a1a      	ldr	r2, [pc, #104]	@ (8001980 <HAL_ADC_ConfigChannel+0x298>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d003      	beq.n	8001922 <HAL_ADC_ConfigChannel+0x23a>
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b11      	cmp	r3, #17
 8001920:	d122      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001922:	4b19      	ldr	r3, [pc, #100]	@ (8001988 <HAL_ADC_ConfigChannel+0x2a0>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	4a18      	ldr	r2, [pc, #96]	@ (8001988 <HAL_ADC_ConfigChannel+0x2a0>)
 8001928:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800192c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800192e:	4b16      	ldr	r3, [pc, #88]	@ (8001988 <HAL_ADC_ConfigChannel+0x2a0>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4a15      	ldr	r2, [pc, #84]	@ (8001988 <HAL_ADC_ConfigChannel+0x2a0>)
 8001934:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001938:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a10      	ldr	r2, [pc, #64]	@ (8001980 <HAL_ADC_ConfigChannel+0x298>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d111      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001944:	4b11      	ldr	r3, [pc, #68]	@ (800198c <HAL_ADC_ConfigChannel+0x2a4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a11      	ldr	r2, [pc, #68]	@ (8001990 <HAL_ADC_ConfigChannel+0x2a8>)
 800194a:	fba2 2303 	umull	r2, r3, r2, r3
 800194e:	0c9a      	lsrs	r2, r3, #18
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800195a:	e002      	b.n	8001962 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	3b01      	subs	r3, #1
 8001960:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f9      	bne.n	800195c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	10000012 	.word	0x10000012
 8001984:	40012000 	.word	0x40012000
 8001988:	40012300 	.word	0x40012300
 800198c:	20000000 	.word	0x20000000
 8001990:	431bde83 	.word	0x431bde83

08001994 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800199c:	4b78      	ldr	r3, [pc, #480]	@ (8001b80 <ADC_Init+0x1ec>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	4a77      	ldr	r2, [pc, #476]	@ (8001b80 <ADC_Init+0x1ec>)
 80019a2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80019a6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80019a8:	4b75      	ldr	r3, [pc, #468]	@ (8001b80 <ADC_Init+0x1ec>)
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	4973      	ldr	r1, [pc, #460]	@ (8001b80 <ADC_Init+0x1ec>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6859      	ldr	r1, [r3, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	021a      	lsls	r2, r3, #8
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80019e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6859      	ldr	r1, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6899      	ldr	r1, [r3, #8]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a22:	4a58      	ldr	r2, [pc, #352]	@ (8001b84 <ADC_Init+0x1f0>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d022      	beq.n	8001a6e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6899      	ldr	r1, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6899      	ldr	r1, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	e00f      	b.n	8001a8e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0202 	bic.w	r2, r2, #2
 8001a9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6899      	ldr	r1, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	005a      	lsls	r2, r3, #1
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d01b      	beq.n	8001af4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001aca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001ada:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6859      	ldr	r1, [r3, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	035a      	lsls	r2, r3, #13
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	e007      	b.n	8001b04 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b02:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001b12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	051a      	lsls	r2, r3, #20
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6899      	ldr	r1, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b46:	025a      	lsls	r2, r3, #9
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6899      	ldr	r1, [r3, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	029a      	lsls	r2, r3, #10
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	609a      	str	r2, [r3, #8]
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	40012300 	.word	0x40012300
 8001b84:	0f000001 	.word	0x0f000001

08001b88 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b94:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d13c      	bne.n	8001c1c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d12b      	bne.n	8001c14 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d127      	bne.n	8001c14 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bca:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d006      	beq.n	8001be0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d119      	bne.n	8001c14 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0220 	bic.w	r2, r2, #32
 8001bee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d105      	bne.n	8001c14 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0c:	f043 0201 	orr.w	r2, r3, #1
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f7ff f90d 	bl	8000e34 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001c1a:	e00e      	b.n	8001c3a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	f003 0310 	and.w	r3, r3, #16
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f7ff fd53 	bl	80016d4 <HAL_ADC_ErrorCallback>
}
 8001c2e:	e004      	b.n	8001c3a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	4798      	blx	r3
}
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c4e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f7ff fd35 	bl	80016c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b084      	sub	sp, #16
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c6a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2240      	movs	r2, #64	@ 0x40
 8001c70:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c76:	f043 0204 	orr.w	r2, r3, #4
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f7ff fd28 	bl	80016d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e0ed      	b.n	8001e7a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d102      	bne.n	8001cb0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff f9fa 	bl	80010a4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0201 	orr.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cc0:	f7ff fbb4 	bl	800142c <HAL_GetTick>
 8001cc4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cc6:	e012      	b.n	8001cee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cc8:	f7ff fbb0 	bl	800142c <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b0a      	cmp	r3, #10
 8001cd4:	d90b      	bls.n	8001cee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cda:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2205      	movs	r2, #5
 8001ce6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e0c5      	b.n	8001e7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0e5      	beq.n	8001cc8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0202 	bic.w	r2, r2, #2
 8001d0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d0c:	f7ff fb8e 	bl	800142c <HAL_GetTick>
 8001d10:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d12:	e012      	b.n	8001d3a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d14:	f7ff fb8a 	bl	800142c <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b0a      	cmp	r3, #10
 8001d20:	d90b      	bls.n	8001d3a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d26:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2205      	movs	r2, #5
 8001d32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e09f      	b.n	8001e7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1e5      	bne.n	8001d14 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	7e1b      	ldrb	r3, [r3, #24]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d108      	bne.n	8001d62 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	e007      	b.n	8001d72 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	7e5b      	ldrb	r3, [r3, #25]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d108      	bne.n	8001d8c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	e007      	b.n	8001d9c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	7e9b      	ldrb	r3, [r3, #26]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d108      	bne.n	8001db6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0220 	orr.w	r2, r2, #32
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	e007      	b.n	8001dc6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0220 	bic.w	r2, r2, #32
 8001dc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	7edb      	ldrb	r3, [r3, #27]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d108      	bne.n	8001de0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 0210 	bic.w	r2, r2, #16
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	e007      	b.n	8001df0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0210 	orr.w	r2, r2, #16
 8001dee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	7f1b      	ldrb	r3, [r3, #28]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d108      	bne.n	8001e0a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0208 	orr.w	r2, r2, #8
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	e007      	b.n	8001e1a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0208 	bic.w	r2, r2, #8
 8001e18:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7f5b      	ldrb	r3, [r3, #29]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d108      	bne.n	8001e34 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 0204 	orr.w	r2, r2, #4
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	e007      	b.n	8001e44 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0204 	bic.w	r2, r2, #4
 8001e42:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	ea42 0103 	orr.w	r1, r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	1e5a      	subs	r2, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b089      	sub	sp, #36	@ 0x24
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
 8001e8e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e96:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ea0:	7ffb      	ldrb	r3, [r7, #31]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d003      	beq.n	8001eae <HAL_CAN_AddTxMessage+0x2c>
 8001ea6:	7ffb      	ldrb	r3, [r7, #31]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	f040 80ad 	bne.w	8002008 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10a      	bne.n	8001ece <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d105      	bne.n	8001ece <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8095 	beq.w	8001ff8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	0e1b      	lsrs	r3, r3, #24
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001ed8:	2201      	movs	r2, #1
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	409a      	lsls	r2, r3
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10d      	bne.n	8001f06 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ef4:	68f9      	ldr	r1, [r7, #12]
 8001ef6:	6809      	ldr	r1, [r1, #0]
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	3318      	adds	r3, #24
 8001efe:	011b      	lsls	r3, r3, #4
 8001f00:	440b      	add	r3, r1
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	e00f      	b.n	8001f26 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f10:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f16:	68f9      	ldr	r1, [r7, #12]
 8001f18:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001f1a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	3318      	adds	r3, #24
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	440b      	add	r3, r1
 8001f24:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6819      	ldr	r1, [r3, #0]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	691a      	ldr	r2, [r3, #16]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	3318      	adds	r3, #24
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	440b      	add	r3, r1
 8001f36:	3304      	adds	r3, #4
 8001f38:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	7d1b      	ldrb	r3, [r3, #20]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d111      	bne.n	8001f66 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	3318      	adds	r3, #24
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3304      	adds	r3, #4
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	6811      	ldr	r1, [r2, #0]
 8001f56:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	3318      	adds	r3, #24
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	440b      	add	r3, r1
 8001f62:	3304      	adds	r3, #4
 8001f64:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3307      	adds	r3, #7
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	061a      	lsls	r2, r3, #24
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3306      	adds	r3, #6
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	041b      	lsls	r3, r3, #16
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3305      	adds	r3, #5
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	021b      	lsls	r3, r3, #8
 8001f80:	4313      	orrs	r3, r2
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	3204      	adds	r2, #4
 8001f86:	7812      	ldrb	r2, [r2, #0]
 8001f88:	4610      	mov	r0, r2
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	6811      	ldr	r1, [r2, #0]
 8001f8e:	ea43 0200 	orr.w	r2, r3, r0
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	011b      	lsls	r3, r3, #4
 8001f96:	440b      	add	r3, r1
 8001f98:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001f9c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3303      	adds	r3, #3
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	061a      	lsls	r2, r3, #24
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3302      	adds	r3, #2
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	041b      	lsls	r3, r3, #16
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	7812      	ldrb	r2, [r2, #0]
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	6811      	ldr	r1, [r2, #0]
 8001fc4:	ea43 0200 	orr.w	r2, r3, r0
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	440b      	add	r3, r1
 8001fce:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001fd2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	3318      	adds	r3, #24
 8001fdc:	011b      	lsls	r3, r3, #4
 8001fde:	4413      	add	r3, r2
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	6811      	ldr	r1, [r2, #0]
 8001fe6:	f043 0201 	orr.w	r2, r3, #1
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	3318      	adds	r3, #24
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	440b      	add	r3, r1
 8001ff2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	e00e      	b.n	8002016 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e006      	b.n	8002016 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
  }
}
 8002016:	4618      	mov	r0, r3
 8002018:	3724      	adds	r7, #36	@ 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b08a      	sub	sp, #40	@ 0x28
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d07c      	beq.n	8002162 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d023      	beq.n	80020ba <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2201      	movs	r2, #1
 8002078:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f983 	bl	8002390 <HAL_CAN_TxMailbox0CompleteCallback>
 800208a:	e016      	b.n	80020ba <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	2b00      	cmp	r3, #0
 8002094:	d004      	beq.n	80020a0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002098:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800209c:	627b      	str	r3, [r7, #36]	@ 0x24
 800209e:	e00c      	b.n	80020ba <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d004      	beq.n	80020b4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80020aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80020b2:	e002      	b.n	80020ba <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f989 	bl	80023cc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d024      	beq.n	800210e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f963 	bl	80023a4 <HAL_CAN_TxMailbox1CompleteCallback>
 80020de:	e016      	b.n	800210e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d004      	beq.n	80020f4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80020ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80020f2:	e00c      	b.n	800210e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d004      	beq.n	8002108 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002104:	627b      	str	r3, [r7, #36]	@ 0x24
 8002106:	e002      	b.n	800210e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f969 	bl	80023e0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d024      	beq.n	8002162 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002120:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f943 	bl	80023b8 <HAL_CAN_TxMailbox2CompleteCallback>
 8002132:	e016      	b.n	8002162 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d004      	beq.n	8002148 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24
 8002146:	e00c      	b.n	8002162 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d004      	beq.n	800215c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002158:	627b      	str	r3, [r7, #36]	@ 0x24
 800215a:	e002      	b.n	8002162 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f949 	bl	80023f4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002162:	6a3b      	ldr	r3, [r7, #32]
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00c      	beq.n	8002186 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f003 0310 	and.w	r3, r3, #16
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002178:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800217c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2210      	movs	r2, #16
 8002184:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00b      	beq.n	80021a8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d006      	beq.n	80021a8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2208      	movs	r2, #8
 80021a0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f930 	bl	8002408 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d009      	beq.n	80021c6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7fe fd95 	bl	8000cf0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00c      	beq.n	80021ea <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d007      	beq.n	80021ea <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80021da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021e0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2210      	movs	r2, #16
 80021e8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	f003 0320 	and.w	r3, r3, #32
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00b      	beq.n	800220c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d006      	beq.n	800220c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2208      	movs	r2, #8
 8002204:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f908 	bl	800241c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	f003 0310 	and.w	r3, r3, #16
 8002212:	2b00      	cmp	r3, #0
 8002214:	d009      	beq.n	800222a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7fe fd6d 	bl	8000d04 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00b      	beq.n	800224c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b00      	cmp	r3, #0
 800223c:	d006      	beq.n	800224c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2210      	movs	r2, #16
 8002244:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f8f2 	bl	8002430 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00b      	beq.n	800226e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b00      	cmp	r3, #0
 800225e:	d006      	beq.n	800226e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2208      	movs	r2, #8
 8002266:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f8eb 	bl	8002444 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d07b      	beq.n	8002370 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b00      	cmp	r3, #0
 8002280:	d072      	beq.n	8002368 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d008      	beq.n	800229e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800229e:	6a3b      	ldr	r3, [r7, #32]
 80022a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80022b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b4:	f043 0302 	orr.w	r3, r3, #2
 80022b8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d008      	beq.n	80022d6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80022ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d0:	f043 0304 	orr.w	r3, r3, #4
 80022d4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d043      	beq.n	8002368 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d03e      	beq.n	8002368 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022f0:	2b60      	cmp	r3, #96	@ 0x60
 80022f2:	d02b      	beq.n	800234c <HAL_CAN_IRQHandler+0x32a>
 80022f4:	2b60      	cmp	r3, #96	@ 0x60
 80022f6:	d82e      	bhi.n	8002356 <HAL_CAN_IRQHandler+0x334>
 80022f8:	2b50      	cmp	r3, #80	@ 0x50
 80022fa:	d022      	beq.n	8002342 <HAL_CAN_IRQHandler+0x320>
 80022fc:	2b50      	cmp	r3, #80	@ 0x50
 80022fe:	d82a      	bhi.n	8002356 <HAL_CAN_IRQHandler+0x334>
 8002300:	2b40      	cmp	r3, #64	@ 0x40
 8002302:	d019      	beq.n	8002338 <HAL_CAN_IRQHandler+0x316>
 8002304:	2b40      	cmp	r3, #64	@ 0x40
 8002306:	d826      	bhi.n	8002356 <HAL_CAN_IRQHandler+0x334>
 8002308:	2b30      	cmp	r3, #48	@ 0x30
 800230a:	d010      	beq.n	800232e <HAL_CAN_IRQHandler+0x30c>
 800230c:	2b30      	cmp	r3, #48	@ 0x30
 800230e:	d822      	bhi.n	8002356 <HAL_CAN_IRQHandler+0x334>
 8002310:	2b10      	cmp	r3, #16
 8002312:	d002      	beq.n	800231a <HAL_CAN_IRQHandler+0x2f8>
 8002314:	2b20      	cmp	r3, #32
 8002316:	d005      	beq.n	8002324 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002318:	e01d      	b.n	8002356 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800231a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231c:	f043 0308 	orr.w	r3, r3, #8
 8002320:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002322:	e019      	b.n	8002358 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002326:	f043 0310 	orr.w	r3, r3, #16
 800232a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800232c:	e014      	b.n	8002358 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800232e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002330:	f043 0320 	orr.w	r3, r3, #32
 8002334:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002336:	e00f      	b.n	8002358 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800233e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002340:	e00a      	b.n	8002358 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002348:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800234a:	e005      	b.n	8002358 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800234c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002352:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002354:	e000      	b.n	8002358 <HAL_CAN_IRQHandler+0x336>
            break;
 8002356:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699a      	ldr	r2, [r3, #24]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002366:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2204      	movs	r2, #4
 800236e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800237a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237c:	431a      	orrs	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f868 	bl	8002458 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002388:	bf00      	nop
 800238a:	3728      	adds	r7, #40	@ 0x28
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800247c:	4b0b      	ldr	r3, [pc, #44]	@ (80024ac <__NVIC_SetPriorityGrouping+0x40>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002488:	4013      	ands	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002494:	4b06      	ldr	r3, [pc, #24]	@ (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 8002496:	4313      	orrs	r3, r2
 8002498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249a:	4a04      	ldr	r2, [pc, #16]	@ (80024ac <__NVIC_SetPriorityGrouping+0x40>)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	60d3      	str	r3, [r2, #12]
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000ed00 	.word	0xe000ed00
 80024b0:	05fa0000 	.word	0x05fa0000

080024b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b8:	4b04      	ldr	r3, [pc, #16]	@ (80024cc <__NVIC_GetPriorityGrouping+0x18>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	f003 0307 	and.w	r3, r3, #7
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	db0b      	blt.n	80024fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	f003 021f 	and.w	r2, r3, #31
 80024e8:	4907      	ldr	r1, [pc, #28]	@ (8002508 <__NVIC_EnableIRQ+0x38>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	2001      	movs	r0, #1
 80024f2:	fa00 f202 	lsl.w	r2, r0, r2
 80024f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000e100 	.word	0xe000e100

0800250c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	6039      	str	r1, [r7, #0]
 8002516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251c:	2b00      	cmp	r3, #0
 800251e:	db0a      	blt.n	8002536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	b2da      	uxtb	r2, r3
 8002524:	490c      	ldr	r1, [pc, #48]	@ (8002558 <__NVIC_SetPriority+0x4c>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	0112      	lsls	r2, r2, #4
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	440b      	add	r3, r1
 8002530:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002534:	e00a      	b.n	800254c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4908      	ldr	r1, [pc, #32]	@ (800255c <__NVIC_SetPriority+0x50>)
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	3b04      	subs	r3, #4
 8002544:	0112      	lsls	r2, r2, #4
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	440b      	add	r3, r1
 800254a:	761a      	strb	r2, [r3, #24]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000e100 	.word	0xe000e100
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002560:	b480      	push	{r7}
 8002562:	b089      	sub	sp, #36	@ 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f1c3 0307 	rsb	r3, r3, #7
 800257a:	2b04      	cmp	r3, #4
 800257c:	bf28      	it	cs
 800257e:	2304      	movcs	r3, #4
 8002580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3304      	adds	r3, #4
 8002586:	2b06      	cmp	r3, #6
 8002588:	d902      	bls.n	8002590 <NVIC_EncodePriority+0x30>
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3b03      	subs	r3, #3
 800258e:	e000      	b.n	8002592 <NVIC_EncodePriority+0x32>
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002594:	f04f 32ff 	mov.w	r2, #4294967295
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43da      	mvns	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	401a      	ands	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	43d9      	mvns	r1, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b8:	4313      	orrs	r3, r2
         );
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3724      	adds	r7, #36	@ 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025d8:	d301      	bcc.n	80025de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025da:	2301      	movs	r3, #1
 80025dc:	e00f      	b.n	80025fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025de:	4a0a      	ldr	r2, [pc, #40]	@ (8002608 <SysTick_Config+0x40>)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025e6:	210f      	movs	r1, #15
 80025e8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ec:	f7ff ff8e 	bl	800250c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025f0:	4b05      	ldr	r3, [pc, #20]	@ (8002608 <SysTick_Config+0x40>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025f6:	4b04      	ldr	r3, [pc, #16]	@ (8002608 <SysTick_Config+0x40>)
 80025f8:	2207      	movs	r2, #7
 80025fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	e000e010 	.word	0xe000e010

0800260c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ff29 	bl	800246c <__NVIC_SetPriorityGrouping>
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002622:	b580      	push	{r7, lr}
 8002624:	b086      	sub	sp, #24
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
 800262e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002634:	f7ff ff3e 	bl	80024b4 <__NVIC_GetPriorityGrouping>
 8002638:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68b9      	ldr	r1, [r7, #8]
 800263e:	6978      	ldr	r0, [r7, #20]
 8002640:	f7ff ff8e 	bl	8002560 <NVIC_EncodePriority>
 8002644:	4602      	mov	r2, r0
 8002646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ff5d 	bl	800250c <__NVIC_SetPriority>
}
 8002652:	bf00      	nop
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	4603      	mov	r3, r0
 8002662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff31 	bl	80024d0 <__NVIC_EnableIRQ>
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ffa2 	bl	80025c8 <SysTick_Config>
 8002684:	4603      	mov	r3, r0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002694:	f3bf 8f5f 	dmb	sy
}
 8002698:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800269a:	4b07      	ldr	r3, [pc, #28]	@ (80026b8 <HAL_MPU_Disable+0x28>)
 800269c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269e:	4a06      	ldr	r2, [pc, #24]	@ (80026b8 <HAL_MPU_Disable+0x28>)
 80026a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026a4:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80026a6:	4b05      	ldr	r3, [pc, #20]	@ (80026bc <HAL_MPU_Disable+0x2c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	605a      	str	r2, [r3, #4]
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	e000ed00 	.word	0xe000ed00
 80026bc:	e000ed90 	.word	0xe000ed90

080026c0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80026c8:	4a0b      	ldr	r2, [pc, #44]	@ (80026f8 <HAL_MPU_Enable+0x38>)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80026d2:	4b0a      	ldr	r3, [pc, #40]	@ (80026fc <HAL_MPU_Enable+0x3c>)
 80026d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d6:	4a09      	ldr	r2, [pc, #36]	@ (80026fc <HAL_MPU_Enable+0x3c>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026dc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80026de:	f3bf 8f4f 	dsb	sy
}
 80026e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80026e4:	f3bf 8f6f 	isb	sy
}
 80026e8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	e000ed90 	.word	0xe000ed90
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	785a      	ldrb	r2, [r3, #1]
 800270c:	4b1b      	ldr	r3, [pc, #108]	@ (800277c <HAL_MPU_ConfigRegion+0x7c>)
 800270e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002710:	4b1a      	ldr	r3, [pc, #104]	@ (800277c <HAL_MPU_ConfigRegion+0x7c>)
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	4a19      	ldr	r2, [pc, #100]	@ (800277c <HAL_MPU_ConfigRegion+0x7c>)
 8002716:	f023 0301 	bic.w	r3, r3, #1
 800271a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800271c:	4a17      	ldr	r2, [pc, #92]	@ (800277c <HAL_MPU_ConfigRegion+0x7c>)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	7b1b      	ldrb	r3, [r3, #12]
 8002728:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	7adb      	ldrb	r3, [r3, #11]
 800272e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002730:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	7a9b      	ldrb	r3, [r3, #10]
 8002736:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002738:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	7b5b      	ldrb	r3, [r3, #13]
 800273e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002740:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	7b9b      	ldrb	r3, [r3, #14]
 8002746:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002748:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	7bdb      	ldrb	r3, [r3, #15]
 800274e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002750:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	7a5b      	ldrb	r3, [r3, #9]
 8002756:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002758:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	7a1b      	ldrb	r3, [r3, #8]
 800275e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002760:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	7812      	ldrb	r2, [r2, #0]
 8002766:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002768:	4a04      	ldr	r2, [pc, #16]	@ (800277c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800276a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800276c:	6113      	str	r3, [r2, #16]
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	e000ed90 	.word	0xe000ed90

08002780 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800278c:	f7fe fe4e 	bl	800142c <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e099      	b.n	80028d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0201 	bic.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027bc:	e00f      	b.n	80027de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027be:	f7fe fe35 	bl	800142c <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b05      	cmp	r3, #5
 80027ca:	d908      	bls.n	80027de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2203      	movs	r2, #3
 80027d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e078      	b.n	80028d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1e8      	bne.n	80027be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	4b38      	ldr	r3, [pc, #224]	@ (80028d8 <HAL_DMA_Init+0x158>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800280a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002816:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002822:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4313      	orrs	r3, r2
 800282e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002834:	2b04      	cmp	r3, #4
 8002836:	d107      	bne.n	8002848 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002840:	4313      	orrs	r3, r2
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4313      	orrs	r3, r2
 8002846:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f023 0307 	bic.w	r3, r3, #7
 800285e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	4313      	orrs	r3, r2
 8002868:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286e:	2b04      	cmp	r3, #4
 8002870:	d117      	bne.n	80028a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	4313      	orrs	r3, r2
 800287a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00e      	beq.n	80028a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 fa77 	bl	8002d78 <DMA_CheckFifoParam>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2240      	movs	r2, #64	@ 0x40
 8002894:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800289e:	2301      	movs	r3, #1
 80028a0:	e016      	b.n	80028d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fa2e 	bl	8002d0c <DMA_CalcBaseAndBitshift>
 80028b0:	4603      	mov	r3, r0
 80028b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b8:	223f      	movs	r2, #63	@ 0x3f
 80028ba:	409a      	lsls	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	e010803f 	.word	0xe010803f

080028dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_DMA_Start_IT+0x26>
 80028fe:	2302      	movs	r3, #2
 8002900:	e048      	b.n	8002994 <HAL_DMA_Start_IT+0xb8>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b01      	cmp	r3, #1
 8002914:	d137      	bne.n	8002986 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2202      	movs	r2, #2
 800291a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f9c0 	bl	8002cb0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002934:	223f      	movs	r2, #63	@ 0x3f
 8002936:	409a      	lsls	r2, r3
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0216 	orr.w	r2, r2, #22
 800294a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800295a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002960:	2b00      	cmp	r3, #0
 8002962:	d007      	beq.n	8002974 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0208 	orr.w	r2, r2, #8
 8002972:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	e005      	b.n	8002992 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800298e:	2302      	movs	r3, #2
 8002990:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002992:	7dfb      	ldrb	r3, [r7, #23]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80029a8:	4b8e      	ldr	r3, [pc, #568]	@ (8002be4 <HAL_DMA_IRQHandler+0x248>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a8e      	ldr	r2, [pc, #568]	@ (8002be8 <HAL_DMA_IRQHandler+0x24c>)
 80029ae:	fba2 2303 	umull	r2, r3, r2, r3
 80029b2:	0a9b      	lsrs	r3, r3, #10
 80029b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c6:	2208      	movs	r2, #8
 80029c8:	409a      	lsls	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	4013      	ands	r3, r2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d01a      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d013      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0204 	bic.w	r2, r2, #4
 80029ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f4:	2208      	movs	r2, #8
 80029f6:	409a      	lsls	r2, r3
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a00:	f043 0201 	orr.w	r2, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	409a      	lsls	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4013      	ands	r3, r2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d012      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00b      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a36:	f043 0202 	orr.w	r2, r3, #2
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a42:	2204      	movs	r2, #4
 8002a44:	409a      	lsls	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d012      	beq.n	8002a74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00b      	beq.n	8002a74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a60:	2204      	movs	r2, #4
 8002a62:	409a      	lsls	r2, r3
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6c:	f043 0204 	orr.w	r2, r3, #4
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a78:	2210      	movs	r2, #16
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d043      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d03c      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a96:	2210      	movs	r2, #16
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d018      	beq.n	8002ade <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d108      	bne.n	8002acc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d024      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	4798      	blx	r3
 8002aca:	e01f      	b.n	8002b0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d01b      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	4798      	blx	r3
 8002adc:	e016      	b.n	8002b0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d107      	bne.n	8002afc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0208 	bic.w	r2, r2, #8
 8002afa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b10:	2220      	movs	r2, #32
 8002b12:	409a      	lsls	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 808f 	beq.w	8002c3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0310 	and.w	r3, r3, #16
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 8087 	beq.w	8002c3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b32:	2220      	movs	r2, #32
 8002b34:	409a      	lsls	r2, r3
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b05      	cmp	r3, #5
 8002b44:	d136      	bne.n	8002bb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0216 	bic.w	r2, r2, #22
 8002b54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695a      	ldr	r2, [r3, #20]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d103      	bne.n	8002b76 <HAL_DMA_IRQHandler+0x1da>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d007      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0208 	bic.w	r2, r2, #8
 8002b84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b8a:	223f      	movs	r2, #63	@ 0x3f
 8002b8c:	409a      	lsls	r2, r3
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d07e      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	4798      	blx	r3
        }
        return;
 8002bb2:	e079      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d01d      	beq.n	8002bfe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10d      	bne.n	8002bec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d031      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	4798      	blx	r3
 8002be0:	e02c      	b.n	8002c3c <HAL_DMA_IRQHandler+0x2a0>
 8002be2:	bf00      	nop
 8002be4:	20000000 	.word	0x20000000
 8002be8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d023      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	4798      	blx	r3
 8002bfc:	e01e      	b.n	8002c3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10f      	bne.n	8002c2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0210 	bic.w	r2, r2, #16
 8002c1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d032      	beq.n	8002caa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d022      	beq.n	8002c96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2205      	movs	r2, #5
 8002c54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0201 	bic.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d307      	bcc.n	8002c84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f2      	bne.n	8002c68 <HAL_DMA_IRQHandler+0x2cc>
 8002c82:	e000      	b.n	8002c86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d005      	beq.n	8002caa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	4798      	blx	r3
 8002ca6:	e000      	b.n	8002caa <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ca8:	bf00      	nop
    }
  }
}
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ccc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	2b40      	cmp	r3, #64	@ 0x40
 8002cdc:	d108      	bne.n	8002cf0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002cee:	e007      	b.n	8002d00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	60da      	str	r2, [r3, #12]
}
 8002d00:	bf00      	nop
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	3b10      	subs	r3, #16
 8002d1c:	4a13      	ldr	r2, [pc, #76]	@ (8002d6c <DMA_CalcBaseAndBitshift+0x60>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	091b      	lsrs	r3, r3, #4
 8002d24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d26:	4a12      	ldr	r2, [pc, #72]	@ (8002d70 <DMA_CalcBaseAndBitshift+0x64>)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	d908      	bls.n	8002d4c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	4b0c      	ldr	r3, [pc, #48]	@ (8002d74 <DMA_CalcBaseAndBitshift+0x68>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	1d1a      	adds	r2, r3, #4
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d4a:	e006      	b.n	8002d5a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	461a      	mov	r2, r3
 8002d52:	4b08      	ldr	r3, [pc, #32]	@ (8002d74 <DMA_CalcBaseAndBitshift+0x68>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	aaaaaaab 	.word	0xaaaaaaab
 8002d70:	080042a8 	.word	0x080042a8
 8002d74:	fffffc00 	.word	0xfffffc00

08002d78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d11f      	bne.n	8002dd2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d856      	bhi.n	8002e46 <DMA_CheckFifoParam+0xce>
 8002d98:	a201      	add	r2, pc, #4	@ (adr r2, 8002da0 <DMA_CheckFifoParam+0x28>)
 8002d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9e:	bf00      	nop
 8002da0:	08002db1 	.word	0x08002db1
 8002da4:	08002dc3 	.word	0x08002dc3
 8002da8:	08002db1 	.word	0x08002db1
 8002dac:	08002e47 	.word	0x08002e47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d046      	beq.n	8002e4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc0:	e043      	b.n	8002e4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002dca:	d140      	bne.n	8002e4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dd0:	e03d      	b.n	8002e4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dda:	d121      	bne.n	8002e20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d837      	bhi.n	8002e52 <DMA_CheckFifoParam+0xda>
 8002de2:	a201      	add	r2, pc, #4	@ (adr r2, 8002de8 <DMA_CheckFifoParam+0x70>)
 8002de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de8:	08002df9 	.word	0x08002df9
 8002dec:	08002dff 	.word	0x08002dff
 8002df0:	08002df9 	.word	0x08002df9
 8002df4:	08002e11 	.word	0x08002e11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8002dfc:	e030      	b.n	8002e60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d025      	beq.n	8002e56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e0e:	e022      	b.n	8002e56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e14:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e18:	d11f      	bne.n	8002e5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e1e:	e01c      	b.n	8002e5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d903      	bls.n	8002e2e <DMA_CheckFifoParam+0xb6>
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d003      	beq.n	8002e34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e2c:	e018      	b.n	8002e60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
      break;
 8002e32:	e015      	b.n	8002e60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00e      	beq.n	8002e5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
      break;
 8002e44:	e00b      	b.n	8002e5e <DMA_CheckFifoParam+0xe6>
      break;
 8002e46:	bf00      	nop
 8002e48:	e00a      	b.n	8002e60 <DMA_CheckFifoParam+0xe8>
      break;
 8002e4a:	bf00      	nop
 8002e4c:	e008      	b.n	8002e60 <DMA_CheckFifoParam+0xe8>
      break;
 8002e4e:	bf00      	nop
 8002e50:	e006      	b.n	8002e60 <DMA_CheckFifoParam+0xe8>
      break;
 8002e52:	bf00      	nop
 8002e54:	e004      	b.n	8002e60 <DMA_CheckFifoParam+0xe8>
      break;
 8002e56:	bf00      	nop
 8002e58:	e002      	b.n	8002e60 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e5a:	bf00      	nop
 8002e5c:	e000      	b.n	8002e60 <DMA_CheckFifoParam+0xe8>
      break;
 8002e5e:	bf00      	nop
    }
  } 
  
  return status; 
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop

08002e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b089      	sub	sp, #36	@ 0x24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	e175      	b.n	800317c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e90:	2201      	movs	r2, #1
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	f040 8164 	bne.w	8003176 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d005      	beq.n	8002ec6 <HAL_GPIO_Init+0x56>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d130      	bne.n	8002f28 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4013      	ands	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002efc:	2201      	movs	r2, #1
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	091b      	lsrs	r3, r3, #4
 8002f12:	f003 0201 	and.w	r2, r3, #1
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d017      	beq.n	8002f64 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	2203      	movs	r2, #3
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d123      	bne.n	8002fb8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	08da      	lsrs	r2, r3, #3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3208      	adds	r2, #8
 8002f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	220f      	movs	r2, #15
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3208      	adds	r2, #8
 8002fb2:	69b9      	ldr	r1, [r7, #24]
 8002fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0203 	and.w	r2, r3, #3
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80be 	beq.w	8003176 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ffa:	4b66      	ldr	r3, [pc, #408]	@ (8003194 <HAL_GPIO_Init+0x324>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffe:	4a65      	ldr	r2, [pc, #404]	@ (8003194 <HAL_GPIO_Init+0x324>)
 8003000:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003004:	6453      	str	r3, [r2, #68]	@ 0x44
 8003006:	4b63      	ldr	r3, [pc, #396]	@ (8003194 <HAL_GPIO_Init+0x324>)
 8003008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003012:	4a61      	ldr	r2, [pc, #388]	@ (8003198 <HAL_GPIO_Init+0x328>)
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	089b      	lsrs	r3, r3, #2
 8003018:	3302      	adds	r3, #2
 800301a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800301e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	220f      	movs	r2, #15
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43db      	mvns	r3, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4013      	ands	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a58      	ldr	r2, [pc, #352]	@ (800319c <HAL_GPIO_Init+0x32c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d037      	beq.n	80030ae <HAL_GPIO_Init+0x23e>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a57      	ldr	r2, [pc, #348]	@ (80031a0 <HAL_GPIO_Init+0x330>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d031      	beq.n	80030aa <HAL_GPIO_Init+0x23a>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a56      	ldr	r2, [pc, #344]	@ (80031a4 <HAL_GPIO_Init+0x334>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d02b      	beq.n	80030a6 <HAL_GPIO_Init+0x236>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a55      	ldr	r2, [pc, #340]	@ (80031a8 <HAL_GPIO_Init+0x338>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d025      	beq.n	80030a2 <HAL_GPIO_Init+0x232>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a54      	ldr	r2, [pc, #336]	@ (80031ac <HAL_GPIO_Init+0x33c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d01f      	beq.n	800309e <HAL_GPIO_Init+0x22e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a53      	ldr	r2, [pc, #332]	@ (80031b0 <HAL_GPIO_Init+0x340>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d019      	beq.n	800309a <HAL_GPIO_Init+0x22a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a52      	ldr	r2, [pc, #328]	@ (80031b4 <HAL_GPIO_Init+0x344>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d013      	beq.n	8003096 <HAL_GPIO_Init+0x226>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a51      	ldr	r2, [pc, #324]	@ (80031b8 <HAL_GPIO_Init+0x348>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d00d      	beq.n	8003092 <HAL_GPIO_Init+0x222>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a50      	ldr	r2, [pc, #320]	@ (80031bc <HAL_GPIO_Init+0x34c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d007      	beq.n	800308e <HAL_GPIO_Init+0x21e>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a4f      	ldr	r2, [pc, #316]	@ (80031c0 <HAL_GPIO_Init+0x350>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d101      	bne.n	800308a <HAL_GPIO_Init+0x21a>
 8003086:	2309      	movs	r3, #9
 8003088:	e012      	b.n	80030b0 <HAL_GPIO_Init+0x240>
 800308a:	230a      	movs	r3, #10
 800308c:	e010      	b.n	80030b0 <HAL_GPIO_Init+0x240>
 800308e:	2308      	movs	r3, #8
 8003090:	e00e      	b.n	80030b0 <HAL_GPIO_Init+0x240>
 8003092:	2307      	movs	r3, #7
 8003094:	e00c      	b.n	80030b0 <HAL_GPIO_Init+0x240>
 8003096:	2306      	movs	r3, #6
 8003098:	e00a      	b.n	80030b0 <HAL_GPIO_Init+0x240>
 800309a:	2305      	movs	r3, #5
 800309c:	e008      	b.n	80030b0 <HAL_GPIO_Init+0x240>
 800309e:	2304      	movs	r3, #4
 80030a0:	e006      	b.n	80030b0 <HAL_GPIO_Init+0x240>
 80030a2:	2303      	movs	r3, #3
 80030a4:	e004      	b.n	80030b0 <HAL_GPIO_Init+0x240>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e002      	b.n	80030b0 <HAL_GPIO_Init+0x240>
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <HAL_GPIO_Init+0x240>
 80030ae:	2300      	movs	r3, #0
 80030b0:	69fa      	ldr	r2, [r7, #28]
 80030b2:	f002 0203 	and.w	r2, r2, #3
 80030b6:	0092      	lsls	r2, r2, #2
 80030b8:	4093      	lsls	r3, r2
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80030c0:	4935      	ldr	r1, [pc, #212]	@ (8003198 <HAL_GPIO_Init+0x328>)
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	089b      	lsrs	r3, r3, #2
 80030c6:	3302      	adds	r3, #2
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030ce:	4b3d      	ldr	r3, [pc, #244]	@ (80031c4 <HAL_GPIO_Init+0x354>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	43db      	mvns	r3, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4013      	ands	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030f2:	4a34      	ldr	r2, [pc, #208]	@ (80031c4 <HAL_GPIO_Init+0x354>)
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030f8:	4b32      	ldr	r3, [pc, #200]	@ (80031c4 <HAL_GPIO_Init+0x354>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	43db      	mvns	r3, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4013      	ands	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800311c:	4a29      	ldr	r2, [pc, #164]	@ (80031c4 <HAL_GPIO_Init+0x354>)
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003122:	4b28      	ldr	r3, [pc, #160]	@ (80031c4 <HAL_GPIO_Init+0x354>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	43db      	mvns	r3, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4013      	ands	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003146:	4a1f      	ldr	r2, [pc, #124]	@ (80031c4 <HAL_GPIO_Init+0x354>)
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800314c:	4b1d      	ldr	r3, [pc, #116]	@ (80031c4 <HAL_GPIO_Init+0x354>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	43db      	mvns	r3, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4013      	ands	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4313      	orrs	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003170:	4a14      	ldr	r2, [pc, #80]	@ (80031c4 <HAL_GPIO_Init+0x354>)
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	3301      	adds	r3, #1
 800317a:	61fb      	str	r3, [r7, #28]
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	2b0f      	cmp	r3, #15
 8003180:	f67f ae86 	bls.w	8002e90 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003184:	bf00      	nop
 8003186:	bf00      	nop
 8003188:	3724      	adds	r7, #36	@ 0x24
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	40023800 	.word	0x40023800
 8003198:	40013800 	.word	0x40013800
 800319c:	40020000 	.word	0x40020000
 80031a0:	40020400 	.word	0x40020400
 80031a4:	40020800 	.word	0x40020800
 80031a8:	40020c00 	.word	0x40020c00
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40021400 	.word	0x40021400
 80031b4:	40021800 	.word	0x40021800
 80031b8:	40021c00 	.word	0x40021c00
 80031bc:	40022000 	.word	0x40022000
 80031c0:	40022400 	.word	0x40022400
 80031c4:	40013c00 	.word	0x40013c00

080031c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	807b      	strh	r3, [r7, #2]
 80031d4:	4613      	mov	r3, r2
 80031d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031d8:	787b      	ldrb	r3, [r7, #1]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031de:	887a      	ldrh	r2, [r7, #2]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80031e4:	e003      	b.n	80031ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80031e6:	887b      	ldrh	r3, [r7, #2]
 80031e8:	041a      	lsls	r2, r3, #16
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	619a      	str	r2, [r3, #24]
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
	...

080031fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003206:	4b23      	ldr	r3, [pc, #140]	@ (8003294 <HAL_PWREx_EnableOverDrive+0x98>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	4a22      	ldr	r2, [pc, #136]	@ (8003294 <HAL_PWREx_EnableOverDrive+0x98>)
 800320c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003210:	6413      	str	r3, [r2, #64]	@ 0x40
 8003212:	4b20      	ldr	r3, [pc, #128]	@ (8003294 <HAL_PWREx_EnableOverDrive+0x98>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800321e:	4b1e      	ldr	r3, [pc, #120]	@ (8003298 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1d      	ldr	r2, [pc, #116]	@ (8003298 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003228:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800322a:	f7fe f8ff 	bl	800142c <HAL_GetTick>
 800322e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003230:	e009      	b.n	8003246 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003232:	f7fe f8fb 	bl	800142c <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003240:	d901      	bls.n	8003246 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e022      	b.n	800328c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003246:	4b14      	ldr	r3, [pc, #80]	@ (8003298 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800324e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003252:	d1ee      	bne.n	8003232 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003254:	4b10      	ldr	r3, [pc, #64]	@ (8003298 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a0f      	ldr	r2, [pc, #60]	@ (8003298 <HAL_PWREx_EnableOverDrive+0x9c>)
 800325a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800325e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003260:	f7fe f8e4 	bl	800142c <HAL_GetTick>
 8003264:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003266:	e009      	b.n	800327c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003268:	f7fe f8e0 	bl	800142c <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003276:	d901      	bls.n	800327c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e007      	b.n	800328c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800327c:	4b06      	ldr	r3, [pc, #24]	@ (8003298 <HAL_PWREx_EnableOverDrive+0x9c>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003284:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003288:	d1ee      	bne.n	8003268 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40023800 	.word	0x40023800
 8003298:	40007000 	.word	0x40007000

0800329c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80032a4:	2300      	movs	r3, #0
 80032a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e29b      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 8087 	beq.w	80033ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032c0:	4b96      	ldr	r3, [pc, #600]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 030c 	and.w	r3, r3, #12
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d00c      	beq.n	80032e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032cc:	4b93      	ldr	r3, [pc, #588]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 030c 	and.w	r3, r3, #12
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d112      	bne.n	80032fe <HAL_RCC_OscConfig+0x62>
 80032d8:	4b90      	ldr	r3, [pc, #576]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032e4:	d10b      	bne.n	80032fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e6:	4b8d      	ldr	r3, [pc, #564]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d06c      	beq.n	80033cc <HAL_RCC_OscConfig+0x130>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d168      	bne.n	80033cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e275      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003306:	d106      	bne.n	8003316 <HAL_RCC_OscConfig+0x7a>
 8003308:	4b84      	ldr	r3, [pc, #528]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a83      	ldr	r2, [pc, #524]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 800330e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	e02e      	b.n	8003374 <HAL_RCC_OscConfig+0xd8>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0x9c>
 800331e:	4b7f      	ldr	r3, [pc, #508]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a7e      	ldr	r2, [pc, #504]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 8003324:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	4b7c      	ldr	r3, [pc, #496]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a7b      	ldr	r2, [pc, #492]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 8003330:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e01d      	b.n	8003374 <HAL_RCC_OscConfig+0xd8>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003340:	d10c      	bne.n	800335c <HAL_RCC_OscConfig+0xc0>
 8003342:	4b76      	ldr	r3, [pc, #472]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a75      	ldr	r2, [pc, #468]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 8003348:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	4b73      	ldr	r3, [pc, #460]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a72      	ldr	r2, [pc, #456]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 8003354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e00b      	b.n	8003374 <HAL_RCC_OscConfig+0xd8>
 800335c:	4b6f      	ldr	r3, [pc, #444]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a6e      	ldr	r2, [pc, #440]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 8003362:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	4b6c      	ldr	r3, [pc, #432]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a6b      	ldr	r2, [pc, #428]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 800336e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d013      	beq.n	80033a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337c:	f7fe f856 	bl	800142c <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003384:	f7fe f852 	bl	800142c <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b64      	cmp	r3, #100	@ 0x64
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e229      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003396:	4b61      	ldr	r3, [pc, #388]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0xe8>
 80033a2:	e014      	b.n	80033ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a4:	f7fe f842 	bl	800142c <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ac:	f7fe f83e 	bl	800142c <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b64      	cmp	r3, #100	@ 0x64
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e215      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033be:	4b57      	ldr	r3, [pc, #348]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x110>
 80033ca:	e000      	b.n	80033ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d069      	beq.n	80034ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033da:	4b50      	ldr	r3, [pc, #320]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00b      	beq.n	80033fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033e6:	4b4d      	ldr	r3, [pc, #308]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d11c      	bne.n	800342c <HAL_RCC_OscConfig+0x190>
 80033f2:	4b4a      	ldr	r3, [pc, #296]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d116      	bne.n	800342c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fe:	4b47      	ldr	r3, [pc, #284]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <HAL_RCC_OscConfig+0x17a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d001      	beq.n	8003416 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e1e9      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003416:	4b41      	ldr	r3, [pc, #260]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	493d      	ldr	r1, [pc, #244]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342a:	e040      	b.n	80034ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d023      	beq.n	800347c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003434:	4b39      	ldr	r3, [pc, #228]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a38      	ldr	r2, [pc, #224]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fd fff4 	bl	800142c <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003448:	f7fd fff0 	bl	800142c <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e1c7      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345a:	4b30      	ldr	r3, [pc, #192]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003466:	4b2d      	ldr	r3, [pc, #180]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4929      	ldr	r1, [pc, #164]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 8003476:	4313      	orrs	r3, r2
 8003478:	600b      	str	r3, [r1, #0]
 800347a:	e018      	b.n	80034ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800347c:	4b27      	ldr	r3, [pc, #156]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a26      	ldr	r2, [pc, #152]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 8003482:	f023 0301 	bic.w	r3, r3, #1
 8003486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fd ffd0 	bl	800142c <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003490:	f7fd ffcc 	bl	800142c <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e1a3      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a2:	4b1e      	ldr	r3, [pc, #120]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d038      	beq.n	800352c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d019      	beq.n	80034f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034c2:	4b16      	ldr	r3, [pc, #88]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 80034c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034c6:	4a15      	ldr	r2, [pc, #84]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ce:	f7fd ffad 	bl	800142c <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d6:	f7fd ffa9 	bl	800142c <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e180      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e8:	4b0c      	ldr	r3, [pc, #48]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 80034ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0f0      	beq.n	80034d6 <HAL_RCC_OscConfig+0x23a>
 80034f4:	e01a      	b.n	800352c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034f6:	4b09      	ldr	r3, [pc, #36]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 80034f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034fa:	4a08      	ldr	r2, [pc, #32]	@ (800351c <HAL_RCC_OscConfig+0x280>)
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003502:	f7fd ff93 	bl	800142c <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003508:	e00a      	b.n	8003520 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800350a:	f7fd ff8f 	bl	800142c <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d903      	bls.n	8003520 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e166      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
 800351c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003520:	4b92      	ldr	r3, [pc, #584]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 8003522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1ee      	bne.n	800350a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 80a4 	beq.w	8003682 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800353a:	4b8c      	ldr	r3, [pc, #560]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10d      	bne.n	8003562 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003546:	4b89      	ldr	r3, [pc, #548]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354a:	4a88      	ldr	r2, [pc, #544]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 800354c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003550:	6413      	str	r3, [r2, #64]	@ 0x40
 8003552:	4b86      	ldr	r3, [pc, #536]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800355e:	2301      	movs	r3, #1
 8003560:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003562:	4b83      	ldr	r3, [pc, #524]	@ (8003770 <HAL_RCC_OscConfig+0x4d4>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356a:	2b00      	cmp	r3, #0
 800356c:	d118      	bne.n	80035a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800356e:	4b80      	ldr	r3, [pc, #512]	@ (8003770 <HAL_RCC_OscConfig+0x4d4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a7f      	ldr	r2, [pc, #508]	@ (8003770 <HAL_RCC_OscConfig+0x4d4>)
 8003574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800357a:	f7fd ff57 	bl	800142c <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003582:	f7fd ff53 	bl	800142c <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b64      	cmp	r3, #100	@ 0x64
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e12a      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003594:	4b76      	ldr	r3, [pc, #472]	@ (8003770 <HAL_RCC_OscConfig+0x4d4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0f0      	beq.n	8003582 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d106      	bne.n	80035b6 <HAL_RCC_OscConfig+0x31a>
 80035a8:	4b70      	ldr	r3, [pc, #448]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 80035aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ac:	4a6f      	ldr	r2, [pc, #444]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 80035ae:	f043 0301 	orr.w	r3, r3, #1
 80035b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80035b4:	e02d      	b.n	8003612 <HAL_RCC_OscConfig+0x376>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10c      	bne.n	80035d8 <HAL_RCC_OscConfig+0x33c>
 80035be:	4b6b      	ldr	r3, [pc, #428]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 80035c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c2:	4a6a      	ldr	r2, [pc, #424]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 80035c4:	f023 0301 	bic.w	r3, r3, #1
 80035c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ca:	4b68      	ldr	r3, [pc, #416]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 80035cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ce:	4a67      	ldr	r2, [pc, #412]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 80035d0:	f023 0304 	bic.w	r3, r3, #4
 80035d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80035d6:	e01c      	b.n	8003612 <HAL_RCC_OscConfig+0x376>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2b05      	cmp	r3, #5
 80035de:	d10c      	bne.n	80035fa <HAL_RCC_OscConfig+0x35e>
 80035e0:	4b62      	ldr	r3, [pc, #392]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 80035e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e4:	4a61      	ldr	r2, [pc, #388]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 80035e6:	f043 0304 	orr.w	r3, r3, #4
 80035ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ec:	4b5f      	ldr	r3, [pc, #380]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 80035ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f0:	4a5e      	ldr	r2, [pc, #376]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 80035f2:	f043 0301 	orr.w	r3, r3, #1
 80035f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80035f8:	e00b      	b.n	8003612 <HAL_RCC_OscConfig+0x376>
 80035fa:	4b5c      	ldr	r3, [pc, #368]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fe:	4a5b      	ldr	r2, [pc, #364]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 8003600:	f023 0301 	bic.w	r3, r3, #1
 8003604:	6713      	str	r3, [r2, #112]	@ 0x70
 8003606:	4b59      	ldr	r3, [pc, #356]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800360a:	4a58      	ldr	r2, [pc, #352]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 800360c:	f023 0304 	bic.w	r3, r3, #4
 8003610:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d015      	beq.n	8003646 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361a:	f7fd ff07 	bl	800142c <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003620:	e00a      	b.n	8003638 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003622:	f7fd ff03 	bl	800142c <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003630:	4293      	cmp	r3, r2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e0d8      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003638:	4b4c      	ldr	r3, [pc, #304]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 800363a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0ee      	beq.n	8003622 <HAL_RCC_OscConfig+0x386>
 8003644:	e014      	b.n	8003670 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003646:	f7fd fef1 	bl	800142c <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800364c:	e00a      	b.n	8003664 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364e:	f7fd feed 	bl	800142c <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800365c:	4293      	cmp	r3, r2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e0c2      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003664:	4b41      	ldr	r3, [pc, #260]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1ee      	bne.n	800364e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003670:	7dfb      	ldrb	r3, [r7, #23]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d105      	bne.n	8003682 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003676:	4b3d      	ldr	r3, [pc, #244]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367a:	4a3c      	ldr	r2, [pc, #240]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 800367c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003680:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 80ae 	beq.w	80037e8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800368c:	4b37      	ldr	r3, [pc, #220]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 030c 	and.w	r3, r3, #12
 8003694:	2b08      	cmp	r3, #8
 8003696:	d06d      	beq.n	8003774 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	2b02      	cmp	r3, #2
 800369e:	d14b      	bne.n	8003738 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a0:	4b32      	ldr	r3, [pc, #200]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a31      	ldr	r2, [pc, #196]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 80036a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7fd febe 	bl	800142c <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b4:	f7fd feba 	bl	800142c <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e091      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c6:	4b29      	ldr	r3, [pc, #164]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69da      	ldr	r2, [r3, #28]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e0:	019b      	lsls	r3, r3, #6
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e8:	085b      	lsrs	r3, r3, #1
 80036ea:	3b01      	subs	r3, #1
 80036ec:	041b      	lsls	r3, r3, #16
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f4:	061b      	lsls	r3, r3, #24
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fc:	071b      	lsls	r3, r3, #28
 80036fe:	491b      	ldr	r1, [pc, #108]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 8003700:	4313      	orrs	r3, r2
 8003702:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003704:	4b19      	ldr	r3, [pc, #100]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a18      	ldr	r2, [pc, #96]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 800370a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800370e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003710:	f7fd fe8c 	bl	800142c <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003718:	f7fd fe88 	bl	800142c <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e05f      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372a:	4b10      	ldr	r3, [pc, #64]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCC_OscConfig+0x47c>
 8003736:	e057      	b.n	80037e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003738:	4b0c      	ldr	r3, [pc, #48]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a0b      	ldr	r2, [pc, #44]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 800373e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fd fe72 	bl	800142c <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374c:	f7fd fe6e 	bl	800142c <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e045      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375e:	4b03      	ldr	r3, [pc, #12]	@ (800376c <HAL_RCC_OscConfig+0x4d0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x4b0>
 800376a:	e03d      	b.n	80037e8 <HAL_RCC_OscConfig+0x54c>
 800376c:	40023800 	.word	0x40023800
 8003770:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003774:	4b1f      	ldr	r3, [pc, #124]	@ (80037f4 <HAL_RCC_OscConfig+0x558>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d030      	beq.n	80037e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800378c:	429a      	cmp	r2, r3
 800378e:	d129      	bne.n	80037e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379a:	429a      	cmp	r2, r3
 800379c:	d122      	bne.n	80037e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037a4:	4013      	ands	r3, r2
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d119      	bne.n	80037e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ba:	085b      	lsrs	r3, r3, #1
 80037bc:	3b01      	subs	r3, #1
 80037be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d10f      	bne.n	80037e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d107      	bne.n	80037e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037de:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800

080037f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003802:	2300      	movs	r3, #0
 8003804:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0d0      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003810:	4b6a      	ldr	r3, [pc, #424]	@ (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d910      	bls.n	8003840 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381e:	4b67      	ldr	r3, [pc, #412]	@ (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f023 020f 	bic.w	r2, r3, #15
 8003826:	4965      	ldr	r1, [pc, #404]	@ (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	4313      	orrs	r3, r2
 800382c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800382e:	4b63      	ldr	r3, [pc, #396]	@ (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d001      	beq.n	8003840 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e0b8      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d020      	beq.n	800388e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003858:	4b59      	ldr	r3, [pc, #356]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4a58      	ldr	r2, [pc, #352]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 800385e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003862:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0308 	and.w	r3, r3, #8
 800386c:	2b00      	cmp	r3, #0
 800386e:	d005      	beq.n	800387c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003870:	4b53      	ldr	r3, [pc, #332]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	4a52      	ldr	r2, [pc, #328]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003876:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800387a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800387c:	4b50      	ldr	r3, [pc, #320]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	494d      	ldr	r1, [pc, #308]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 800388a:	4313      	orrs	r3, r2
 800388c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d040      	beq.n	800391c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d107      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a2:	4b47      	ldr	r3, [pc, #284]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d115      	bne.n	80038da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e07f      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d107      	bne.n	80038ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ba:	4b41      	ldr	r3, [pc, #260]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e073      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ca:	4b3d      	ldr	r3, [pc, #244]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e06b      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038da:	4b39      	ldr	r3, [pc, #228]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f023 0203 	bic.w	r2, r3, #3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	4936      	ldr	r1, [pc, #216]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ec:	f7fd fd9e 	bl	800142c <HAL_GetTick>
 80038f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f2:	e00a      	b.n	800390a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f4:	f7fd fd9a 	bl	800142c <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003902:	4293      	cmp	r3, r2
 8003904:	d901      	bls.n	800390a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e053      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390a:	4b2d      	ldr	r3, [pc, #180]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 020c 	and.w	r2, r3, #12
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	429a      	cmp	r2, r3
 800391a:	d1eb      	bne.n	80038f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800391c:	4b27      	ldr	r3, [pc, #156]	@ (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d210      	bcs.n	800394c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392a:	4b24      	ldr	r3, [pc, #144]	@ (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 020f 	bic.w	r2, r3, #15
 8003932:	4922      	ldr	r1, [pc, #136]	@ (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	4313      	orrs	r3, r2
 8003938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800393a:	4b20      	ldr	r3, [pc, #128]	@ (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	d001      	beq.n	800394c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e032      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003958:	4b19      	ldr	r3, [pc, #100]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	4916      	ldr	r1, [pc, #88]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003966:	4313      	orrs	r3, r2
 8003968:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d009      	beq.n	800398a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003976:	4b12      	ldr	r3, [pc, #72]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	490e      	ldr	r1, [pc, #56]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003986:	4313      	orrs	r3, r2
 8003988:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800398a:	f000 f821 	bl	80039d0 <HAL_RCC_GetSysClockFreq>
 800398e:	4602      	mov	r2, r0
 8003990:	4b0b      	ldr	r3, [pc, #44]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	091b      	lsrs	r3, r3, #4
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	490a      	ldr	r1, [pc, #40]	@ (80039c4 <HAL_RCC_ClockConfig+0x1cc>)
 800399c:	5ccb      	ldrb	r3, [r1, r3]
 800399e:	fa22 f303 	lsr.w	r3, r2, r3
 80039a2:	4a09      	ldr	r2, [pc, #36]	@ (80039c8 <HAL_RCC_ClockConfig+0x1d0>)
 80039a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039a6:	4b09      	ldr	r3, [pc, #36]	@ (80039cc <HAL_RCC_ClockConfig+0x1d4>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fd fcfa 	bl	80013a4 <HAL_InitTick>

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40023c00 	.word	0x40023c00
 80039c0:	40023800 	.word	0x40023800
 80039c4:	08004298 	.word	0x08004298
 80039c8:	20000000 	.word	0x20000000
 80039cc:	20000004 	.word	0x20000004

080039d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039d4:	b090      	sub	sp, #64	@ 0x40
 80039d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	637b      	str	r3, [r7, #52]	@ 0x34
 80039dc:	2300      	movs	r3, #0
 80039de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039e0:	2300      	movs	r3, #0
 80039e2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039e8:	4b59      	ldr	r3, [pc, #356]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x180>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 030c 	and.w	r3, r3, #12
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d00d      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0x40>
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	f200 80a1 	bhi.w	8003b3c <HAL_RCC_GetSysClockFreq+0x16c>
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <HAL_RCC_GetSysClockFreq+0x34>
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d003      	beq.n	8003a0a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a02:	e09b      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a04:	4b53      	ldr	r3, [pc, #332]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a06:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a08:	e09b      	b.n	8003b42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a0a:	4b53      	ldr	r3, [pc, #332]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a0e:	e098      	b.n	8003b42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a10:	4b4f      	ldr	r3, [pc, #316]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a18:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a1a:	4b4d      	ldr	r3, [pc, #308]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d028      	beq.n	8003a78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a26:	4b4a      	ldr	r3, [pc, #296]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	099b      	lsrs	r3, r3, #6
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	623b      	str	r3, [r7, #32]
 8003a30:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a38:	2100      	movs	r1, #0
 8003a3a:	4b47      	ldr	r3, [pc, #284]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a3c:	fb03 f201 	mul.w	r2, r3, r1
 8003a40:	2300      	movs	r3, #0
 8003a42:	fb00 f303 	mul.w	r3, r0, r3
 8003a46:	4413      	add	r3, r2
 8003a48:	4a43      	ldr	r2, [pc, #268]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a4a:	fba0 1202 	umull	r1, r2, r0, r2
 8003a4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a50:	460a      	mov	r2, r1
 8003a52:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003a54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a56:	4413      	add	r3, r2
 8003a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	61bb      	str	r3, [r7, #24]
 8003a60:	61fa      	str	r2, [r7, #28]
 8003a62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003a6a:	f7fc fbe5 	bl	8000238 <__aeabi_uldivmod>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4613      	mov	r3, r2
 8003a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a76:	e053      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a78:	4b35      	ldr	r3, [pc, #212]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	099b      	lsrs	r3, r3, #6
 8003a7e:	2200      	movs	r2, #0
 8003a80:	613b      	str	r3, [r7, #16]
 8003a82:	617a      	str	r2, [r7, #20]
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a8a:	f04f 0b00 	mov.w	fp, #0
 8003a8e:	4652      	mov	r2, sl
 8003a90:	465b      	mov	r3, fp
 8003a92:	f04f 0000 	mov.w	r0, #0
 8003a96:	f04f 0100 	mov.w	r1, #0
 8003a9a:	0159      	lsls	r1, r3, #5
 8003a9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aa0:	0150      	lsls	r0, r2, #5
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	ebb2 080a 	subs.w	r8, r2, sl
 8003aaa:	eb63 090b 	sbc.w	r9, r3, fp
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	f04f 0300 	mov.w	r3, #0
 8003ab6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003aba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003abe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ac2:	ebb2 0408 	subs.w	r4, r2, r8
 8003ac6:	eb63 0509 	sbc.w	r5, r3, r9
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	00eb      	lsls	r3, r5, #3
 8003ad4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ad8:	00e2      	lsls	r2, r4, #3
 8003ada:	4614      	mov	r4, r2
 8003adc:	461d      	mov	r5, r3
 8003ade:	eb14 030a 	adds.w	r3, r4, sl
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	eb45 030b 	adc.w	r3, r5, fp
 8003ae8:	607b      	str	r3, [r7, #4]
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003af6:	4629      	mov	r1, r5
 8003af8:	028b      	lsls	r3, r1, #10
 8003afa:	4621      	mov	r1, r4
 8003afc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b00:	4621      	mov	r1, r4
 8003b02:	028a      	lsls	r2, r1, #10
 8003b04:	4610      	mov	r0, r2
 8003b06:	4619      	mov	r1, r3
 8003b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	60fa      	str	r2, [r7, #12]
 8003b10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b14:	f7fc fb90 	bl	8000238 <__aeabi_uldivmod>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b20:	4b0b      	ldr	r3, [pc, #44]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	0c1b      	lsrs	r3, r3, #16
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003b30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b38:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b3a:	e002      	b.n	8003b42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b3c:	4b05      	ldr	r3, [pc, #20]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3740      	adds	r7, #64	@ 0x40
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b4e:	bf00      	nop
 8003b50:	40023800 	.word	0x40023800
 8003b54:	00f42400 	.word	0x00f42400
 8003b58:	017d7840 	.word	0x017d7840

08003b5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e049      	b.n	8003c02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fd fb44 	bl	8001210 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3304      	adds	r3, #4
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	f000 f970 	bl	8003e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d001      	beq.n	8003c24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e04c      	b.n	8003cbe <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a26      	ldr	r2, [pc, #152]	@ (8003ccc <HAL_TIM_Base_Start+0xc0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d022      	beq.n	8003c7c <HAL_TIM_Base_Start+0x70>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c3e:	d01d      	beq.n	8003c7c <HAL_TIM_Base_Start+0x70>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a22      	ldr	r2, [pc, #136]	@ (8003cd0 <HAL_TIM_Base_Start+0xc4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d018      	beq.n	8003c7c <HAL_TIM_Base_Start+0x70>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a21      	ldr	r2, [pc, #132]	@ (8003cd4 <HAL_TIM_Base_Start+0xc8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d013      	beq.n	8003c7c <HAL_TIM_Base_Start+0x70>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a1f      	ldr	r2, [pc, #124]	@ (8003cd8 <HAL_TIM_Base_Start+0xcc>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00e      	beq.n	8003c7c <HAL_TIM_Base_Start+0x70>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a1e      	ldr	r2, [pc, #120]	@ (8003cdc <HAL_TIM_Base_Start+0xd0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d009      	beq.n	8003c7c <HAL_TIM_Base_Start+0x70>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ce0 <HAL_TIM_Base_Start+0xd4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d004      	beq.n	8003c7c <HAL_TIM_Base_Start+0x70>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a1b      	ldr	r2, [pc, #108]	@ (8003ce4 <HAL_TIM_Base_Start+0xd8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d115      	bne.n	8003ca8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	4b19      	ldr	r3, [pc, #100]	@ (8003ce8 <HAL_TIM_Base_Start+0xdc>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b06      	cmp	r3, #6
 8003c8c:	d015      	beq.n	8003cba <HAL_TIM_Base_Start+0xae>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c94:	d011      	beq.n	8003cba <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f042 0201 	orr.w	r2, r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca6:	e008      	b.n	8003cba <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	e000      	b.n	8003cbc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40010000 	.word	0x40010000
 8003cd0:	40000400 	.word	0x40000400
 8003cd4:	40000800 	.word	0x40000800
 8003cd8:	40000c00 	.word	0x40000c00
 8003cdc:	40010400 	.word	0x40010400
 8003ce0:	40014000 	.word	0x40014000
 8003ce4:	40001800 	.word	0x40001800
 8003ce8:	00010007 	.word	0x00010007

08003cec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_TIM_ConfigClockSource+0x1c>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e0b4      	b.n	8003e72 <HAL_TIM_ConfigClockSource+0x186>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	4b56      	ldr	r3, [pc, #344]	@ (8003e7c <HAL_TIM_ConfigClockSource+0x190>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d40:	d03e      	beq.n	8003dc0 <HAL_TIM_ConfigClockSource+0xd4>
 8003d42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d46:	f200 8087 	bhi.w	8003e58 <HAL_TIM_ConfigClockSource+0x16c>
 8003d4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d4e:	f000 8086 	beq.w	8003e5e <HAL_TIM_ConfigClockSource+0x172>
 8003d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d56:	d87f      	bhi.n	8003e58 <HAL_TIM_ConfigClockSource+0x16c>
 8003d58:	2b70      	cmp	r3, #112	@ 0x70
 8003d5a:	d01a      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0xa6>
 8003d5c:	2b70      	cmp	r3, #112	@ 0x70
 8003d5e:	d87b      	bhi.n	8003e58 <HAL_TIM_ConfigClockSource+0x16c>
 8003d60:	2b60      	cmp	r3, #96	@ 0x60
 8003d62:	d050      	beq.n	8003e06 <HAL_TIM_ConfigClockSource+0x11a>
 8003d64:	2b60      	cmp	r3, #96	@ 0x60
 8003d66:	d877      	bhi.n	8003e58 <HAL_TIM_ConfigClockSource+0x16c>
 8003d68:	2b50      	cmp	r3, #80	@ 0x50
 8003d6a:	d03c      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0xfa>
 8003d6c:	2b50      	cmp	r3, #80	@ 0x50
 8003d6e:	d873      	bhi.n	8003e58 <HAL_TIM_ConfigClockSource+0x16c>
 8003d70:	2b40      	cmp	r3, #64	@ 0x40
 8003d72:	d058      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0x13a>
 8003d74:	2b40      	cmp	r3, #64	@ 0x40
 8003d76:	d86f      	bhi.n	8003e58 <HAL_TIM_ConfigClockSource+0x16c>
 8003d78:	2b30      	cmp	r3, #48	@ 0x30
 8003d7a:	d064      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0x15a>
 8003d7c:	2b30      	cmp	r3, #48	@ 0x30
 8003d7e:	d86b      	bhi.n	8003e58 <HAL_TIM_ConfigClockSource+0x16c>
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d060      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0x15a>
 8003d84:	2b20      	cmp	r3, #32
 8003d86:	d867      	bhi.n	8003e58 <HAL_TIM_ConfigClockSource+0x16c>
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d05c      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0x15a>
 8003d8c:	2b10      	cmp	r3, #16
 8003d8e:	d05a      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0x15a>
 8003d90:	e062      	b.n	8003e58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003da2:	f000 f993 	bl	80040cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003db4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	609a      	str	r2, [r3, #8]
      break;
 8003dbe:	e04f      	b.n	8003e60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dd0:	f000 f97c 	bl	80040cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003de2:	609a      	str	r2, [r3, #8]
      break;
 8003de4:	e03c      	b.n	8003e60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003df2:	461a      	mov	r2, r3
 8003df4:	f000 f8f0 	bl	8003fd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2150      	movs	r1, #80	@ 0x50
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 f949 	bl	8004096 <TIM_ITRx_SetConfig>
      break;
 8003e04:	e02c      	b.n	8003e60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e12:	461a      	mov	r2, r3
 8003e14:	f000 f90f 	bl	8004036 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2160      	movs	r1, #96	@ 0x60
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 f939 	bl	8004096 <TIM_ITRx_SetConfig>
      break;
 8003e24:	e01c      	b.n	8003e60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e32:	461a      	mov	r2, r3
 8003e34:	f000 f8d0 	bl	8003fd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2140      	movs	r1, #64	@ 0x40
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 f929 	bl	8004096 <TIM_ITRx_SetConfig>
      break;
 8003e44:	e00c      	b.n	8003e60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4610      	mov	r0, r2
 8003e52:	f000 f920 	bl	8004096 <TIM_ITRx_SetConfig>
      break;
 8003e56:	e003      	b.n	8003e60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e5c:	e000      	b.n	8003e60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	fffeff88 	.word	0xfffeff88

08003e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a46      	ldr	r2, [pc, #280]	@ (8003fac <TIM_Base_SetConfig+0x12c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d013      	beq.n	8003ec0 <TIM_Base_SetConfig+0x40>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e9e:	d00f      	beq.n	8003ec0 <TIM_Base_SetConfig+0x40>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a43      	ldr	r2, [pc, #268]	@ (8003fb0 <TIM_Base_SetConfig+0x130>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00b      	beq.n	8003ec0 <TIM_Base_SetConfig+0x40>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a42      	ldr	r2, [pc, #264]	@ (8003fb4 <TIM_Base_SetConfig+0x134>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d007      	beq.n	8003ec0 <TIM_Base_SetConfig+0x40>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a41      	ldr	r2, [pc, #260]	@ (8003fb8 <TIM_Base_SetConfig+0x138>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d003      	beq.n	8003ec0 <TIM_Base_SetConfig+0x40>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a40      	ldr	r2, [pc, #256]	@ (8003fbc <TIM_Base_SetConfig+0x13c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d108      	bne.n	8003ed2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a35      	ldr	r2, [pc, #212]	@ (8003fac <TIM_Base_SetConfig+0x12c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d02b      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ee0:	d027      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a32      	ldr	r2, [pc, #200]	@ (8003fb0 <TIM_Base_SetConfig+0x130>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d023      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a31      	ldr	r2, [pc, #196]	@ (8003fb4 <TIM_Base_SetConfig+0x134>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d01f      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a30      	ldr	r2, [pc, #192]	@ (8003fb8 <TIM_Base_SetConfig+0x138>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d01b      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a2f      	ldr	r2, [pc, #188]	@ (8003fbc <TIM_Base_SetConfig+0x13c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d017      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a2e      	ldr	r2, [pc, #184]	@ (8003fc0 <TIM_Base_SetConfig+0x140>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d013      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8003fc4 <TIM_Base_SetConfig+0x144>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00f      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a2c      	ldr	r2, [pc, #176]	@ (8003fc8 <TIM_Base_SetConfig+0x148>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d00b      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8003fcc <TIM_Base_SetConfig+0x14c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d007      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a2a      	ldr	r2, [pc, #168]	@ (8003fd0 <TIM_Base_SetConfig+0x150>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d003      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a29      	ldr	r2, [pc, #164]	@ (8003fd4 <TIM_Base_SetConfig+0x154>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d108      	bne.n	8003f44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a10      	ldr	r2, [pc, #64]	@ (8003fac <TIM_Base_SetConfig+0x12c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d003      	beq.n	8003f78 <TIM_Base_SetConfig+0xf8>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a12      	ldr	r2, [pc, #72]	@ (8003fbc <TIM_Base_SetConfig+0x13c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d103      	bne.n	8003f80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	691a      	ldr	r2, [r3, #16]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d105      	bne.n	8003f9e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	f023 0201 	bic.w	r2, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	611a      	str	r2, [r3, #16]
  }
}
 8003f9e:	bf00      	nop
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40010000 	.word	0x40010000
 8003fb0:	40000400 	.word	0x40000400
 8003fb4:	40000800 	.word	0x40000800
 8003fb8:	40000c00 	.word	0x40000c00
 8003fbc:	40010400 	.word	0x40010400
 8003fc0:	40014000 	.word	0x40014000
 8003fc4:	40014400 	.word	0x40014400
 8003fc8:	40014800 	.word	0x40014800
 8003fcc:	40001800 	.word	0x40001800
 8003fd0:	40001c00 	.word	0x40001c00
 8003fd4:	40002000 	.word	0x40002000

08003fd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	f023 0201 	bic.w	r2, r3, #1
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	4313      	orrs	r3, r2
 800400c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f023 030a 	bic.w	r3, r3, #10
 8004014:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	4313      	orrs	r3, r2
 800401c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	621a      	str	r2, [r3, #32]
}
 800402a:	bf00      	nop
 800402c:	371c      	adds	r7, #28
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004036:	b480      	push	{r7}
 8004038:	b087      	sub	sp, #28
 800403a:	af00      	add	r7, sp, #0
 800403c:	60f8      	str	r0, [r7, #12]
 800403e:	60b9      	str	r1, [r7, #8]
 8004040:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	f023 0210 	bic.w	r2, r3, #16
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004060:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	031b      	lsls	r3, r3, #12
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	4313      	orrs	r3, r2
 800406a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004072:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	621a      	str	r2, [r3, #32]
}
 800408a:	bf00      	nop
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004096:	b480      	push	{r7}
 8004098:	b085      	sub	sp, #20
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f043 0307 	orr.w	r3, r3, #7
 80040b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	609a      	str	r2, [r3, #8]
}
 80040c0:	bf00      	nop
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	021a      	lsls	r2, r3, #8
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	431a      	orrs	r2, r3
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	609a      	str	r2, [r3, #8]
}
 8004100:	bf00      	nop
 8004102:	371c      	adds	r7, #28
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004120:	2302      	movs	r3, #2
 8004122:	e06d      	b.n	8004200 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a30      	ldr	r2, [pc, #192]	@ (800420c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d004      	beq.n	8004158 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a2f      	ldr	r2, [pc, #188]	@ (8004210 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d108      	bne.n	800416a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800415e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004170:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a20      	ldr	r2, [pc, #128]	@ (800420c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d022      	beq.n	80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004196:	d01d      	beq.n	80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a1d      	ldr	r2, [pc, #116]	@ (8004214 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d018      	beq.n	80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004218 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d013      	beq.n	80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a1a      	ldr	r2, [pc, #104]	@ (800421c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d00e      	beq.n	80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a15      	ldr	r2, [pc, #84]	@ (8004210 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d009      	beq.n	80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a16      	ldr	r2, [pc, #88]	@ (8004220 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d004      	beq.n	80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a15      	ldr	r2, [pc, #84]	@ (8004224 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d10c      	bne.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	40010000 	.word	0x40010000
 8004210:	40010400 	.word	0x40010400
 8004214:	40000400 	.word	0x40000400
 8004218:	40000800 	.word	0x40000800
 800421c:	40000c00 	.word	0x40000c00
 8004220:	40014000 	.word	0x40014000
 8004224:	40001800 	.word	0x40001800

08004228 <memset>:
 8004228:	4402      	add	r2, r0
 800422a:	4603      	mov	r3, r0
 800422c:	4293      	cmp	r3, r2
 800422e:	d100      	bne.n	8004232 <memset+0xa>
 8004230:	4770      	bx	lr
 8004232:	f803 1b01 	strb.w	r1, [r3], #1
 8004236:	e7f9      	b.n	800422c <memset+0x4>

08004238 <__libc_init_array>:
 8004238:	b570      	push	{r4, r5, r6, lr}
 800423a:	4d0d      	ldr	r5, [pc, #52]	@ (8004270 <__libc_init_array+0x38>)
 800423c:	4c0d      	ldr	r4, [pc, #52]	@ (8004274 <__libc_init_array+0x3c>)
 800423e:	1b64      	subs	r4, r4, r5
 8004240:	10a4      	asrs	r4, r4, #2
 8004242:	2600      	movs	r6, #0
 8004244:	42a6      	cmp	r6, r4
 8004246:	d109      	bne.n	800425c <__libc_init_array+0x24>
 8004248:	4d0b      	ldr	r5, [pc, #44]	@ (8004278 <__libc_init_array+0x40>)
 800424a:	4c0c      	ldr	r4, [pc, #48]	@ (800427c <__libc_init_array+0x44>)
 800424c:	f000 f818 	bl	8004280 <_init>
 8004250:	1b64      	subs	r4, r4, r5
 8004252:	10a4      	asrs	r4, r4, #2
 8004254:	2600      	movs	r6, #0
 8004256:	42a6      	cmp	r6, r4
 8004258:	d105      	bne.n	8004266 <__libc_init_array+0x2e>
 800425a:	bd70      	pop	{r4, r5, r6, pc}
 800425c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004260:	4798      	blx	r3
 8004262:	3601      	adds	r6, #1
 8004264:	e7ee      	b.n	8004244 <__libc_init_array+0xc>
 8004266:	f855 3b04 	ldr.w	r3, [r5], #4
 800426a:	4798      	blx	r3
 800426c:	3601      	adds	r6, #1
 800426e:	e7f2      	b.n	8004256 <__libc_init_array+0x1e>
 8004270:	080042b8 	.word	0x080042b8
 8004274:	080042b8 	.word	0x080042b8
 8004278:	080042b8 	.word	0x080042b8
 800427c:	080042bc 	.word	0x080042bc

08004280 <_init>:
 8004280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004282:	bf00      	nop
 8004284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004286:	bc08      	pop	{r3}
 8004288:	469e      	mov	lr, r3
 800428a:	4770      	bx	lr

0800428c <_fini>:
 800428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428e:	bf00      	nop
 8004290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004292:	bc08      	pop	{r3}
 8004294:	469e      	mov	lr, r3
 8004296:	4770      	bx	lr
