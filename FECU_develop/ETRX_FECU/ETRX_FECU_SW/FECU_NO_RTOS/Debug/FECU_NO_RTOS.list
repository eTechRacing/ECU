
FECU_NO_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e24  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800301c  0800301c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800302c  0800302c  00005024  2**0
                  CONTENTS
  4 .ARM          00000008  0800302c  0800302c  0000402c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003034  08003034  00005024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003034  08003034  00004034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003038  08003038  00004038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  0800303c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000024  08003060  00005024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08003060  000050c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000863d  00000000  00000000  00005052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad1  00000000  00000000  0000d68f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000740  00000000  00000000  0000f160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000555  00000000  00000000  0000f8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001e9b  00000000  00000000  0000fdf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000094db  00000000  00000000  00011c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f60eb  00000000  00000000  0001b16b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111256  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bdc  00000000  00000000  0011129c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  00112e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000024 	.word	0x20000024
 8000214:	00000000 	.word	0x00000000
 8000218:	08003004 	.word	0x08003004

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000028 	.word	0x20000028
 8000234:	08003004 	.word	0x08003004

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <ADC_Measure>:

#include "eTechRacingADC.h"
#include "stdlib.h"

uint16_t ADC_Measure(ADC_HandleTypeDef hadc, uint8_t CH)
{
 8000528:	b084      	sub	sp, #16
 800052a:	b580      	push	{r7, lr}
 800052c:	b086      	sub	sp, #24
 800052e:	af00      	add	r7, sp, #0
 8000530:	f107 0c20 	add.w	ip, r7, #32
 8000534:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint16_t Measure;
	ADC_ChannelConfTypeDef sConfig = {0};
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	switch (CH){
 8000544:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8000548:	2b0f      	cmp	r3, #15
 800054a:	f200 8093 	bhi.w	8000674 <ADC_Measure+0x14c>
 800054e:	a201      	add	r2, pc, #4	@ (adr r2, 8000554 <ADC_Measure+0x2c>)
 8000550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000554:	08000595 	.word	0x08000595
 8000558:	080005a3 	.word	0x080005a3
 800055c:	080005b1 	.word	0x080005b1
 8000560:	080005bf 	.word	0x080005bf
 8000564:	080005cd 	.word	0x080005cd
 8000568:	080005db 	.word	0x080005db
 800056c:	080005e9 	.word	0x080005e9
 8000570:	080005f7 	.word	0x080005f7
 8000574:	08000605 	.word	0x08000605
 8000578:	08000613 	.word	0x08000613
 800057c:	08000621 	.word	0x08000621
 8000580:	0800062f 	.word	0x0800062f
 8000584:	0800063d 	.word	0x0800063d
 8000588:	0800064b 	.word	0x0800064b
 800058c:	08000659 	.word	0x08000659
 8000590:	08000667 	.word	0x08000667
	case 0:
	  sConfig.Channel = ADC_CHANNEL_0;
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000598:	2301      	movs	r3, #1
 800059a:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800059c:	2302      	movs	r3, #2
 800059e:	60fb      	str	r3, [r7, #12]
	  break;
 80005a0:	e068      	b.n	8000674 <ADC_Measure+0x14c>
	case 1:
	  sConfig.Channel = ADC_CHANNEL_1;
 80005a2:	2301      	movs	r3, #1
 80005a4:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80005aa:	2302      	movs	r3, #2
 80005ac:	60fb      	str	r3, [r7, #12]

	  break;
 80005ae:	e061      	b.n	8000674 <ADC_Measure+0x14c>
	case 2:
	  sConfig.Channel = ADC_CHANNEL_2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 80005b4:	2301      	movs	r3, #1
 80005b6:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80005b8:	2302      	movs	r3, #2
 80005ba:	60fb      	str	r3, [r7, #12]

	  break;
 80005bc:	e05a      	b.n	8000674 <ADC_Measure+0x14c>
		case 3:
	  sConfig.Channel = ADC_CHANNEL_3;
 80005be:	2303      	movs	r3, #3
 80005c0:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 80005c2:	2301      	movs	r3, #1
 80005c4:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80005c6:	2302      	movs	r3, #2
 80005c8:	60fb      	str	r3, [r7, #12]

	  break;
 80005ca:	e053      	b.n	8000674 <ADC_Measure+0x14c>
		case 4:
	  sConfig.Channel = ADC_CHANNEL_4;
 80005cc:	2304      	movs	r3, #4
 80005ce:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 80005d0:	2301      	movs	r3, #1
 80005d2:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80005d4:	2302      	movs	r3, #2
 80005d6:	60fb      	str	r3, [r7, #12]
	  break;
 80005d8:	e04c      	b.n	8000674 <ADC_Measure+0x14c>
		case 5:
	  sConfig.Channel = ADC_CHANNEL_5;
 80005da:	2305      	movs	r3, #5
 80005dc:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 80005de:	2301      	movs	r3, #1
 80005e0:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80005e2:	2302      	movs	r3, #2
 80005e4:	60fb      	str	r3, [r7, #12]
	  break;
 80005e6:	e045      	b.n	8000674 <ADC_Measure+0x14c>
		case 6:
	  sConfig.Channel = ADC_CHANNEL_6;
 80005e8:	2306      	movs	r3, #6
 80005ea:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 80005ec:	2301      	movs	r3, #1
 80005ee:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80005f0:	2302      	movs	r3, #2
 80005f2:	60fb      	str	r3, [r7, #12]
	  break;
 80005f4:	e03e      	b.n	8000674 <ADC_Measure+0x14c>
		case 7:
	  sConfig.Channel = ADC_CHANNEL_7;
 80005f6:	2307      	movs	r3, #7
 80005f8:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 80005fa:	2301      	movs	r3, #1
 80005fc:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80005fe:	2302      	movs	r3, #2
 8000600:	60fb      	str	r3, [r7, #12]
	  break;
 8000602:	e037      	b.n	8000674 <ADC_Measure+0x14c>
		case 8:
	  sConfig.Channel = ADC_CHANNEL_8;
 8000604:	2308      	movs	r3, #8
 8000606:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000608:	2301      	movs	r3, #1
 800060a:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800060c:	2302      	movs	r3, #2
 800060e:	60fb      	str	r3, [r7, #12]
	  break;
 8000610:	e030      	b.n	8000674 <ADC_Measure+0x14c>
		case 9:
	  sConfig.Channel = ADC_CHANNEL_9;
 8000612:	2309      	movs	r3, #9
 8000614:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000616:	2301      	movs	r3, #1
 8000618:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800061a:	2302      	movs	r3, #2
 800061c:	60fb      	str	r3, [r7, #12]
	  break;
 800061e:	e029      	b.n	8000674 <ADC_Measure+0x14c>
		case 10:
	  sConfig.Channel = ADC_CHANNEL_10;
 8000620:	230a      	movs	r3, #10
 8000622:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000624:	2301      	movs	r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000628:	2302      	movs	r3, #2
 800062a:	60fb      	str	r3, [r7, #12]
	  break;
 800062c:	e022      	b.n	8000674 <ADC_Measure+0x14c>
		case 11:
	  sConfig.Channel = ADC_CHANNEL_11;
 800062e:	230b      	movs	r3, #11
 8000630:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000632:	2301      	movs	r3, #1
 8000634:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000636:	2302      	movs	r3, #2
 8000638:	60fb      	str	r3, [r7, #12]
	  break;
 800063a:	e01b      	b.n	8000674 <ADC_Measure+0x14c>
		case 12:
	  sConfig.Channel = ADC_CHANNEL_12;
 800063c:	230c      	movs	r3, #12
 800063e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000640:	2301      	movs	r3, #1
 8000642:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000644:	2302      	movs	r3, #2
 8000646:	60fb      	str	r3, [r7, #12]
	  break;
 8000648:	e014      	b.n	8000674 <ADC_Measure+0x14c>
		case 13:
		  sConfig.Channel = ADC_CHANNEL_13;
 800064a:	230d      	movs	r3, #13
 800064c:	607b      	str	r3, [r7, #4]
		  sConfig.Rank = 1;
 800064e:	2301      	movs	r3, #1
 8000650:	60bb      	str	r3, [r7, #8]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000652:	2302      	movs	r3, #2
 8000654:	60fb      	str	r3, [r7, #12]
		  break;
 8000656:	e00d      	b.n	8000674 <ADC_Measure+0x14c>
	 case 14:
		  sConfig.Channel = ADC_CHANNEL_14;
 8000658:	230e      	movs	r3, #14
 800065a:	607b      	str	r3, [r7, #4]
		  sConfig.Rank = 1;
 800065c:	2301      	movs	r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000660:	2302      	movs	r3, #2
 8000662:	60fb      	str	r3, [r7, #12]
		  break;
 8000664:	e006      	b.n	8000674 <ADC_Measure+0x14c>
	 case 15:
		  sConfig.Channel = ADC_CHANNEL_15;
 8000666:	230f      	movs	r3, #15
 8000668:	607b      	str	r3, [r7, #4]
		  sConfig.Rank = 1;
 800066a:	2301      	movs	r3, #1
 800066c:	60bb      	str	r3, [r7, #8]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800066e:	2302      	movs	r3, #2
 8000670:	60fb      	str	r3, [r7, #12]
		  break;
 8000672:	bf00      	nop
		}

	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	4619      	mov	r1, r3
 8000678:	f107 0020 	add.w	r0, r7, #32
 800067c:	f000 ff28 	bl	80014d0 <HAL_ADC_ConfigChannel>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <ADC_Measure+0x162>
		  {
		    Error_Handler();
 8000686:	f000 fbb1 	bl	8000dec <Error_Handler>

		  }
	  	  HAL_ADC_Start(&hadc);
 800068a:	f107 0020 	add.w	r0, r7, #32
 800068e:	f000 fdb9 	bl	8001204 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc, 1000);
 8000692:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000696:	f107 0020 	add.w	r0, r7, #32
 800069a:	f000 fe81 	bl	80013a0 <HAL_ADC_PollForConversion>
		  Measure = HAL_ADC_GetValue(&hadc);
 800069e:	f107 0020 	add.w	r0, r7, #32
 80006a2:	f000 ff08 	bl	80014b6 <HAL_ADC_GetValue>
 80006a6:	4603      	mov	r3, r0
 80006a8:	82fb      	strh	r3, [r7, #22]
		  return Measure;
 80006aa:	8afb      	ldrh	r3, [r7, #22]

}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3718      	adds	r7, #24
 80006b0:	46bd      	mov	sp, r7
 80006b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006b6:	b004      	add	sp, #16
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	0000      	movs	r0, r0
	...

080006c0 <filtreLP_init>:
 */

#include "eTechRacing_Filters.h"

void filtreLP_init(filtreLP_struct *v)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
    float aux;
    aux = v->fc* v->Ts;                                  // fc*Ts (fc in kHz)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	ed93 7a04 	vldr	s14, [r3, #16]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80006d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006d8:	edc7 7a03 	vstr	s15, [r7, #12]
    aux = aux * 1000.0;                                  // Convert kHz to Hz
 80006dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80006e0:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000740 <filtreLP_init+0x80>
 80006e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006e8:	edc7 7a03 	vstr	s15, [r7, #12]
    aux = PI2 * aux;                                      // 2*pi*fc*Ts
 80006ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80006f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006f4:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 8000738 <filtreLP_init+0x78>
 80006f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000700:	edc7 7a03 	vstr	s15, [r7, #12]
    v->alfa = aux/(aux + 1.0);                            // 2*pi*fc*Ts/(2*pi*fc*Ts + 1)
 8000704:	edd7 7a03 	vldr	s15, [r7, #12]
 8000708:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800070c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000710:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000714:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8000718:	ee37 6b06 	vadd.f64	d6, d7, d6
 800071c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000720:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800072a:	bf00      	nop
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	54442d18 	.word	0x54442d18
 800073c:	401921fb 	.word	0x401921fb
 8000740:	447a0000 	.word	0x447a0000

08000744 <filtreLP_calc>:
 * @param v Pointer to the first-order filter structure.
 *
 * @note This function calculates the first-order filter.
 */
void filtreLP_calc(filtreLP_struct *v)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
    if (v->enable)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7d1b      	ldrb	r3, [r3, #20]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d015      	beq.n	8000780 <filtreLP_calc+0x3c>
    {
        v->out = (v->alfa * (v->in - v->out)) + v->out;    // Filter out(k) = alfa*in(k) + (1-alfa)*out(k-1)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	ed93 7a02 	vldr	s14, [r3, #8]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	edd3 6a00 	vldr	s13, [r3]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	edd3 7a01 	vldr	s15, [r3, #4]
 8000766:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800076a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	edd3 7a01 	vldr	s15, [r3, #4]
 8000774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	edc3 7a01 	vstr	s15, [r3, #4]
    }
    else
    {
        v->out = v->in;        // Without filter. Out(k) = In(k)
    }
}
 800077e:	e003      	b.n	8000788 <filtreLP_calc+0x44>
        v->out = v->in;        // Without filter. Out(k) = In(k)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	605a      	str	r2, [r3, #4]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <applyLowPassFilter>:

float applyLowPassFilter(float input, filtreLP_struct *filter)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	ed87 0a01 	vstr	s0, [r7, #4]
 800079e:	6038      	str	r0, [r7, #0]
    filter->in = input;     // Update the input value
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	601a      	str	r2, [r3, #0]
    filtreLP_calc(filter);  // Apply the filter
 80007a6:	6838      	ldr	r0, [r7, #0]
 80007a8:	f7ff ffcc 	bl	8000744 <filtreLP_calc>
    return filter->out;     // Return the filtered output
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	ee07 3a90 	vmov	s15, r3
}
 80007b4:	eeb0 0a67 	vmov.f32	s0, s15
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007c2:	b091      	sub	sp, #68	@ 0x44
 80007c4:	af10      	add	r7, sp, #64	@ 0x40
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007c6:	f000 fae5 	bl	8000d94 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ca:	f000 fc7a 	bl	80010c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ce:	f000 f951 	bl	8000a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d2:	f000 fa8f 	bl	8000cf4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80007d6:	f000 f9bd 	bl	8000b54 <MX_ADC1_Init>
  MX_CAN2_Init();
 80007da:	f000 fa55 	bl	8000c88 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */

  filtreLP_init(&FECULowPass);
 80007de:	489c      	ldr	r0, [pc, #624]	@ (8000a50 <main+0x290>)
 80007e0:	f7ff ff6e 	bl	80006c0 <filtreLP_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  APPS1 = ADC_Measure(hadc1, 0);
 80007e4:	4e9b      	ldr	r6, [pc, #620]	@ (8000a54 <main+0x294>)
 80007e6:	2300      	movs	r3, #0
 80007e8:	930e      	str	r3, [sp, #56]	@ 0x38
 80007ea:	466d      	mov	r5, sp
 80007ec:	f106 0410 	add.w	r4, r6, #16
 80007f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000800:	e885 0003 	stmia.w	r5, {r0, r1}
 8000804:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000808:	f7ff fe8e 	bl	8000528 <ADC_Measure>
 800080c:	4603      	mov	r3, r0
 800080e:	461a      	mov	r2, r3
 8000810:	4b91      	ldr	r3, [pc, #580]	@ (8000a58 <main+0x298>)
 8000812:	801a      	strh	r2, [r3, #0]
	  APPS1 = applyLowPassFilter(APPS1, &FECULowPass);
 8000814:	4b90      	ldr	r3, [pc, #576]	@ (8000a58 <main+0x298>)
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	ee07 3a90 	vmov	s15, r3
 800081c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000820:	488b      	ldr	r0, [pc, #556]	@ (8000a50 <main+0x290>)
 8000822:	eeb0 0a67 	vmov.f32	s0, s15
 8000826:	f7ff ffb5 	bl	8000794 <applyLowPassFilter>
 800082a:	eef0 7a40 	vmov.f32	s15, s0
 800082e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000832:	ee17 3a90 	vmov	r3, s15
 8000836:	b29a      	uxth	r2, r3
 8000838:	4b87      	ldr	r3, [pc, #540]	@ (8000a58 <main+0x298>)
 800083a:	801a      	strh	r2, [r3, #0]

	  APPS2 = ADC_Measure(hadc1, 1);
 800083c:	4e85      	ldr	r6, [pc, #532]	@ (8000a54 <main+0x294>)
 800083e:	2301      	movs	r3, #1
 8000840:	930e      	str	r3, [sp, #56]	@ 0x38
 8000842:	466d      	mov	r5, sp
 8000844:	f106 0410 	add.w	r4, r6, #16
 8000848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800084a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800084c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800084e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000854:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000858:	e885 0003 	stmia.w	r5, {r0, r1}
 800085c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000860:	f7ff fe62 	bl	8000528 <ADC_Measure>
 8000864:	4603      	mov	r3, r0
 8000866:	461a      	mov	r2, r3
 8000868:	4b7c      	ldr	r3, [pc, #496]	@ (8000a5c <main+0x29c>)
 800086a:	801a      	strh	r2, [r3, #0]
	  APPS2 = applyLowPassFilter(APPS2, &FECULowPass);
 800086c:	4b7b      	ldr	r3, [pc, #492]	@ (8000a5c <main+0x29c>)
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	ee07 3a90 	vmov	s15, r3
 8000874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000878:	4875      	ldr	r0, [pc, #468]	@ (8000a50 <main+0x290>)
 800087a:	eeb0 0a67 	vmov.f32	s0, s15
 800087e:	f7ff ff89 	bl	8000794 <applyLowPassFilter>
 8000882:	eef0 7a40 	vmov.f32	s15, s0
 8000886:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800088a:	ee17 3a90 	vmov	r3, s15
 800088e:	b29a      	uxth	r2, r3
 8000890:	4b72      	ldr	r3, [pc, #456]	@ (8000a5c <main+0x29c>)
 8000892:	801a      	strh	r2, [r3, #0]

	  BrakePedal = ADC_Measure(hadc1, 2);
 8000894:	4e6f      	ldr	r6, [pc, #444]	@ (8000a54 <main+0x294>)
 8000896:	2302      	movs	r3, #2
 8000898:	930e      	str	r3, [sp, #56]	@ 0x38
 800089a:	466d      	mov	r5, sp
 800089c:	f106 0410 	add.w	r4, r6, #16
 80008a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80008b4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80008b8:	f7ff fe36 	bl	8000528 <ADC_Measure>
 80008bc:	4603      	mov	r3, r0
 80008be:	461a      	mov	r2, r3
 80008c0:	4b67      	ldr	r3, [pc, #412]	@ (8000a60 <main+0x2a0>)
 80008c2:	801a      	strh	r2, [r3, #0]
	  BrakePedal = applyLowPassFilter(BrakePedal, &FECULowPass);
 80008c4:	4b66      	ldr	r3, [pc, #408]	@ (8000a60 <main+0x2a0>)
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	ee07 3a90 	vmov	s15, r3
 80008cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008d0:	485f      	ldr	r0, [pc, #380]	@ (8000a50 <main+0x290>)
 80008d2:	eeb0 0a67 	vmov.f32	s0, s15
 80008d6:	f7ff ff5d 	bl	8000794 <applyLowPassFilter>
 80008da:	eef0 7a40 	vmov.f32	s15, s0
 80008de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008e2:	ee17 3a90 	vmov	r3, s15
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	4b5d      	ldr	r3, [pc, #372]	@ (8000a60 <main+0x2a0>)
 80008ea:	801a      	strh	r2, [r3, #0]

	  SteeringSensor = ADC_Measure(hadc1, 11);
 80008ec:	4e59      	ldr	r6, [pc, #356]	@ (8000a54 <main+0x294>)
 80008ee:	230b      	movs	r3, #11
 80008f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80008f2:	466d      	mov	r5, sp
 80008f4:	f106 0410 	add.w	r4, r6, #16
 80008f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000902:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000904:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000908:	e885 0003 	stmia.w	r5, {r0, r1}
 800090c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000910:	f7ff fe0a 	bl	8000528 <ADC_Measure>
 8000914:	4603      	mov	r3, r0
 8000916:	461a      	mov	r2, r3
 8000918:	4b52      	ldr	r3, [pc, #328]	@ (8000a64 <main+0x2a4>)
 800091a:	801a      	strh	r2, [r3, #0]
	  SteeringSensor = applyLowPassFilter(SteeringSensor, &FECULowPass);
 800091c:	4b51      	ldr	r3, [pc, #324]	@ (8000a64 <main+0x2a4>)
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	ee07 3a90 	vmov	s15, r3
 8000924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000928:	4849      	ldr	r0, [pc, #292]	@ (8000a50 <main+0x290>)
 800092a:	eeb0 0a67 	vmov.f32	s0, s15
 800092e:	f7ff ff31 	bl	8000794 <applyLowPassFilter>
 8000932:	eef0 7a40 	vmov.f32	s15, s0
 8000936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800093a:	ee17 3a90 	vmov	r3, s15
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b48      	ldr	r3, [pc, #288]	@ (8000a64 <main+0x2a4>)
 8000942:	801a      	strh	r2, [r3, #0]

	  Susp_F_R = ADC_Measure(hadc1, 12);
 8000944:	4e43      	ldr	r6, [pc, #268]	@ (8000a54 <main+0x294>)
 8000946:	230c      	movs	r3, #12
 8000948:	930e      	str	r3, [sp, #56]	@ 0x38
 800094a:	466d      	mov	r5, sp
 800094c:	f106 0410 	add.w	r4, r6, #16
 8000950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000952:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000956:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000958:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800095a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800095c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000960:	e885 0003 	stmia.w	r5, {r0, r1}
 8000964:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000968:	f7ff fdde 	bl	8000528 <ADC_Measure>
 800096c:	4603      	mov	r3, r0
 800096e:	461a      	mov	r2, r3
 8000970:	4b3d      	ldr	r3, [pc, #244]	@ (8000a68 <main+0x2a8>)
 8000972:	801a      	strh	r2, [r3, #0]
	  Susp_F_R = applyLowPassFilter(Susp_F_L, &FECULowPass);
 8000974:	4b3d      	ldr	r3, [pc, #244]	@ (8000a6c <main+0x2ac>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	ee07 3a90 	vmov	s15, r3
 800097c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000980:	4833      	ldr	r0, [pc, #204]	@ (8000a50 <main+0x290>)
 8000982:	eeb0 0a67 	vmov.f32	s0, s15
 8000986:	f7ff ff05 	bl	8000794 <applyLowPassFilter>
 800098a:	eef0 7a40 	vmov.f32	s15, s0
 800098e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000992:	ee17 3a90 	vmov	r3, s15
 8000996:	b29a      	uxth	r2, r3
 8000998:	4b33      	ldr	r3, [pc, #204]	@ (8000a68 <main+0x2a8>)
 800099a:	801a      	strh	r2, [r3, #0]

	  Susp_F_L = ADC_Measure(hadc1, 13);
 800099c:	4e2d      	ldr	r6, [pc, #180]	@ (8000a54 <main+0x294>)
 800099e:	230d      	movs	r3, #13
 80009a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80009a2:	466d      	mov	r5, sp
 80009a4:	f106 0410 	add.w	r4, r6, #16
 80009a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80009bc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80009c0:	f7ff fdb2 	bl	8000528 <ADC_Measure>
 80009c4:	4603      	mov	r3, r0
 80009c6:	461a      	mov	r2, r3
 80009c8:	4b28      	ldr	r3, [pc, #160]	@ (8000a6c <main+0x2ac>)
 80009ca:	801a      	strh	r2, [r3, #0]
	  Susp_F_L = applyLowPassFilter(Susp_F_L, &FECULowPass);
 80009cc:	4b27      	ldr	r3, [pc, #156]	@ (8000a6c <main+0x2ac>)
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	ee07 3a90 	vmov	s15, r3
 80009d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009d8:	481d      	ldr	r0, [pc, #116]	@ (8000a50 <main+0x290>)
 80009da:	eeb0 0a67 	vmov.f32	s0, s15
 80009de:	f7ff fed9 	bl	8000794 <applyLowPassFilter>
 80009e2:	eef0 7a40 	vmov.f32	s15, s0
 80009e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009ea:	ee17 3a90 	vmov	r3, s15
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a6c <main+0x2ac>)
 80009f2:	801a      	strh	r2, [r3, #0]

	  PitotSensor = ADC_Measure(hadc1, 9);
 80009f4:	4e17      	ldr	r6, [pc, #92]	@ (8000a54 <main+0x294>)
 80009f6:	2309      	movs	r3, #9
 80009f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80009fa:	466d      	mov	r5, sp
 80009fc:	f106 0410 	add.w	r4, r6, #16
 8000a00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a10:	e885 0003 	stmia.w	r5, {r0, r1}
 8000a14:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a18:	f7ff fd86 	bl	8000528 <ADC_Measure>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4b13      	ldr	r3, [pc, #76]	@ (8000a70 <main+0x2b0>)
 8000a22:	801a      	strh	r2, [r3, #0]
	  PitotSensor = applyLowPassFilter(PitotSensor, &FECULowPass);
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <main+0x2b0>)
 8000a26:	881b      	ldrh	r3, [r3, #0]
 8000a28:	ee07 3a90 	vmov	s15, r3
 8000a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a30:	4807      	ldr	r0, [pc, #28]	@ (8000a50 <main+0x290>)
 8000a32:	eeb0 0a67 	vmov.f32	s0, s15
 8000a36:	f7ff fead 	bl	8000794 <applyLowPassFilter>
 8000a3a:	eef0 7a40 	vmov.f32	s15, s0
 8000a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a42:	ee17 3a90 	vmov	r3, s15
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	4b09      	ldr	r3, [pc, #36]	@ (8000a70 <main+0x2b0>)
 8000a4a:	801a      	strh	r2, [r3, #0]
	  APPS1 = ADC_Measure(hadc1, 0);
 8000a4c:	bf00      	nop
 8000a4e:	e6c9      	b.n	80007e4 <main+0x24>
 8000a50:	20000000 	.word	0x20000000
 8000a54:	20000040 	.word	0x20000040
 8000a58:	200000b0 	.word	0x200000b0
 8000a5c:	200000b2 	.word	0x200000b2
 8000a60:	200000b4 	.word	0x200000b4
 8000a64:	200000b6 	.word	0x200000b6
 8000a68:	200000b8 	.word	0x200000b8
 8000a6c:	200000ba 	.word	0x200000ba
 8000a70:	200000bc 	.word	0x200000bc

08000a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b094      	sub	sp, #80	@ 0x50
 8000a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	2234      	movs	r2, #52	@ 0x34
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f002 fa92 	bl	8002fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a88:	f107 0308 	add.w	r3, r7, #8
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a98:	4b2c      	ldr	r3, [pc, #176]	@ (8000b4c <SystemClock_Config+0xd8>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9c:	4a2b      	ldr	r2, [pc, #172]	@ (8000b4c <SystemClock_Config+0xd8>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa4:	4b29      	ldr	r3, [pc, #164]	@ (8000b4c <SystemClock_Config+0xd8>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ab0:	4b27      	ldr	r3, [pc, #156]	@ (8000b50 <SystemClock_Config+0xdc>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ab8:	4a25      	ldr	r2, [pc, #148]	@ (8000b50 <SystemClock_Config+0xdc>)
 8000aba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	4b23      	ldr	r3, [pc, #140]	@ (8000b50 <SystemClock_Config+0xdc>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000acc:	2302      	movs	r3, #2
 8000ace:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad4:	2310      	movs	r3, #16
 8000ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000adc:	2300      	movs	r3, #0
 8000ade:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ae0:	2308      	movs	r3, #8
 8000ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 108;
 8000ae4:	236c      	movs	r3, #108	@ 0x6c
 8000ae6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000af0:	2302      	movs	r3, #2
 8000af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4618      	mov	r0, r3
 8000afa:	f001 fdf7 	bl	80026ec <HAL_RCC_OscConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b04:	f000 f972 	bl	8000dec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b08:	f001 fda0 	bl	800264c <HAL_PWREx_EnableOverDrive>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000b12:	f000 f96b 	bl	8000dec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b16:	230f      	movs	r3, #15
 8000b18:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b2c:	f107 0308 	add.w	r3, r7, #8
 8000b30:	2103      	movs	r1, #3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f002 f888 	bl	8002c48 <HAL_RCC_ClockConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000b3e:	f000 f955 	bl	8000dec <Error_Handler>
  }
}
 8000b42:	bf00      	nop
 8000b44:	3750      	adds	r7, #80	@ 0x50
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40007000 	.word	0x40007000

08000b54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b66:	4b45      	ldr	r3, [pc, #276]	@ (8000c7c <MX_ADC1_Init+0x128>)
 8000b68:	4a45      	ldr	r2, [pc, #276]	@ (8000c80 <MX_ADC1_Init+0x12c>)
 8000b6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b6c:	4b43      	ldr	r3, [pc, #268]	@ (8000c7c <MX_ADC1_Init+0x128>)
 8000b6e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b74:	4b41      	ldr	r3, [pc, #260]	@ (8000c7c <MX_ADC1_Init+0x128>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b7a:	4b40      	ldr	r3, [pc, #256]	@ (8000c7c <MX_ADC1_Init+0x128>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b80:	4b3e      	ldr	r3, [pc, #248]	@ (8000c7c <MX_ADC1_Init+0x128>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b86:	4b3d      	ldr	r3, [pc, #244]	@ (8000c7c <MX_ADC1_Init+0x128>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b8e:	4b3b      	ldr	r3, [pc, #236]	@ (8000c7c <MX_ADC1_Init+0x128>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b94:	4b39      	ldr	r3, [pc, #228]	@ (8000c7c <MX_ADC1_Init+0x128>)
 8000b96:	4a3b      	ldr	r2, [pc, #236]	@ (8000c84 <MX_ADC1_Init+0x130>)
 8000b98:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b9a:	4b38      	ldr	r3, [pc, #224]	@ (8000c7c <MX_ADC1_Init+0x128>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8000ba0:	4b36      	ldr	r3, [pc, #216]	@ (8000c7c <MX_ADC1_Init+0x128>)
 8000ba2:	2207      	movs	r2, #7
 8000ba4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ba6:	4b35      	ldr	r3, [pc, #212]	@ (8000c7c <MX_ADC1_Init+0x128>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bae:	4b33      	ldr	r3, [pc, #204]	@ (8000c7c <MX_ADC1_Init+0x128>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bb4:	4831      	ldr	r0, [pc, #196]	@ (8000c7c <MX_ADC1_Init+0x128>)
 8000bb6:	f000 fae1 	bl	800117c <HAL_ADC_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000bc0:	f000 f914 	bl	8000dec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4829      	ldr	r0, [pc, #164]	@ (8000c7c <MX_ADC1_Init+0x128>)
 8000bd6:	f000 fc7b 	bl	80014d0 <HAL_ADC_ConfigChannel>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000be0:	f000 f904 	bl	8000dec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be8:	463b      	mov	r3, r7
 8000bea:	4619      	mov	r1, r3
 8000bec:	4823      	ldr	r0, [pc, #140]	@ (8000c7c <MX_ADC1_Init+0x128>)
 8000bee:	f000 fc6f 	bl	80014d0 <HAL_ADC_ConfigChannel>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000bf8:	f000 f8f8 	bl	8000dec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c00:	463b      	mov	r3, r7
 8000c02:	4619      	mov	r1, r3
 8000c04:	481d      	ldr	r0, [pc, #116]	@ (8000c7c <MX_ADC1_Init+0x128>)
 8000c06:	f000 fc63 	bl	80014d0 <HAL_ADC_ConfigChannel>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8000c10:	f000 f8ec 	bl	8000dec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000c14:	2304      	movs	r3, #4
 8000c16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c18:	463b      	mov	r3, r7
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4817      	ldr	r0, [pc, #92]	@ (8000c7c <MX_ADC1_Init+0x128>)
 8000c1e:	f000 fc57 	bl	80014d0 <HAL_ADC_ConfigChannel>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000c28:	f000 f8e0 	bl	8000dec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000c2c:	2305      	movs	r3, #5
 8000c2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c30:	463b      	mov	r3, r7
 8000c32:	4619      	mov	r1, r3
 8000c34:	4811      	ldr	r0, [pc, #68]	@ (8000c7c <MX_ADC1_Init+0x128>)
 8000c36:	f000 fc4b 	bl	80014d0 <HAL_ADC_ConfigChannel>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000c40:	f000 f8d4 	bl	8000dec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000c44:	2306      	movs	r3, #6
 8000c46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c48:	463b      	mov	r3, r7
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480b      	ldr	r0, [pc, #44]	@ (8000c7c <MX_ADC1_Init+0x128>)
 8000c4e:	f000 fc3f 	bl	80014d0 <HAL_ADC_ConfigChannel>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000c58:	f000 f8c8 	bl	8000dec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000c5c:	2307      	movs	r3, #7
 8000c5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c60:	463b      	mov	r3, r7
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	@ (8000c7c <MX_ADC1_Init+0x128>)
 8000c66:	f000 fc33 	bl	80014d0 <HAL_ADC_ConfigChannel>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8000c70:	f000 f8bc 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000040 	.word	0x20000040
 8000c80:	40012000 	.word	0x40012000
 8000c84:	0f000001 	.word	0x0f000001

08000c88 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <MX_CAN2_Init+0x64>)
 8000c8e:	4a18      	ldr	r2, [pc, #96]	@ (8000cf0 <MX_CAN2_Init+0x68>)
 8000c90:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 12;
 8000c92:	4b16      	ldr	r3, [pc, #88]	@ (8000cec <MX_CAN2_Init+0x64>)
 8000c94:	220c      	movs	r2, #12
 8000c96:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000c98:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <MX_CAN2_Init+0x64>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <MX_CAN2_Init+0x64>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000ca4:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <MX_CAN2_Init+0x64>)
 8000ca6:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8000caa:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <MX_CAN2_Init+0x64>)
 8000cae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000cb2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000cec <MX_CAN2_Init+0x64>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <MX_CAN2_Init+0x64>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cec <MX_CAN2_Init+0x64>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000cc6:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <MX_CAN2_Init+0x64>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000ccc:	4b07      	ldr	r3, [pc, #28]	@ (8000cec <MX_CAN2_Init+0x64>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <MX_CAN2_Init+0x64>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000cd8:	4804      	ldr	r0, [pc, #16]	@ (8000cec <MX_CAN2_Init+0x64>)
 8000cda:	f000 fe49 	bl	8001970 <HAL_CAN_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000ce4:	f000 f882 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000088 	.word	0x20000088
 8000cf0:	40006800 	.word	0x40006800

08000cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	@ 0x28
 8000cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0a:	4b20      	ldr	r3, [pc, #128]	@ (8000d8c <MX_GPIO_Init+0x98>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a1f      	ldr	r2, [pc, #124]	@ (8000d8c <MX_GPIO_Init+0x98>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b1d      	ldr	r3, [pc, #116]	@ (8000d8c <MX_GPIO_Init+0x98>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <MX_GPIO_Init+0x98>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	4a19      	ldr	r2, [pc, #100]	@ (8000d8c <MX_GPIO_Init+0x98>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2e:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <MX_GPIO_Init+0x98>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <MX_GPIO_Init+0x98>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a13      	ldr	r2, [pc, #76]	@ (8000d8c <MX_GPIO_Init+0x98>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <MX_GPIO_Init+0x98>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d52:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <MX_GPIO_Init+0x98>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	4a0d      	ldr	r2, [pc, #52]	@ (8000d8c <MX_GPIO_Init+0x98>)
 8000d58:	f043 0310 	orr.w	r3, r3, #16
 8000d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d8c <MX_GPIO_Init+0x98>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	f003 0310 	and.w	r3, r3, #16
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : SDC_SETAS_Pin SDC_BOTS_Pin SDC_BSPD_Intertia_Pin */
  GPIO_InitStruct.Pin = SDC_SETAS_Pin|SDC_BOTS_Pin|SDC_BSPD_Intertia_Pin;
 8000d6a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4804      	ldr	r0, [pc, #16]	@ (8000d90 <MX_GPIO_Init+0x9c>)
 8000d80:	f001 fab8 	bl	80022f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d84:	bf00      	nop
 8000d86:	3728      	adds	r7, #40	@ 0x28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40021000 	.word	0x40021000

08000d94 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000da6:	f001 fa29 	bl	80021fc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000daa:	2301      	movs	r3, #1
 8000dac:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000db6:	231f      	movs	r3, #31
 8000db8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000dba:	2387      	movs	r3, #135	@ 0x87
 8000dbc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f001 fa47 	bl	800226c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000dde:	2004      	movs	r0, #4
 8000de0:	f001 fa24 	bl	800222c <HAL_MPU_Enable>

}
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df0:	b672      	cpsid	i
}
 8000df2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <Error_Handler+0x8>

08000df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000e3c <HAL_MspInit+0x44>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e02:	4a0e      	ldr	r2, [pc, #56]	@ (8000e3c <HAL_MspInit+0x44>)
 8000e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <HAL_MspInit+0x44>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e16:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <HAL_MspInit+0x44>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1a:	4a08      	ldr	r2, [pc, #32]	@ (8000e3c <HAL_MspInit+0x44>)
 8000e1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e22:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <HAL_MspInit+0x44>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800

08000e40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08c      	sub	sp, #48	@ 0x30
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 031c 	add.w	r3, r7, #28
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a2d      	ldr	r2, [pc, #180]	@ (8000f14 <HAL_ADC_MspInit+0xd4>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d153      	bne.n	8000f0a <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e62:	4b2d      	ldr	r3, [pc, #180]	@ (8000f18 <HAL_ADC_MspInit+0xd8>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e66:	4a2c      	ldr	r2, [pc, #176]	@ (8000f18 <HAL_ADC_MspInit+0xd8>)
 8000e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f18 <HAL_ADC_MspInit+0xd8>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e76:	61bb      	str	r3, [r7, #24]
 8000e78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7a:	4b27      	ldr	r3, [pc, #156]	@ (8000f18 <HAL_ADC_MspInit+0xd8>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a26      	ldr	r2, [pc, #152]	@ (8000f18 <HAL_ADC_MspInit+0xd8>)
 8000e80:	f043 0304 	orr.w	r3, r3, #4
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b24      	ldr	r3, [pc, #144]	@ (8000f18 <HAL_ADC_MspInit+0xd8>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	4b21      	ldr	r3, [pc, #132]	@ (8000f18 <HAL_ADC_MspInit+0xd8>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	4a20      	ldr	r2, [pc, #128]	@ (8000f18 <HAL_ADC_MspInit+0xd8>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f18 <HAL_ADC_MspInit+0xd8>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8000f18 <HAL_ADC_MspInit+0xd8>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	4a1a      	ldr	r2, [pc, #104]	@ (8000f18 <HAL_ADC_MspInit+0xd8>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb6:	4b18      	ldr	r3, [pc, #96]	@ (8000f18 <HAL_ADC_MspInit+0xd8>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SteeringSensor_Pin|SUSP_F_R_Pin|Susp_F_L_Pin;
 8000ec2:	230e      	movs	r3, #14
 8000ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4811      	ldr	r0, [pc, #68]	@ (8000f1c <HAL_ADC_MspInit+0xdc>)
 8000ed6:	f001 fa0d 	bl	80022f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = APPS1_Pin|APPS2_Pin|BrakePedal_Pin;
 8000eda:	2307      	movs	r3, #7
 8000edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	4619      	mov	r1, r3
 8000eec:	480c      	ldr	r0, [pc, #48]	@ (8000f20 <HAL_ADC_MspInit+0xe0>)
 8000eee:	f001 fa01 	bl	80022f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PitotSensor_Pin;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PitotSensor_GPIO_Port, &GPIO_InitStruct);
 8000efe:	f107 031c 	add.w	r3, r7, #28
 8000f02:	4619      	mov	r1, r3
 8000f04:	4807      	ldr	r0, [pc, #28]	@ (8000f24 <HAL_ADC_MspInit+0xe4>)
 8000f06:	f001 f9f5 	bl	80022f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f0a:	bf00      	nop
 8000f0c:	3730      	adds	r7, #48	@ 0x30
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40012000 	.word	0x40012000
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40020800 	.word	0x40020800
 8000f20:	40020000 	.word	0x40020000
 8000f24:	40020400 	.word	0x40020400

08000f28 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	@ 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a21      	ldr	r2, [pc, #132]	@ (8000fcc <HAL_CAN_MspInit+0xa4>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d13c      	bne.n	8000fc4 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000f4a:	4b21      	ldr	r3, [pc, #132]	@ (8000fd0 <HAL_CAN_MspInit+0xa8>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4e:	4a20      	ldr	r2, [pc, #128]	@ (8000fd0 <HAL_CAN_MspInit+0xa8>)
 8000f50:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f56:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd0 <HAL_CAN_MspInit+0xa8>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f62:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd0 <HAL_CAN_MspInit+0xa8>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f66:	4a1a      	ldr	r2, [pc, #104]	@ (8000fd0 <HAL_CAN_MspInit+0xa8>)
 8000f68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f6e:	4b18      	ldr	r3, [pc, #96]	@ (8000fd0 <HAL_CAN_MspInit+0xa8>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <HAL_CAN_MspInit+0xa8>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a14      	ldr	r2, [pc, #80]	@ (8000fd0 <HAL_CAN_MspInit+0xa8>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <HAL_CAN_MspInit+0xa8>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f92:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000fa4:	2309      	movs	r3, #9
 8000fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4619      	mov	r1, r3
 8000fae:	4809      	ldr	r0, [pc, #36]	@ (8000fd4 <HAL_CAN_MspInit+0xac>)
 8000fb0:	f001 f9a0 	bl	80022f4 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2040      	movs	r0, #64	@ 0x40
 8000fba:	f001 f8e8 	bl	800218e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000fbe:	2040      	movs	r0, #64	@ 0x40
 8000fc0:	f001 f901 	bl	80021c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000fc4:	bf00      	nop
 8000fc6:	3728      	adds	r7, #40	@ 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40006800 	.word	0x40006800
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020400 	.word	0x40020400

08000fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <NMI_Handler+0x4>

08000fe0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <HardFault_Handler+0x4>

08000fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <MemManage_Handler+0x4>

08000ff0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <BusFault_Handler+0x4>

08000ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <UsageFault_Handler+0x4>

08001000 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800102e:	f000 f885 	bl	800113c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800103c:	4802      	ldr	r0, [pc, #8]	@ (8001048 <CAN2_RX0_IRQHandler+0x10>)
 800103e:	f000 fd92 	bl	8001b66 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000088 	.word	0x20000088

0800104c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <SystemInit+0x20>)
 8001052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001056:	4a05      	ldr	r2, [pc, #20]	@ (800106c <SystemInit+0x20>)
 8001058:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800105c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001070:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001074:	480d      	ldr	r0, [pc, #52]	@ (80010ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001076:	490e      	ldr	r1, [pc, #56]	@ (80010b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001078:	4a0e      	ldr	r2, [pc, #56]	@ (80010b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0b      	ldr	r2, [pc, #44]	@ (80010b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800108c:	4c0b      	ldr	r4, [pc, #44]	@ (80010bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800109a:	f7ff ffd7 	bl	800104c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800109e:	f001 ff8d 	bl	8002fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a2:	f7ff fb8d 	bl	80007c0 <main>
  bx  lr    
 80010a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010a8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80010b4:	0800303c 	.word	0x0800303c
  ldr r2, =_sbss
 80010b8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80010bc:	200000c4 	.word	0x200000c4

080010c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC_IRQHandler>

080010c2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c6:	2003      	movs	r0, #3
 80010c8:	f001 f856 	bl	8002178 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010cc:	200f      	movs	r0, #15
 80010ce:	f000 f805 	bl	80010dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d2:	f7ff fe91 	bl	8000df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	bd80      	pop	{r7, pc}

080010dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <HAL_InitTick+0x54>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <HAL_InitTick+0x58>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 f871 	bl	80021e2 <HAL_SYSTICK_Config>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e00e      	b.n	8001128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b0f      	cmp	r3, #15
 800110e:	d80a      	bhi.n	8001126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001110:	2200      	movs	r2, #0
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f001 f839 	bl	800218e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800111c:	4a06      	ldr	r2, [pc, #24]	@ (8001138 <HAL_InitTick+0x5c>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e000      	b.n	8001128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000018 	.word	0x20000018
 8001134:	20000020 	.word	0x20000020
 8001138:	2000001c 	.word	0x2000001c

0800113c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <HAL_IncTick+0x20>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_IncTick+0x24>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4413      	add	r3, r2
 800114c:	4a04      	ldr	r2, [pc, #16]	@ (8001160 <HAL_IncTick+0x24>)
 800114e:	6013      	str	r3, [r2, #0]
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000020 	.word	0x20000020
 8001160:	200000c0 	.word	0x200000c0

08001164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return uwTick;
 8001168:	4b03      	ldr	r3, [pc, #12]	@ (8001178 <HAL_GetTick+0x14>)
 800116a:	681b      	ldr	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	200000c0 	.word	0x200000c0

0800117c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e031      	b.n	80011f6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001196:	2b00      	cmp	r3, #0
 8001198:	d109      	bne.n	80011ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff fe50 	bl	8000e40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b2:	f003 0310 	and.w	r3, r3, #16
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d116      	bne.n	80011e8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011be:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <HAL_ADC_Init+0x84>)
 80011c0:	4013      	ands	r3, r2
 80011c2:	f043 0202 	orr.w	r2, r3, #2
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 fad6 	bl	800177c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	f023 0303 	bic.w	r3, r3, #3
 80011de:	f043 0201 	orr.w	r2, r3, #1
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80011e6:	e001      	b.n	80011ec <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	ffffeefd 	.word	0xffffeefd

08001204 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001216:	2b01      	cmp	r3, #1
 8001218:	d101      	bne.n	800121e <HAL_ADC_Start+0x1a>
 800121a:	2302      	movs	r3, #2
 800121c:	e0ad      	b.n	800137a <HAL_ADC_Start+0x176>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2201      	movs	r2, #1
 8001222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	2b01      	cmp	r3, #1
 8001232:	d018      	beq.n	8001266 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f042 0201 	orr.w	r2, r2, #1
 8001242:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001244:	4b50      	ldr	r3, [pc, #320]	@ (8001388 <HAL_ADC_Start+0x184>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a50      	ldr	r2, [pc, #320]	@ (800138c <HAL_ADC_Start+0x188>)
 800124a:	fba2 2303 	umull	r2, r3, r2, r3
 800124e:	0c9a      	lsrs	r2, r3, #18
 8001250:	4613      	mov	r3, r2
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	4413      	add	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001258:	e002      	b.n	8001260 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	3b01      	subs	r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f9      	bne.n	800125a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b01      	cmp	r3, #1
 8001272:	d175      	bne.n	8001360 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001278:	4b45      	ldr	r3, [pc, #276]	@ (8001390 <HAL_ADC_Start+0x18c>)
 800127a:	4013      	ands	r3, r2
 800127c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800128e:	2b00      	cmp	r3, #0
 8001290:	d007      	beq.n	80012a2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001296:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800129a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80012ae:	d106      	bne.n	80012be <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b4:	f023 0206 	bic.w	r2, r3, #6
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	645a      	str	r2, [r3, #68]	@ 0x44
 80012bc:	e002      	b.n	80012c4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80012d4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80012d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001394 <HAL_ADC_Start+0x190>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 031f 	and.w	r3, r3, #31
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10f      	bne.n	8001302 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d143      	bne.n	8001378 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	e03a      	b.n	8001378 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a24      	ldr	r2, [pc, #144]	@ (8001398 <HAL_ADC_Start+0x194>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d10e      	bne.n	800132a <HAL_ADC_Start+0x126>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d107      	bne.n	800132a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001328:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800132a:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <HAL_ADC_Start+0x190>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 0310 	and.w	r3, r3, #16
 8001332:	2b00      	cmp	r3, #0
 8001334:	d120      	bne.n	8001378 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a18      	ldr	r2, [pc, #96]	@ (800139c <HAL_ADC_Start+0x198>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d11b      	bne.n	8001378 <HAL_ADC_Start+0x174>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d114      	bne.n	8001378 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	e00b      	b.n	8001378 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001364:	f043 0210 	orr.w	r2, r3, #16
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001370:	f043 0201 	orr.w	r2, r3, #1
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000018 	.word	0x20000018
 800138c:	431bde83 	.word	0x431bde83
 8001390:	fffff8fe 	.word	0xfffff8fe
 8001394:	40012300 	.word	0x40012300
 8001398:	40012000 	.word	0x40012000
 800139c:	40012200 	.word	0x40012200

080013a0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013bc:	d113      	bne.n	80013e6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80013c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013cc:	d10b      	bne.n	80013e6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	f043 0220 	orr.w	r2, r3, #32
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e063      	b.n	80014ae <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80013e6:	f7ff febd 	bl	8001164 <HAL_GetTick>
 80013ea:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013ec:	e021      	b.n	8001432 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f4:	d01d      	beq.n	8001432 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d007      	beq.n	800140c <HAL_ADC_PollForConversion+0x6c>
 80013fc:	f7ff feb2 	bl	8001164 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d212      	bcs.n	8001432 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b02      	cmp	r3, #2
 8001418:	d00b      	beq.n	8001432 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141e:	f043 0204 	orr.w	r2, r3, #4
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e03d      	b.n	80014ae <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b02      	cmp	r3, #2
 800143e:	d1d6      	bne.n	80013ee <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f06f 0212 	mvn.w	r2, #18
 8001448:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d123      	bne.n	80014ac <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001468:	2b00      	cmp	r3, #0
 800146a:	d11f      	bne.n	80014ac <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001472:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001476:	2b00      	cmp	r3, #0
 8001478:	d006      	beq.n	8001488 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001484:	2b00      	cmp	r3, #0
 8001486:	d111      	bne.n	80014ac <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001498:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d105      	bne.n	80014ac <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a4:	f043 0201 	orr.w	r2, r3, #1
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d101      	bne.n	80014ec <HAL_ADC_ConfigChannel+0x1c>
 80014e8:	2302      	movs	r3, #2
 80014ea:	e136      	b.n	800175a <HAL_ADC_ConfigChannel+0x28a>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b09      	cmp	r3, #9
 80014fa:	d93a      	bls.n	8001572 <HAL_ADC_ConfigChannel+0xa2>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001504:	d035      	beq.n	8001572 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68d9      	ldr	r1, [r3, #12]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	b29b      	uxth	r3, r3
 8001512:	461a      	mov	r2, r3
 8001514:	4613      	mov	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4413      	add	r3, r2
 800151a:	3b1e      	subs	r3, #30
 800151c:	2207      	movs	r2, #7
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43da      	mvns	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	400a      	ands	r2, r1
 800152a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a8d      	ldr	r2, [pc, #564]	@ (8001768 <HAL_ADC_ConfigChannel+0x298>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d10a      	bne.n	800154c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68d9      	ldr	r1, [r3, #12]
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	061a      	lsls	r2, r3, #24
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800154a:	e035      	b.n	80015b8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	68d9      	ldr	r1, [r3, #12]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4618      	mov	r0, r3
 800155e:	4603      	mov	r3, r0
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4403      	add	r3, r0
 8001564:	3b1e      	subs	r3, #30
 8001566:	409a      	lsls	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001570:	e022      	b.n	80015b8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6919      	ldr	r1, [r3, #16]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	b29b      	uxth	r3, r3
 800157e:	461a      	mov	r2, r3
 8001580:	4613      	mov	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	2207      	movs	r2, #7
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43da      	mvns	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	400a      	ands	r2, r1
 8001594:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6919      	ldr	r1, [r3, #16]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	4603      	mov	r3, r0
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4403      	add	r3, r0
 80015ae:	409a      	lsls	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b06      	cmp	r3, #6
 80015be:	d824      	bhi.n	800160a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	3b05      	subs	r3, #5
 80015d2:	221f      	movs	r2, #31
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43da      	mvns	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	400a      	ands	r2, r1
 80015e0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	3b05      	subs	r3, #5
 80015fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	635a      	str	r2, [r3, #52]	@ 0x34
 8001608:	e04c      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b0c      	cmp	r3, #12
 8001610:	d824      	bhi.n	800165c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	3b23      	subs	r3, #35	@ 0x23
 8001624:	221f      	movs	r2, #31
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	400a      	ands	r2, r1
 8001632:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	b29b      	uxth	r3, r3
 8001640:	4618      	mov	r0, r3
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	3b23      	subs	r3, #35	@ 0x23
 800164e:	fa00 f203 	lsl.w	r2, r0, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	631a      	str	r2, [r3, #48]	@ 0x30
 800165a:	e023      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	3b41      	subs	r3, #65	@ 0x41
 800166e:	221f      	movs	r2, #31
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43da      	mvns	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	400a      	ands	r2, r1
 800167c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	b29b      	uxth	r3, r3
 800168a:	4618      	mov	r0, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	3b41      	subs	r3, #65	@ 0x41
 8001698:	fa00 f203 	lsl.w	r2, r0, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a30      	ldr	r2, [pc, #192]	@ (800176c <HAL_ADC_ConfigChannel+0x29c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d10a      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x1f4>
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80016b6:	d105      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80016b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001770 <HAL_ADC_ConfigChannel+0x2a0>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	4a2c      	ldr	r2, [pc, #176]	@ (8001770 <HAL_ADC_ConfigChannel+0x2a0>)
 80016be:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80016c2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a28      	ldr	r2, [pc, #160]	@ (800176c <HAL_ADC_ConfigChannel+0x29c>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d10f      	bne.n	80016ee <HAL_ADC_ConfigChannel+0x21e>
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b12      	cmp	r3, #18
 80016d4:	d10b      	bne.n	80016ee <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80016d6:	4b26      	ldr	r3, [pc, #152]	@ (8001770 <HAL_ADC_ConfigChannel+0x2a0>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	4a25      	ldr	r2, [pc, #148]	@ (8001770 <HAL_ADC_ConfigChannel+0x2a0>)
 80016dc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80016e0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80016e2:	4b23      	ldr	r3, [pc, #140]	@ (8001770 <HAL_ADC_ConfigChannel+0x2a0>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	4a22      	ldr	r2, [pc, #136]	@ (8001770 <HAL_ADC_ConfigChannel+0x2a0>)
 80016e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016ec:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a1e      	ldr	r2, [pc, #120]	@ (800176c <HAL_ADC_ConfigChannel+0x29c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d12b      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x280>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a1a      	ldr	r2, [pc, #104]	@ (8001768 <HAL_ADC_ConfigChannel+0x298>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d003      	beq.n	800170a <HAL_ADC_ConfigChannel+0x23a>
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b11      	cmp	r3, #17
 8001708:	d122      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800170a:	4b19      	ldr	r3, [pc, #100]	@ (8001770 <HAL_ADC_ConfigChannel+0x2a0>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	4a18      	ldr	r2, [pc, #96]	@ (8001770 <HAL_ADC_ConfigChannel+0x2a0>)
 8001710:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001714:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001716:	4b16      	ldr	r3, [pc, #88]	@ (8001770 <HAL_ADC_ConfigChannel+0x2a0>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	4a15      	ldr	r2, [pc, #84]	@ (8001770 <HAL_ADC_ConfigChannel+0x2a0>)
 800171c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001720:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a10      	ldr	r2, [pc, #64]	@ (8001768 <HAL_ADC_ConfigChannel+0x298>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d111      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800172c:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <HAL_ADC_ConfigChannel+0x2a4>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a11      	ldr	r2, [pc, #68]	@ (8001778 <HAL_ADC_ConfigChannel+0x2a8>)
 8001732:	fba2 2303 	umull	r2, r3, r2, r3
 8001736:	0c9a      	lsrs	r2, r3, #18
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001742:	e002      	b.n	800174a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	3b01      	subs	r3, #1
 8001748:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f9      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	10000012 	.word	0x10000012
 800176c:	40012000 	.word	0x40012000
 8001770:	40012300 	.word	0x40012300
 8001774:	20000018 	.word	0x20000018
 8001778:	431bde83 	.word	0x431bde83

0800177c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001784:	4b78      	ldr	r3, [pc, #480]	@ (8001968 <ADC_Init+0x1ec>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	4a77      	ldr	r2, [pc, #476]	@ (8001968 <ADC_Init+0x1ec>)
 800178a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800178e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001790:	4b75      	ldr	r3, [pc, #468]	@ (8001968 <ADC_Init+0x1ec>)
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	4973      	ldr	r1, [pc, #460]	@ (8001968 <ADC_Init+0x1ec>)
 800179a:	4313      	orrs	r3, r2
 800179c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	021a      	lsls	r2, r3, #8
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80017d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6859      	ldr	r1, [r3, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6899      	ldr	r1, [r3, #8]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800180a:	4a58      	ldr	r2, [pc, #352]	@ (800196c <ADC_Init+0x1f0>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d022      	beq.n	8001856 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800181e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6899      	ldr	r1, [r3, #8]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	430a      	orrs	r2, r1
 8001830:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001840:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6899      	ldr	r1, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	e00f      	b.n	8001876 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001864:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001874:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0202 	bic.w	r2, r2, #2
 8001884:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6899      	ldr	r1, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	005a      	lsls	r2, r3, #1
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d01b      	beq.n	80018dc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80018c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6859      	ldr	r1, [r3, #4]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ce:	3b01      	subs	r3, #1
 80018d0:	035a      	lsls	r2, r3, #13
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	430a      	orrs	r2, r1
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	e007      	b.n	80018ec <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80018fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	3b01      	subs	r3, #1
 8001908:	051a      	lsls	r2, r3, #20
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001920:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6899      	ldr	r1, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800192e:	025a      	lsls	r2, r3, #9
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001946:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6899      	ldr	r1, [r3, #8]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	029a      	lsls	r2, r3, #10
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	609a      	str	r2, [r3, #8]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	40012300 	.word	0x40012300
 800196c:	0f000001 	.word	0x0f000001

08001970 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e0ed      	b.n	8001b5e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d102      	bne.n	8001994 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff faca 	bl	8000f28 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0201 	orr.w	r2, r2, #1
 80019a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019a4:	f7ff fbde 	bl	8001164 <HAL_GetTick>
 80019a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019aa:	e012      	b.n	80019d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019ac:	f7ff fbda 	bl	8001164 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b0a      	cmp	r3, #10
 80019b8:	d90b      	bls.n	80019d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2205      	movs	r2, #5
 80019ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e0c5      	b.n	8001b5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0e5      	beq.n	80019ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0202 	bic.w	r2, r2, #2
 80019ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019f0:	f7ff fbb8 	bl	8001164 <HAL_GetTick>
 80019f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019f6:	e012      	b.n	8001a1e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019f8:	f7ff fbb4 	bl	8001164 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b0a      	cmp	r3, #10
 8001a04:	d90b      	bls.n	8001a1e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2205      	movs	r2, #5
 8001a16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e09f      	b.n	8001b5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1e5      	bne.n	80019f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	7e1b      	ldrb	r3, [r3, #24]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d108      	bne.n	8001a46 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	e007      	b.n	8001a56 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7e5b      	ldrb	r3, [r3, #25]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d108      	bne.n	8001a70 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	e007      	b.n	8001a80 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	7e9b      	ldrb	r3, [r3, #26]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d108      	bne.n	8001a9a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0220 	orr.w	r2, r2, #32
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	e007      	b.n	8001aaa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0220 	bic.w	r2, r2, #32
 8001aa8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	7edb      	ldrb	r3, [r3, #27]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d108      	bne.n	8001ac4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0210 	bic.w	r2, r2, #16
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	e007      	b.n	8001ad4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0210 	orr.w	r2, r2, #16
 8001ad2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7f1b      	ldrb	r3, [r3, #28]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d108      	bne.n	8001aee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0208 	orr.w	r2, r2, #8
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	e007      	b.n	8001afe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0208 	bic.w	r2, r2, #8
 8001afc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	7f5b      	ldrb	r3, [r3, #29]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d108      	bne.n	8001b18 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f042 0204 	orr.w	r2, r2, #4
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	e007      	b.n	8001b28 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0204 	bic.w	r2, r2, #4
 8001b26:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	ea42 0103 	orr.w	r1, r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	1e5a      	subs	r2, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b08a      	sub	sp, #40	@ 0x28
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d07c      	beq.n	8001ca6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d023      	beq.n	8001bfe <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f983 	bl	8001ed4 <HAL_CAN_TxMailbox0CompleteCallback>
 8001bce:	e016      	b.n	8001bfe <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d004      	beq.n	8001be4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bdc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001be2:	e00c      	b.n	8001bfe <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d004      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bf6:	e002      	b.n	8001bfe <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f989 	bl	8001f10 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d024      	beq.n	8001c52 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c10:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f963 	bl	8001ee8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001c22:	e016      	b.n	8001c52 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d004      	beq.n	8001c38 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c36:	e00c      	b.n	8001c52 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d004      	beq.n	8001c4c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c4a:	e002      	b.n	8001c52 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f969 	bl	8001f24 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d024      	beq.n	8001ca6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c64:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f943 	bl	8001efc <HAL_CAN_TxMailbox2CompleteCallback>
 8001c76:	e016      	b.n	8001ca6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d004      	beq.n	8001c8c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c8a:	e00c      	b.n	8001ca6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d004      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c9e:	e002      	b.n	8001ca6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f949 	bl	8001f38 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00c      	beq.n	8001cca <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f003 0310 	and.w	r3, r3, #16
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d007      	beq.n	8001cca <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cc0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2210      	movs	r2, #16
 8001cc8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00b      	beq.n	8001cec <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d006      	beq.n	8001cec <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2208      	movs	r2, #8
 8001ce4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f93a 	bl	8001f60 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d009      	beq.n	8001d0a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d002      	beq.n	8001d0a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f921 	bl	8001f4c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00c      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	f003 0310 	and.w	r3, r3, #16
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d007      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d24:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2210      	movs	r2, #16
 8001d2c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d2e:	6a3b      	ldr	r3, [r7, #32]
 8001d30:	f003 0320 	and.w	r3, r3, #32
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00b      	beq.n	8001d50 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d006      	beq.n	8001d50 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2208      	movs	r2, #8
 8001d48:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f91c 	bl	8001f88 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d009      	beq.n	8001d6e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d002      	beq.n	8001d6e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f903 	bl	8001f74 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00b      	beq.n	8001d90 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d006      	beq.n	8001d90 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2210      	movs	r2, #16
 8001d88:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f906 	bl	8001f9c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00b      	beq.n	8001db2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d006      	beq.n	8001db2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2208      	movs	r2, #8
 8001daa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f8ff 	bl	8001fb0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d07b      	beq.n	8001eb4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d072      	beq.n	8001eac <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d008      	beq.n	8001de2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d008      	beq.n	8001dfe <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df8:	f043 0302 	orr.w	r3, r3, #2
 8001dfc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e14:	f043 0304 	orr.w	r3, r3, #4
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
 8001e1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d043      	beq.n	8001eac <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d03e      	beq.n	8001eac <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e34:	2b60      	cmp	r3, #96	@ 0x60
 8001e36:	d02b      	beq.n	8001e90 <HAL_CAN_IRQHandler+0x32a>
 8001e38:	2b60      	cmp	r3, #96	@ 0x60
 8001e3a:	d82e      	bhi.n	8001e9a <HAL_CAN_IRQHandler+0x334>
 8001e3c:	2b50      	cmp	r3, #80	@ 0x50
 8001e3e:	d022      	beq.n	8001e86 <HAL_CAN_IRQHandler+0x320>
 8001e40:	2b50      	cmp	r3, #80	@ 0x50
 8001e42:	d82a      	bhi.n	8001e9a <HAL_CAN_IRQHandler+0x334>
 8001e44:	2b40      	cmp	r3, #64	@ 0x40
 8001e46:	d019      	beq.n	8001e7c <HAL_CAN_IRQHandler+0x316>
 8001e48:	2b40      	cmp	r3, #64	@ 0x40
 8001e4a:	d826      	bhi.n	8001e9a <HAL_CAN_IRQHandler+0x334>
 8001e4c:	2b30      	cmp	r3, #48	@ 0x30
 8001e4e:	d010      	beq.n	8001e72 <HAL_CAN_IRQHandler+0x30c>
 8001e50:	2b30      	cmp	r3, #48	@ 0x30
 8001e52:	d822      	bhi.n	8001e9a <HAL_CAN_IRQHandler+0x334>
 8001e54:	2b10      	cmp	r3, #16
 8001e56:	d002      	beq.n	8001e5e <HAL_CAN_IRQHandler+0x2f8>
 8001e58:	2b20      	cmp	r3, #32
 8001e5a:	d005      	beq.n	8001e68 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e5c:	e01d      	b.n	8001e9a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e60:	f043 0308 	orr.w	r3, r3, #8
 8001e64:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e66:	e019      	b.n	8001e9c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6a:	f043 0310 	orr.w	r3, r3, #16
 8001e6e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e70:	e014      	b.n	8001e9c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e74:	f043 0320 	orr.w	r3, r3, #32
 8001e78:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e7a:	e00f      	b.n	8001e9c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e82:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e84:	e00a      	b.n	8001e9c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e8c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e8e:	e005      	b.n	8001e9c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e96:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e98:	e000      	b.n	8001e9c <HAL_CAN_IRQHandler+0x336>
            break;
 8001e9a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699a      	ldr	r2, [r3, #24]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001eaa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2204      	movs	r2, #4
 8001eb2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d008      	beq.n	8001ecc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f87c 	bl	8001fc4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001ecc:	bf00      	nop
 8001ece:	3728      	adds	r7, #40	@ 0x28
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <__NVIC_SetPriorityGrouping+0x40>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002000:	4b06      	ldr	r3, [pc, #24]	@ (800201c <__NVIC_SetPriorityGrouping+0x44>)
 8002002:	4313      	orrs	r3, r2
 8002004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002006:	4a04      	ldr	r2, [pc, #16]	@ (8002018 <__NVIC_SetPriorityGrouping+0x40>)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	60d3      	str	r3, [r2, #12]
}
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000ed00 	.word	0xe000ed00
 800201c:	05fa0000 	.word	0x05fa0000

08002020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002024:	4b04      	ldr	r3, [pc, #16]	@ (8002038 <__NVIC_GetPriorityGrouping+0x18>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	0a1b      	lsrs	r3, r3, #8
 800202a:	f003 0307 	and.w	r3, r3, #7
}
 800202e:	4618      	mov	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	2b00      	cmp	r3, #0
 800204c:	db0b      	blt.n	8002066 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	f003 021f 	and.w	r2, r3, #31
 8002054:	4907      	ldr	r1, [pc, #28]	@ (8002074 <__NVIC_EnableIRQ+0x38>)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	2001      	movs	r0, #1
 800205e:	fa00 f202 	lsl.w	r2, r0, r2
 8002062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000e100 	.word	0xe000e100

08002078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	6039      	str	r1, [r7, #0]
 8002082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002088:	2b00      	cmp	r3, #0
 800208a:	db0a      	blt.n	80020a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	b2da      	uxtb	r2, r3
 8002090:	490c      	ldr	r1, [pc, #48]	@ (80020c4 <__NVIC_SetPriority+0x4c>)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	0112      	lsls	r2, r2, #4
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	440b      	add	r3, r1
 800209c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a0:	e00a      	b.n	80020b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4908      	ldr	r1, [pc, #32]	@ (80020c8 <__NVIC_SetPriority+0x50>)
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	3b04      	subs	r3, #4
 80020b0:	0112      	lsls	r2, r2, #4
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	440b      	add	r3, r1
 80020b6:	761a      	strb	r2, [r3, #24]
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000e100 	.word	0xe000e100
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b089      	sub	sp, #36	@ 0x24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f1c3 0307 	rsb	r3, r3, #7
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	bf28      	it	cs
 80020ea:	2304      	movcs	r3, #4
 80020ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3304      	adds	r3, #4
 80020f2:	2b06      	cmp	r3, #6
 80020f4:	d902      	bls.n	80020fc <NVIC_EncodePriority+0x30>
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3b03      	subs	r3, #3
 80020fa:	e000      	b.n	80020fe <NVIC_EncodePriority+0x32>
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002100:	f04f 32ff 	mov.w	r2, #4294967295
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43da      	mvns	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	401a      	ands	r2, r3
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002114:	f04f 31ff 	mov.w	r1, #4294967295
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	fa01 f303 	lsl.w	r3, r1, r3
 800211e:	43d9      	mvns	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002124:	4313      	orrs	r3, r2
         );
}
 8002126:	4618      	mov	r0, r3
 8002128:	3724      	adds	r7, #36	@ 0x24
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
	...

08002134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3b01      	subs	r3, #1
 8002140:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002144:	d301      	bcc.n	800214a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002146:	2301      	movs	r3, #1
 8002148:	e00f      	b.n	800216a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800214a:	4a0a      	ldr	r2, [pc, #40]	@ (8002174 <SysTick_Config+0x40>)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3b01      	subs	r3, #1
 8002150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002152:	210f      	movs	r1, #15
 8002154:	f04f 30ff 	mov.w	r0, #4294967295
 8002158:	f7ff ff8e 	bl	8002078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800215c:	4b05      	ldr	r3, [pc, #20]	@ (8002174 <SysTick_Config+0x40>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002162:	4b04      	ldr	r3, [pc, #16]	@ (8002174 <SysTick_Config+0x40>)
 8002164:	2207      	movs	r2, #7
 8002166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	e000e010 	.word	0xe000e010

08002178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff ff29 	bl	8001fd8 <__NVIC_SetPriorityGrouping>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800218e:	b580      	push	{r7, lr}
 8002190:	b086      	sub	sp, #24
 8002192:	af00      	add	r7, sp, #0
 8002194:	4603      	mov	r3, r0
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021a0:	f7ff ff3e 	bl	8002020 <__NVIC_GetPriorityGrouping>
 80021a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68b9      	ldr	r1, [r7, #8]
 80021aa:	6978      	ldr	r0, [r7, #20]
 80021ac:	f7ff ff8e 	bl	80020cc <NVIC_EncodePriority>
 80021b0:	4602      	mov	r2, r0
 80021b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff5d 	bl	8002078 <__NVIC_SetPriority>
}
 80021be:	bf00      	nop
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	4603      	mov	r3, r0
 80021ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff31 	bl	800203c <__NVIC_EnableIRQ>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff ffa2 	bl	8002134 <SysTick_Config>
 80021f0:	4603      	mov	r3, r0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002200:	f3bf 8f5f 	dmb	sy
}
 8002204:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002206:	4b07      	ldr	r3, [pc, #28]	@ (8002224 <HAL_MPU_Disable+0x28>)
 8002208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220a:	4a06      	ldr	r2, [pc, #24]	@ (8002224 <HAL_MPU_Disable+0x28>)
 800220c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002210:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002212:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <HAL_MPU_Disable+0x2c>)
 8002214:	2200      	movs	r2, #0
 8002216:	605a      	str	r2, [r3, #4]
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000ed00 	.word	0xe000ed00
 8002228:	e000ed90 	.word	0xe000ed90

0800222c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002234:	4a0b      	ldr	r2, [pc, #44]	@ (8002264 <HAL_MPU_Enable+0x38>)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800223e:	4b0a      	ldr	r3, [pc, #40]	@ (8002268 <HAL_MPU_Enable+0x3c>)
 8002240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002242:	4a09      	ldr	r2, [pc, #36]	@ (8002268 <HAL_MPU_Enable+0x3c>)
 8002244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002248:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800224a:	f3bf 8f4f 	dsb	sy
}
 800224e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002250:	f3bf 8f6f 	isb	sy
}
 8002254:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000ed90 	.word	0xe000ed90
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	785a      	ldrb	r2, [r3, #1]
 8002278:	4b1d      	ldr	r3, [pc, #116]	@ (80022f0 <HAL_MPU_ConfigRegion+0x84>)
 800227a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d029      	beq.n	80022d8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8002284:	4a1a      	ldr	r2, [pc, #104]	@ (80022f0 <HAL_MPU_ConfigRegion+0x84>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	7b1b      	ldrb	r3, [r3, #12]
 8002290:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7adb      	ldrb	r3, [r3, #11]
 8002296:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002298:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	7a9b      	ldrb	r3, [r3, #10]
 800229e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80022a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	7b5b      	ldrb	r3, [r3, #13]
 80022a6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80022a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	7b9b      	ldrb	r3, [r3, #14]
 80022ae:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80022b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	7bdb      	ldrb	r3, [r3, #15]
 80022b6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80022b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	7a5b      	ldrb	r3, [r3, #9]
 80022be:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80022c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	7a1b      	ldrb	r3, [r3, #8]
 80022c6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80022c8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	7812      	ldrb	r2, [r2, #0]
 80022ce:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022d0:	4a07      	ldr	r2, [pc, #28]	@ (80022f0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80022d2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022d4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80022d6:	e005      	b.n	80022e4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80022d8:	4b05      	ldr	r3, [pc, #20]	@ (80022f0 <HAL_MPU_ConfigRegion+0x84>)
 80022da:	2200      	movs	r2, #0
 80022dc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80022de:	4b04      	ldr	r3, [pc, #16]	@ (80022f0 <HAL_MPU_ConfigRegion+0x84>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000ed90 	.word	0xe000ed90

080022f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b089      	sub	sp, #36	@ 0x24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	e175      	b.n	8002600 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002314:	2201      	movs	r2, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	429a      	cmp	r2, r3
 800232e:	f040 8164 	bne.w	80025fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b01      	cmp	r3, #1
 800233c:	d005      	beq.n	800234a <HAL_GPIO_Init+0x56>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d130      	bne.n	80023ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 0201 	and.w	r2, r3, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d017      	beq.n	80023e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	2203      	movs	r2, #3
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d123      	bne.n	800243c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	08da      	lsrs	r2, r3, #3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3208      	adds	r2, #8
 80023fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	220f      	movs	r2, #15
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	08da      	lsrs	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3208      	adds	r2, #8
 8002436:	69b9      	ldr	r1, [r7, #24]
 8002438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0203 	and.w	r2, r3, #3
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80be 	beq.w	80025fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247e:	4b66      	ldr	r3, [pc, #408]	@ (8002618 <HAL_GPIO_Init+0x324>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002482:	4a65      	ldr	r2, [pc, #404]	@ (8002618 <HAL_GPIO_Init+0x324>)
 8002484:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002488:	6453      	str	r3, [r2, #68]	@ 0x44
 800248a:	4b63      	ldr	r3, [pc, #396]	@ (8002618 <HAL_GPIO_Init+0x324>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002496:	4a61      	ldr	r2, [pc, #388]	@ (800261c <HAL_GPIO_Init+0x328>)
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	089b      	lsrs	r3, r3, #2
 800249c:	3302      	adds	r3, #2
 800249e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	220f      	movs	r2, #15
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a58      	ldr	r2, [pc, #352]	@ (8002620 <HAL_GPIO_Init+0x32c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d037      	beq.n	8002532 <HAL_GPIO_Init+0x23e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a57      	ldr	r2, [pc, #348]	@ (8002624 <HAL_GPIO_Init+0x330>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d031      	beq.n	800252e <HAL_GPIO_Init+0x23a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a56      	ldr	r2, [pc, #344]	@ (8002628 <HAL_GPIO_Init+0x334>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d02b      	beq.n	800252a <HAL_GPIO_Init+0x236>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a55      	ldr	r2, [pc, #340]	@ (800262c <HAL_GPIO_Init+0x338>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d025      	beq.n	8002526 <HAL_GPIO_Init+0x232>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a54      	ldr	r2, [pc, #336]	@ (8002630 <HAL_GPIO_Init+0x33c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d01f      	beq.n	8002522 <HAL_GPIO_Init+0x22e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a53      	ldr	r2, [pc, #332]	@ (8002634 <HAL_GPIO_Init+0x340>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d019      	beq.n	800251e <HAL_GPIO_Init+0x22a>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a52      	ldr	r2, [pc, #328]	@ (8002638 <HAL_GPIO_Init+0x344>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d013      	beq.n	800251a <HAL_GPIO_Init+0x226>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a51      	ldr	r2, [pc, #324]	@ (800263c <HAL_GPIO_Init+0x348>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00d      	beq.n	8002516 <HAL_GPIO_Init+0x222>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a50      	ldr	r2, [pc, #320]	@ (8002640 <HAL_GPIO_Init+0x34c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d007      	beq.n	8002512 <HAL_GPIO_Init+0x21e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a4f      	ldr	r2, [pc, #316]	@ (8002644 <HAL_GPIO_Init+0x350>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d101      	bne.n	800250e <HAL_GPIO_Init+0x21a>
 800250a:	2309      	movs	r3, #9
 800250c:	e012      	b.n	8002534 <HAL_GPIO_Init+0x240>
 800250e:	230a      	movs	r3, #10
 8002510:	e010      	b.n	8002534 <HAL_GPIO_Init+0x240>
 8002512:	2308      	movs	r3, #8
 8002514:	e00e      	b.n	8002534 <HAL_GPIO_Init+0x240>
 8002516:	2307      	movs	r3, #7
 8002518:	e00c      	b.n	8002534 <HAL_GPIO_Init+0x240>
 800251a:	2306      	movs	r3, #6
 800251c:	e00a      	b.n	8002534 <HAL_GPIO_Init+0x240>
 800251e:	2305      	movs	r3, #5
 8002520:	e008      	b.n	8002534 <HAL_GPIO_Init+0x240>
 8002522:	2304      	movs	r3, #4
 8002524:	e006      	b.n	8002534 <HAL_GPIO_Init+0x240>
 8002526:	2303      	movs	r3, #3
 8002528:	e004      	b.n	8002534 <HAL_GPIO_Init+0x240>
 800252a:	2302      	movs	r3, #2
 800252c:	e002      	b.n	8002534 <HAL_GPIO_Init+0x240>
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <HAL_GPIO_Init+0x240>
 8002532:	2300      	movs	r3, #0
 8002534:	69fa      	ldr	r2, [r7, #28]
 8002536:	f002 0203 	and.w	r2, r2, #3
 800253a:	0092      	lsls	r2, r2, #2
 800253c:	4093      	lsls	r3, r2
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002544:	4935      	ldr	r1, [pc, #212]	@ (800261c <HAL_GPIO_Init+0x328>)
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	089b      	lsrs	r3, r3, #2
 800254a:	3302      	adds	r3, #2
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002552:	4b3d      	ldr	r3, [pc, #244]	@ (8002648 <HAL_GPIO_Init+0x354>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002576:	4a34      	ldr	r2, [pc, #208]	@ (8002648 <HAL_GPIO_Init+0x354>)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800257c:	4b32      	ldr	r3, [pc, #200]	@ (8002648 <HAL_GPIO_Init+0x354>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025a0:	4a29      	ldr	r2, [pc, #164]	@ (8002648 <HAL_GPIO_Init+0x354>)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025a6:	4b28      	ldr	r3, [pc, #160]	@ (8002648 <HAL_GPIO_Init+0x354>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4013      	ands	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002648 <HAL_GPIO_Init+0x354>)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002648 <HAL_GPIO_Init+0x354>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025f4:	4a14      	ldr	r2, [pc, #80]	@ (8002648 <HAL_GPIO_Init+0x354>)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3301      	adds	r3, #1
 80025fe:	61fb      	str	r3, [r7, #28]
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	2b0f      	cmp	r3, #15
 8002604:	f67f ae86 	bls.w	8002314 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	3724      	adds	r7, #36	@ 0x24
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40023800 	.word	0x40023800
 800261c:	40013800 	.word	0x40013800
 8002620:	40020000 	.word	0x40020000
 8002624:	40020400 	.word	0x40020400
 8002628:	40020800 	.word	0x40020800
 800262c:	40020c00 	.word	0x40020c00
 8002630:	40021000 	.word	0x40021000
 8002634:	40021400 	.word	0x40021400
 8002638:	40021800 	.word	0x40021800
 800263c:	40021c00 	.word	0x40021c00
 8002640:	40022000 	.word	0x40022000
 8002644:	40022400 	.word	0x40022400
 8002648:	40013c00 	.word	0x40013c00

0800264c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002656:	4b23      	ldr	r3, [pc, #140]	@ (80026e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265a:	4a22      	ldr	r2, [pc, #136]	@ (80026e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800265c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002660:	6413      	str	r3, [r2, #64]	@ 0x40
 8002662:	4b20      	ldr	r3, [pc, #128]	@ (80026e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800266e:	4b1e      	ldr	r3, [pc, #120]	@ (80026e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a1d      	ldr	r2, [pc, #116]	@ (80026e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002678:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800267a:	f7fe fd73 	bl	8001164 <HAL_GetTick>
 800267e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002680:	e009      	b.n	8002696 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002682:	f7fe fd6f 	bl	8001164 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002690:	d901      	bls.n	8002696 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e022      	b.n	80026dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002696:	4b14      	ldr	r3, [pc, #80]	@ (80026e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800269e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026a2:	d1ee      	bne.n	8002682 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80026a4:	4b10      	ldr	r3, [pc, #64]	@ (80026e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a0f      	ldr	r2, [pc, #60]	@ (80026e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026b0:	f7fe fd58 	bl	8001164 <HAL_GetTick>
 80026b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026b6:	e009      	b.n	80026cc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026b8:	f7fe fd54 	bl	8001164 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026c6:	d901      	bls.n	80026cc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e007      	b.n	80026dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026cc:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80026d8:	d1ee      	bne.n	80026b8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40023800 	.word	0x40023800
 80026e8:	40007000 	.word	0x40007000

080026ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80026f4:	2300      	movs	r3, #0
 80026f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e29b      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 8087 	beq.w	800281e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002710:	4b96      	ldr	r3, [pc, #600]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 030c 	and.w	r3, r3, #12
 8002718:	2b04      	cmp	r3, #4
 800271a:	d00c      	beq.n	8002736 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800271c:	4b93      	ldr	r3, [pc, #588]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 030c 	and.w	r3, r3, #12
 8002724:	2b08      	cmp	r3, #8
 8002726:	d112      	bne.n	800274e <HAL_RCC_OscConfig+0x62>
 8002728:	4b90      	ldr	r3, [pc, #576]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002730:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002734:	d10b      	bne.n	800274e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002736:	4b8d      	ldr	r3, [pc, #564]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d06c      	beq.n	800281c <HAL_RCC_OscConfig+0x130>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d168      	bne.n	800281c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e275      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002756:	d106      	bne.n	8002766 <HAL_RCC_OscConfig+0x7a>
 8002758:	4b84      	ldr	r3, [pc, #528]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a83      	ldr	r2, [pc, #524]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 800275e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002762:	6013      	str	r3, [r2, #0]
 8002764:	e02e      	b.n	80027c4 <HAL_RCC_OscConfig+0xd8>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10c      	bne.n	8002788 <HAL_RCC_OscConfig+0x9c>
 800276e:	4b7f      	ldr	r3, [pc, #508]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a7e      	ldr	r2, [pc, #504]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 8002774:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	4b7c      	ldr	r3, [pc, #496]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a7b      	ldr	r2, [pc, #492]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 8002780:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	e01d      	b.n	80027c4 <HAL_RCC_OscConfig+0xd8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002790:	d10c      	bne.n	80027ac <HAL_RCC_OscConfig+0xc0>
 8002792:	4b76      	ldr	r3, [pc, #472]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a75      	ldr	r2, [pc, #468]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 8002798:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	4b73      	ldr	r3, [pc, #460]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a72      	ldr	r2, [pc, #456]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 80027a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	e00b      	b.n	80027c4 <HAL_RCC_OscConfig+0xd8>
 80027ac:	4b6f      	ldr	r3, [pc, #444]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a6e      	ldr	r2, [pc, #440]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 80027b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027b6:	6013      	str	r3, [r2, #0]
 80027b8:	4b6c      	ldr	r3, [pc, #432]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a6b      	ldr	r2, [pc, #428]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 80027be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d013      	beq.n	80027f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fe fcca 	bl	8001164 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d4:	f7fe fcc6 	bl	8001164 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	@ 0x64
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e229      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	4b61      	ldr	r3, [pc, #388]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0xe8>
 80027f2:	e014      	b.n	800281e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7fe fcb6 	bl	8001164 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027fc:	f7fe fcb2 	bl	8001164 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b64      	cmp	r3, #100	@ 0x64
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e215      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280e:	4b57      	ldr	r3, [pc, #348]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x110>
 800281a:	e000      	b.n	800281e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d069      	beq.n	80028fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800282a:	4b50      	ldr	r3, [pc, #320]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002836:	4b4d      	ldr	r3, [pc, #308]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b08      	cmp	r3, #8
 8002840:	d11c      	bne.n	800287c <HAL_RCC_OscConfig+0x190>
 8002842:	4b4a      	ldr	r3, [pc, #296]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d116      	bne.n	800287c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284e:	4b47      	ldr	r3, [pc, #284]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <HAL_RCC_OscConfig+0x17a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d001      	beq.n	8002866 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e1e9      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002866:	4b41      	ldr	r3, [pc, #260]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	493d      	ldr	r1, [pc, #244]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 8002876:	4313      	orrs	r3, r2
 8002878:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287a:	e040      	b.n	80028fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d023      	beq.n	80028cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002884:	4b39      	ldr	r3, [pc, #228]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a38      	ldr	r2, [pc, #224]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7fe fc68 	bl	8001164 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002898:	f7fe fc64 	bl	8001164 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e1c7      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028aa:	4b30      	ldr	r3, [pc, #192]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b6:	4b2d      	ldr	r3, [pc, #180]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4929      	ldr	r1, [pc, #164]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]
 80028ca:	e018      	b.n	80028fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028cc:	4b27      	ldr	r3, [pc, #156]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a26      	ldr	r2, [pc, #152]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 80028d2:	f023 0301 	bic.w	r3, r3, #1
 80028d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe fc44 	bl	8001164 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e0:	f7fe fc40 	bl	8001164 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e1a3      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f2:	4b1e      	ldr	r3, [pc, #120]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d038      	beq.n	800297c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d019      	beq.n	8002946 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002912:	4b16      	ldr	r3, [pc, #88]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 8002914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002916:	4a15      	ldr	r2, [pc, #84]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291e:	f7fe fc21 	bl	8001164 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002926:	f7fe fc1d 	bl	8001164 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e180      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002938:	4b0c      	ldr	r3, [pc, #48]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 800293a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x23a>
 8002944:	e01a      	b.n	800297c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002946:	4b09      	ldr	r3, [pc, #36]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 8002948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800294a:	4a08      	ldr	r2, [pc, #32]	@ (800296c <HAL_RCC_OscConfig+0x280>)
 800294c:	f023 0301 	bic.w	r3, r3, #1
 8002950:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002952:	f7fe fc07 	bl	8001164 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002958:	e00a      	b.n	8002970 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800295a:	f7fe fc03 	bl	8001164 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d903      	bls.n	8002970 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e166      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
 800296c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002970:	4b92      	ldr	r3, [pc, #584]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002972:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1ee      	bne.n	800295a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80a4 	beq.w	8002ad2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800298a:	4b8c      	ldr	r3, [pc, #560]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10d      	bne.n	80029b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002996:	4b89      	ldr	r3, [pc, #548]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	4a88      	ldr	r2, [pc, #544]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 800299c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029a2:	4b86      	ldr	r3, [pc, #536]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ae:	2301      	movs	r3, #1
 80029b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b2:	4b83      	ldr	r3, [pc, #524]	@ (8002bc0 <HAL_RCC_OscConfig+0x4d4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d118      	bne.n	80029f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80029be:	4b80      	ldr	r3, [pc, #512]	@ (8002bc0 <HAL_RCC_OscConfig+0x4d4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a7f      	ldr	r2, [pc, #508]	@ (8002bc0 <HAL_RCC_OscConfig+0x4d4>)
 80029c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ca:	f7fe fbcb 	bl	8001164 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d2:	f7fe fbc7 	bl	8001164 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b64      	cmp	r3, #100	@ 0x64
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e12a      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e4:	4b76      	ldr	r3, [pc, #472]	@ (8002bc0 <HAL_RCC_OscConfig+0x4d4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d106      	bne.n	8002a06 <HAL_RCC_OscConfig+0x31a>
 80029f8:	4b70      	ldr	r3, [pc, #448]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 80029fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029fc:	4a6f      	ldr	r2, [pc, #444]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a04:	e02d      	b.n	8002a62 <HAL_RCC_OscConfig+0x376>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10c      	bne.n	8002a28 <HAL_RCC_OscConfig+0x33c>
 8002a0e:	4b6b      	ldr	r3, [pc, #428]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a12:	4a6a      	ldr	r2, [pc, #424]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002a14:	f023 0301 	bic.w	r3, r3, #1
 8002a18:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a1a:	4b68      	ldr	r3, [pc, #416]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1e:	4a67      	ldr	r2, [pc, #412]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002a20:	f023 0304 	bic.w	r3, r3, #4
 8002a24:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a26:	e01c      	b.n	8002a62 <HAL_RCC_OscConfig+0x376>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2b05      	cmp	r3, #5
 8002a2e:	d10c      	bne.n	8002a4a <HAL_RCC_OscConfig+0x35e>
 8002a30:	4b62      	ldr	r3, [pc, #392]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a34:	4a61      	ldr	r2, [pc, #388]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002a36:	f043 0304 	orr.w	r3, r3, #4
 8002a3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a3c:	4b5f      	ldr	r3, [pc, #380]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a40:	4a5e      	ldr	r2, [pc, #376]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a48:	e00b      	b.n	8002a62 <HAL_RCC_OscConfig+0x376>
 8002a4a:	4b5c      	ldr	r3, [pc, #368]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4e:	4a5b      	ldr	r2, [pc, #364]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002a50:	f023 0301 	bic.w	r3, r3, #1
 8002a54:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a56:	4b59      	ldr	r3, [pc, #356]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a5a:	4a58      	ldr	r2, [pc, #352]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002a5c:	f023 0304 	bic.w	r3, r3, #4
 8002a60:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d015      	beq.n	8002a96 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6a:	f7fe fb7b 	bl	8001164 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a70:	e00a      	b.n	8002a88 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a72:	f7fe fb77 	bl	8001164 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e0d8      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a88:	4b4c      	ldr	r3, [pc, #304]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0ee      	beq.n	8002a72 <HAL_RCC_OscConfig+0x386>
 8002a94:	e014      	b.n	8002ac0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a96:	f7fe fb65 	bl	8001164 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9c:	e00a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a9e:	f7fe fb61 	bl	8001164 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e0c2      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab4:	4b41      	ldr	r3, [pc, #260]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1ee      	bne.n	8002a9e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ac0:	7dfb      	ldrb	r3, [r7, #23]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d105      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	4a3c      	ldr	r2, [pc, #240]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002acc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ad0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 80ae 	beq.w	8002c38 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002adc:	4b37      	ldr	r3, [pc, #220]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d06d      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d14b      	bne.n	8002b88 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af0:	4b32      	ldr	r3, [pc, #200]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a31      	ldr	r2, [pc, #196]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002af6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7fe fb32 	bl	8001164 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b04:	f7fe fb2e 	bl	8001164 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e091      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b16:	4b29      	ldr	r3, [pc, #164]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69da      	ldr	r2, [r3, #28]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b30:	019b      	lsls	r3, r3, #6
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b38:	085b      	lsrs	r3, r3, #1
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	041b      	lsls	r3, r3, #16
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b44:	061b      	lsls	r3, r3, #24
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4c:	071b      	lsls	r3, r3, #28
 8002b4e:	491b      	ldr	r1, [pc, #108]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b54:	4b19      	ldr	r3, [pc, #100]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a18      	ldr	r2, [pc, #96]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002b5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7fe fb00 	bl	8001164 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b68:	f7fe fafc 	bl	8001164 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e05f      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7a:	4b10      	ldr	r3, [pc, #64]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCC_OscConfig+0x47c>
 8002b86:	e057      	b.n	8002c38 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b88:	4b0c      	ldr	r3, [pc, #48]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a0b      	ldr	r2, [pc, #44]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002b8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7fe fae6 	bl	8001164 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9c:	f7fe fae2 	bl	8001164 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e045      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bae:	4b03      	ldr	r3, [pc, #12]	@ (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x4b0>
 8002bba:	e03d      	b.n	8002c38 <HAL_RCC_OscConfig+0x54c>
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c44 <HAL_RCC_OscConfig+0x558>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d030      	beq.n	8002c34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d129      	bne.n	8002c34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d122      	bne.n	8002c34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bfa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d119      	bne.n	8002c34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c0a:	085b      	lsrs	r3, r3, #1
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d10f      	bne.n	8002c34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d107      	bne.n	8002c34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800

08002c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0d0      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c60:	4b6a      	ldr	r3, [pc, #424]	@ (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d910      	bls.n	8002c90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6e:	4b67      	ldr	r3, [pc, #412]	@ (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f023 020f 	bic.w	r2, r3, #15
 8002c76:	4965      	ldr	r1, [pc, #404]	@ (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7e:	4b63      	ldr	r3, [pc, #396]	@ (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0b8      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d020      	beq.n	8002cde <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ca8:	4b59      	ldr	r3, [pc, #356]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4a58      	ldr	r2, [pc, #352]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002cae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc0:	4b53      	ldr	r3, [pc, #332]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4a52      	ldr	r2, [pc, #328]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ccc:	4b50      	ldr	r3, [pc, #320]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	494d      	ldr	r1, [pc, #308]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d040      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d107      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf2:	4b47      	ldr	r3, [pc, #284]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d115      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e07f      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d107      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0a:	4b41      	ldr	r3, [pc, #260]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d109      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e073      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e06b      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d2a:	4b39      	ldr	r3, [pc, #228]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f023 0203 	bic.w	r2, r3, #3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4936      	ldr	r1, [pc, #216]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d3c:	f7fe fa12 	bl	8001164 <HAL_GetTick>
 8002d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d42:	e00a      	b.n	8002d5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d44:	f7fe fa0e 	bl	8001164 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e053      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5a:	4b2d      	ldr	r3, [pc, #180]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 020c 	and.w	r2, r3, #12
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d1eb      	bne.n	8002d44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b27      	ldr	r3, [pc, #156]	@ (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d210      	bcs.n	8002d9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4b24      	ldr	r3, [pc, #144]	@ (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 020f 	bic.w	r2, r3, #15
 8002d82:	4922      	ldr	r1, [pc, #136]	@ (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8a:	4b20      	ldr	r3, [pc, #128]	@ (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d001      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e032      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da8:	4b19      	ldr	r3, [pc, #100]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4916      	ldr	r1, [pc, #88]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d009      	beq.n	8002dda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dc6:	4b12      	ldr	r3, [pc, #72]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	490e      	ldr	r1, [pc, #56]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dda:	f000 f821 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8002dde:	4602      	mov	r2, r0
 8002de0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	490a      	ldr	r1, [pc, #40]	@ (8002e14 <HAL_RCC_ClockConfig+0x1cc>)
 8002dec:	5ccb      	ldrb	r3, [r1, r3]
 8002dee:	fa22 f303 	lsr.w	r3, r2, r3
 8002df2:	4a09      	ldr	r2, [pc, #36]	@ (8002e18 <HAL_RCC_ClockConfig+0x1d0>)
 8002df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002df6:	4b09      	ldr	r3, [pc, #36]	@ (8002e1c <HAL_RCC_ClockConfig+0x1d4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe f96e 	bl	80010dc <HAL_InitTick>

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40023c00 	.word	0x40023c00
 8002e10:	40023800 	.word	0x40023800
 8002e14:	0800301c 	.word	0x0800301c
 8002e18:	20000018 	.word	0x20000018
 8002e1c:	2000001c 	.word	0x2000001c

08002e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e24:	b090      	sub	sp, #64	@ 0x40
 8002e26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e30:	2300      	movs	r3, #0
 8002e32:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e38:	4b59      	ldr	r3, [pc, #356]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 030c 	and.w	r3, r3, #12
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d00d      	beq.n	8002e60 <HAL_RCC_GetSysClockFreq+0x40>
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	f200 80a1 	bhi.w	8002f8c <HAL_RCC_GetSysClockFreq+0x16c>
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0x34>
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d003      	beq.n	8002e5a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e52:	e09b      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e54:	4b53      	ldr	r3, [pc, #332]	@ (8002fa4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e58:	e09b      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e5a:	4b53      	ldr	r3, [pc, #332]	@ (8002fa8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e5e:	e098      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e60:	4b4f      	ldr	r3, [pc, #316]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e68:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e6a:	4b4d      	ldr	r3, [pc, #308]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d028      	beq.n	8002ec8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e76:	4b4a      	ldr	r3, [pc, #296]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	099b      	lsrs	r3, r3, #6
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	623b      	str	r3, [r7, #32]
 8002e80:	627a      	str	r2, [r7, #36]	@ 0x24
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e88:	2100      	movs	r1, #0
 8002e8a:	4b47      	ldr	r3, [pc, #284]	@ (8002fa8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e8c:	fb03 f201 	mul.w	r2, r3, r1
 8002e90:	2300      	movs	r3, #0
 8002e92:	fb00 f303 	mul.w	r3, r0, r3
 8002e96:	4413      	add	r3, r2
 8002e98:	4a43      	ldr	r2, [pc, #268]	@ (8002fa8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e9a:	fba0 1202 	umull	r1, r2, r0, r2
 8002e9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ea0:	460a      	mov	r2, r1
 8002ea2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002ea4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ea6:	4413      	add	r3, r2
 8002ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eac:	2200      	movs	r2, #0
 8002eae:	61bb      	str	r3, [r7, #24]
 8002eb0:	61fa      	str	r2, [r7, #28]
 8002eb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002eba:	f7fd f9bd 	bl	8000238 <__aeabi_uldivmod>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ec6:	e053      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec8:	4b35      	ldr	r3, [pc, #212]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	099b      	lsrs	r3, r3, #6
 8002ece:	2200      	movs	r2, #0
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	617a      	str	r2, [r7, #20]
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002eda:	f04f 0b00 	mov.w	fp, #0
 8002ede:	4652      	mov	r2, sl
 8002ee0:	465b      	mov	r3, fp
 8002ee2:	f04f 0000 	mov.w	r0, #0
 8002ee6:	f04f 0100 	mov.w	r1, #0
 8002eea:	0159      	lsls	r1, r3, #5
 8002eec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ef0:	0150      	lsls	r0, r2, #5
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	ebb2 080a 	subs.w	r8, r2, sl
 8002efa:	eb63 090b 	sbc.w	r9, r3, fp
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f12:	ebb2 0408 	subs.w	r4, r2, r8
 8002f16:	eb63 0509 	sbc.w	r5, r3, r9
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	00eb      	lsls	r3, r5, #3
 8002f24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f28:	00e2      	lsls	r2, r4, #3
 8002f2a:	4614      	mov	r4, r2
 8002f2c:	461d      	mov	r5, r3
 8002f2e:	eb14 030a 	adds.w	r3, r4, sl
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	eb45 030b 	adc.w	r3, r5, fp
 8002f38:	607b      	str	r3, [r7, #4]
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f46:	4629      	mov	r1, r5
 8002f48:	028b      	lsls	r3, r1, #10
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f50:	4621      	mov	r1, r4
 8002f52:	028a      	lsls	r2, r1, #10
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	60fa      	str	r2, [r7, #12]
 8002f60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f64:	f7fd f968 	bl	8000238 <__aeabi_uldivmod>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f70:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	0c1b      	lsrs	r3, r3, #16
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002f80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f8a:	e002      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f8c:	4b05      	ldr	r3, [pc, #20]	@ (8002fa4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3740      	adds	r7, #64	@ 0x40
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	00f42400 	.word	0x00f42400
 8002fa8:	017d7840 	.word	0x017d7840

08002fac <memset>:
 8002fac:	4402      	add	r2, r0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d100      	bne.n	8002fb6 <memset+0xa>
 8002fb4:	4770      	bx	lr
 8002fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002fba:	e7f9      	b.n	8002fb0 <memset+0x4>

08002fbc <__libc_init_array>:
 8002fbc:	b570      	push	{r4, r5, r6, lr}
 8002fbe:	4d0d      	ldr	r5, [pc, #52]	@ (8002ff4 <__libc_init_array+0x38>)
 8002fc0:	4c0d      	ldr	r4, [pc, #52]	@ (8002ff8 <__libc_init_array+0x3c>)
 8002fc2:	1b64      	subs	r4, r4, r5
 8002fc4:	10a4      	asrs	r4, r4, #2
 8002fc6:	2600      	movs	r6, #0
 8002fc8:	42a6      	cmp	r6, r4
 8002fca:	d109      	bne.n	8002fe0 <__libc_init_array+0x24>
 8002fcc:	4d0b      	ldr	r5, [pc, #44]	@ (8002ffc <__libc_init_array+0x40>)
 8002fce:	4c0c      	ldr	r4, [pc, #48]	@ (8003000 <__libc_init_array+0x44>)
 8002fd0:	f000 f818 	bl	8003004 <_init>
 8002fd4:	1b64      	subs	r4, r4, r5
 8002fd6:	10a4      	asrs	r4, r4, #2
 8002fd8:	2600      	movs	r6, #0
 8002fda:	42a6      	cmp	r6, r4
 8002fdc:	d105      	bne.n	8002fea <__libc_init_array+0x2e>
 8002fde:	bd70      	pop	{r4, r5, r6, pc}
 8002fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe4:	4798      	blx	r3
 8002fe6:	3601      	adds	r6, #1
 8002fe8:	e7ee      	b.n	8002fc8 <__libc_init_array+0xc>
 8002fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fee:	4798      	blx	r3
 8002ff0:	3601      	adds	r6, #1
 8002ff2:	e7f2      	b.n	8002fda <__libc_init_array+0x1e>
 8002ff4:	08003034 	.word	0x08003034
 8002ff8:	08003034 	.word	0x08003034
 8002ffc:	08003034 	.word	0x08003034
 8003000:	08003038 	.word	0x08003038

08003004 <_init>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	bf00      	nop
 8003008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300a:	bc08      	pop	{r3}
 800300c:	469e      	mov	lr, r3
 800300e:	4770      	bx	lr

08003010 <_fini>:
 8003010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003012:	bf00      	nop
 8003014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003016:	bc08      	pop	{r3}
 8003018:	469e      	mov	lr, r3
 800301a:	4770      	bx	lr
