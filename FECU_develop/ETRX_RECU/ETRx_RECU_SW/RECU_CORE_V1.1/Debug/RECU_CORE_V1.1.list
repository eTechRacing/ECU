
RECU_CORE_V1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006068  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006260  08006260  00007260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006278  08006278  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006278  08006278  00007278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006280  08006280  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006280  08006280  00007280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006284  08006284  00007284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006288  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  2000000c  08006294  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  08006294  000083b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f86c  00000000  00000000  0000803a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002538  00000000  00000000  000178a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00019de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b70  00000000  00000000  0001acb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003ef1  00000000  00000000  0001b828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001126a  00000000  00000000  0001f719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001013f6  00000000  00000000  00030983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131d79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e68  00000000  00000000  00131dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  00135c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006248 	.word	0x08006248

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08006248 	.word	0x08006248

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <P_Controller_Init>:

#include <P_Controller.h>
#include "stdio.h"
#include "stdint.h"

int P_Controller_Init(P_Controller *pc) {
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	pc->out = 65;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2241      	movs	r2, #65	@ 0x41
 8000534:	609a      	str	r2, [r3, #8]
	return pc->out;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	689b      	ldr	r3, [r3, #8]
}
 800053a:	4618      	mov	r0, r3
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <P_Controller_Update>:

int P_Controller_Update(P_Controller *pc, float measurement, int mode, int refri_select) {
 8000546:	b480      	push	{r7}
 8000548:	b089      	sub	sp, #36	@ 0x24
 800054a:	af00      	add	r7, sp, #0
 800054c:	60f8      	str	r0, [r7, #12]
 800054e:	ed87 0a02 	vstr	s0, [r7, #8]
 8000552:	6079      	str	r1, [r7, #4]
 8000554:	603a      	str	r2, [r7, #0]

	uint8_t limit_h;

	//Refri_select
	switch(refri_select)
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	2b02      	cmp	r3, #2
 800055a:	d01b      	beq.n	8000594 <P_Controller_Update+0x4e>
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	2b02      	cmp	r3, #2
 8000560:	dc21      	bgt.n	80005a6 <P_Controller_Update+0x60>
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d003      	beq.n	8000570 <P_Controller_Update+0x2a>
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d009      	beq.n	8000582 <P_Controller_Update+0x3c>
 800056e:	e01a      	b.n	80005a6 <P_Controller_Update+0x60>
	{
	case 0:
		pc->setpoint=P_SETPOINT_ACCU;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	221e      	movs	r2, #30
 8000574:	601a      	str	r2, [r3, #0]
		pc->Kp=P_KP_ACCU;
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	2203      	movs	r2, #3
 800057a:	605a      	str	r2, [r3, #4]
		limit_h=50;
 800057c:	2332      	movs	r3, #50	@ 0x32
 800057e:	77fb      	strb	r3, [r7, #31]
		break;
 8000580:	e011      	b.n	80005a6 <P_Controller_Update+0x60>
	case 1:
		pc->setpoint=P_SETPOINT_MOTOR;
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	223c      	movs	r2, #60	@ 0x3c
 8000586:	601a      	str	r2, [r3, #0]
		pc->Kp=P_KP_MOTOR;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2204      	movs	r2, #4
 800058c:	605a      	str	r2, [r3, #4]
		limit_h=100;
 800058e:	2364      	movs	r3, #100	@ 0x64
 8000590:	77fb      	strb	r3, [r7, #31]
		break;
 8000592:	e008      	b.n	80005a6 <P_Controller_Update+0x60>
	case 2:
		pc->setpoint=P_SETPOINT_INVERTER;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	221e      	movs	r2, #30
 8000598:	601a      	str	r2, [r3, #0]
		pc->Kp=P_KP_INVERTER;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	2204      	movs	r2, #4
 800059e:	605a      	str	r2, [r3, #4]
		limit_h=100;
 80005a0:	2364      	movs	r3, #100	@ 0x64
 80005a2:	77fb      	strb	r3, [r7, #31]
		break;
 80005a4:	bf00      	nop
	}

	/*
	* Error signal
	*/
    float error = measurement - pc->setpoint;
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	ee07 3a90 	vmov	s15, r3
 80005ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005b2:	ed97 7a02 	vldr	s14, [r7, #8]
 80005b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005ba:	edc7 7a06 	vstr	s15, [r7, #24]

	/*
	* Proportional
	*/
    float proportional = pc->Kp * error;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	ee07 3a90 	vmov	s15, r3
 80005c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005ca:	ed97 7a06 	vldr	s14, [r7, #24]
 80005ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005d2:	edc7 7a05 	vstr	s15, [r7, #20]

	/*
	* Compute output and apply limits
	*/
    if(mode==1){
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d103      	bne.n	80005e4 <P_Controller_Update+0x9e>
    	pc->out=10;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	220a      	movs	r2, #10
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	e021      	b.n	8000628 <P_Controller_Update+0xe2>
    }
    else if (mode==0){
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d118      	bne.n	800061c <P_Controller_Update+0xd6>
    	pc->out = proportional;
 80005ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80005ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005f2:	ee17 2a90 	vmov	r2, s15
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	609a      	str	r2, [r3, #8]
    	if (pc->out > limit_h) {
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	689a      	ldr	r2, [r3, #8]
 80005fe:	7ffb      	ldrb	r3, [r7, #31]
 8000600:	429a      	cmp	r2, r3
 8000602:	dd03      	ble.n	800060c <P_Controller_Update+0xc6>
    		pc->out = limit_h;
 8000604:	7ffa      	ldrb	r2, [r7, #31]
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	e00d      	b.n	8000628 <P_Controller_Update+0xe2>
    	} else if (pc->out < 5) {
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	2b04      	cmp	r3, #4
 8000612:	dc09      	bgt.n	8000628 <P_Controller_Update+0xe2>
    	    pc->out = 5;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	2205      	movs	r2, #5
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	e005      	b.n	8000628 <P_Controller_Update+0xe2>
    	}
    }
    else if (mode==2){
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2b02      	cmp	r3, #2
 8000620:	d102      	bne.n	8000628 <P_Controller_Update+0xe2>
    	pc->out=limit_h;
 8000622:	7ffa      	ldrb	r2, [r7, #31]
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	609a      	str	r2, [r3, #8]
    }
	/* Return controller output */
    return pc->out;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	689b      	ldr	r3, [r3, #8]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3724      	adds	r7, #36	@ 0x24
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <CAN1_FILTER_INIT>:





void CAN1_FILTER_INIT(CAN_FilterTypeDef *canfil){
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	   canfil->FilterBank = 0;								// This refers to which filter is being configured. On this case is the filter number 0
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
	   canfil->FilterMode = CAN_FILTERMODE_IDMASK;					// FilterMode: How are we filtering the incoming messages. Only the messages that coincide with the mask and the filter are accepted
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
	   canfil->FilterFIFOAssignment = CAN_FILTER_FIFO0;			// Defines at which FIFO is this filter being configured to.
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
	   canfil->FilterIdHigh = 0x0000;						// MSB: Most Significant Bit. When it's in 0, accepts all the messages
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
	   canfil->FilterIdLow = 0x0000;						// LSB: Least Significant Bit. When it's in 0, accepts all the messages
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2200      	movs	r2, #0
 800065c:	605a      	str	r2, [r3, #4]
	   canfil->FilterMaskIdHigh = 0x0000;					// Most Significant Bit of the mask. When it's in 0, accepts all the messages
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
	   canfil->FilterMaskIdLow = 0x0000;					// Least Significant Bit of the mask. When it's in 0, accepts all the messages
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
	   canfil->FilterScale = CAN_FILTERSCALE_32BIT;				// Defines the Filter Scale. (use the 32 bits)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2201      	movs	r2, #1
 800066e:	61da      	str	r2, [r3, #28]
	   canfil->FilterActivation = ENABLE;					// This activates the filter as it is enable
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2201      	movs	r2, #1
 8000674:	621a      	str	r2, [r3, #32]
	   canfil->SlaveStartFilterBank = 14;					// Indicates the first filter slave number. In this case it is the principal filter.
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	220e      	movs	r2, #14
 800067a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <CAN2_FILTER_INIT>:

void CAN2_FILTER_INIT(CAN_FilterTypeDef *canfil){
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	   canfil->FilterBank = 14;								// This refers to which filter is being configured. On this case is the filter number 0
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	220e      	movs	r2, #14
 8000694:	615a      	str	r2, [r3, #20]
	   canfil->FilterMode = CAN_FILTERMODE_IDMASK;					// FilterMode: How are we filtering the incoming messages. Only the messages that coincide with the mask and the filter are accepted
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
	   canfil->FilterFIFOAssignment = CAN_FILTER_FIFO1;			// Defines at which FIFO is this filter being configured to.
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2201      	movs	r2, #1
 80006a0:	611a      	str	r2, [r3, #16]
	   canfil->FilterIdHigh = 0x0000;						// MSB: Most Significant Bit. When it's in 0, accepts all the messages
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
	   canfil->FilterIdLow = 0x0000;						// LSB: Least Significant Bit. When it's in 0, accepts all the messages
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2200      	movs	r2, #0
 80006ac:	605a      	str	r2, [r3, #4]
	   canfil->FilterMaskIdHigh = 0x0000;					// Most Significant Bit of the mask. When it's in 0, accepts all the messages
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
	   canfil->FilterMaskIdLow = 0x0000;					// Least Significant Bit of the mask. When it's in 0, accepts all the messages
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
	   canfil->FilterScale = CAN_FILTERSCALE_32BIT;				// Defines the Filter Scale. (use the 32 bits)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2201      	movs	r2, #1
 80006be:	61da      	str	r2, [r3, #28]
	   canfil->FilterActivation = ENABLE;					// This activates the filter as it is enable
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2201      	movs	r2, #1
 80006c4:	621a      	str	r2, [r3, #32]
	   canfil->SlaveStartFilterBank = 14;					// Indicates the first filter slave number. In this case it is the principal filter.
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	220e      	movs	r2, #14
 80006ca:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <CAN1_CONFIG_INIT>:

void CAN1_CONFIG_INIT(CAN_FilterTypeDef canfil, CAN_HandleTypeDef hcan){
 80006d8:	b084      	sub	sp, #16
 80006da:	b580      	push	{r7, lr}
 80006dc:	af00      	add	r7, sp, #0
 80006de:	f107 0c08 	add.w	ip, r7, #8
 80006e2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if(HAL_CAN_ConfigFilter(&hcan, &canfil) != HAL_OK) Error_Handler();
 80006e6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006ea:	f107 0108 	add.w	r1, r7, #8
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 f9fe 	bl	8002af0 <HAL_CAN_ConfigFilter>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <CAN1_CONFIG_INIT+0x26>
 80006fa:	f001 f8f7 	bl	80018ec <Error_Handler>
    if(HAL_CAN_Start(&hcan) != HAL_OK)Error_Handler();
 80006fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000702:	4618      	mov	r0, r3
 8000704:	f002 fae0 	bl	8002cc8 <HAL_CAN_Start>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <CAN1_CONFIG_INIT+0x3a>
 800070e:	f001 f8ed 	bl	80018ec <Error_Handler>
    if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)Error_Handler();
 8000712:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000716:	2102      	movs	r1, #2
 8000718:	4618      	mov	r0, r3
 800071a:	f002 fd0b 	bl	8003134 <HAL_CAN_ActivateNotification>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <CAN1_CONFIG_INIT+0x50>
 8000724:	f001 f8e2 	bl	80018ec <Error_Handler>
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000730:	b004      	add	sp, #16
 8000732:	4770      	bx	lr

08000734 <CAN2_CONFIG_INIT>:

void CAN2_CONFIG_INIT(CAN_FilterTypeDef canfil, CAN_HandleTypeDef hcan){
 8000734:	b084      	sub	sp, #16
 8000736:	b580      	push	{r7, lr}
 8000738:	af00      	add	r7, sp, #0
 800073a:	f107 0c08 	add.w	ip, r7, #8
 800073e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if(HAL_CAN_ConfigFilter(&hcan, &canfil) != HAL_OK) Error_Handler();
 8000742:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000746:	f107 0108 	add.w	r1, r7, #8
 800074a:	4618      	mov	r0, r3
 800074c:	f002 f9d0 	bl	8002af0 <HAL_CAN_ConfigFilter>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <CAN2_CONFIG_INIT+0x26>
 8000756:	f001 f8c9 	bl	80018ec <Error_Handler>
    if(HAL_CAN_Start(&hcan) != HAL_OK)Error_Handler();
 800075a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800075e:	4618      	mov	r0, r3
 8000760:	f002 fab2 	bl	8002cc8 <HAL_CAN_Start>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <CAN2_CONFIG_INIT+0x3a>
 800076a:	f001 f8bf 	bl	80018ec <Error_Handler>
    if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)Error_Handler();
 800076e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000772:	2110      	movs	r1, #16
 8000774:	4618      	mov	r0, r3
 8000776:	f002 fcdd 	bl	8003134 <HAL_CAN_ActivateNotification>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <CAN2_CONFIG_INIT+0x50>
 8000780:	f001 f8b4 	bl	80018ec <Error_Handler>
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800078c:	b004      	add	sp, #16
 800078e:	4770      	bx	lr

08000790 <message_cantx_RECU_Data>:
						//Sent data. The TxData is the buffer where the data is saved

		}


	void message_cantx_RECU_Data(CAN_HandleTypeDef hcan2,uint16_t Susp_R_R, uint16_t Susp_R_L,uint8_t *TxData, CAN_TxHeaderTypeDef TxHeader){
 8000790:	b084      	sub	sp, #16
 8000792:	b580      	push	{r7, lr}
 8000794:	af00      	add	r7, sp, #0
 8000796:	f107 0c08 	add.w	ip, r7, #8
 800079a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

		TxHeader.DLC = 4; 									//Number of bites to be transmitted max- 8. DLC: Data Length Code
 800079e:	2304      	movs	r3, #4
 80007a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
		TxHeader.IDE = 0;									//IDE: Identifier Extension. ID_STD: Standard Identifier. Dominant(0) = 11 bit ID, Recessive(1) = 29 bit ID
 80007a2:	2300      	movs	r3, #0
 80007a4:	647b      	str	r3, [r7, #68]	@ 0x44
		TxHeader.RTR = 0;									//RTR: Remote Transmission Request, Dominant(0) = Data frame, Recessive (1) = Remote Frame. Type of trace
 80007a6:	2300      	movs	r3, #0
 80007a8:	64bb      	str	r3, [r7, #72]	@ 0x48
		TxHeader.StdId = 0xA0;								//Standard identifier ID
 80007aa:	23a0      	movs	r3, #160	@ 0xa0
 80007ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
		TxHeader.TransmitGlobalTime = DISABLE;				//A temporal mark in the CAN message is not added
 80007ae:	2300      	movs	r3, #0
 80007b0:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
		TxData[0] = Susp_R_R >> 8;						//Sent data. The TxData is the buffer where the data is saved
 80007b4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80007b6:	0a1b      	lsrs	r3, r3, #8
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80007be:	701a      	strb	r2, [r3, #0]
		TxData[1] = Susp_R_R;
 80007c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80007c2:	3301      	adds	r3, #1
 80007c4:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80007c6:	b2d2      	uxtb	r2, r2
 80007c8:	701a      	strb	r2, [r3, #0]
		TxData[2] = Susp_R_L >> 8;
 80007ca:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80007cc:	0a1b      	lsrs	r3, r3, #8
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80007d2:	3302      	adds	r3, #2
 80007d4:	b2d2      	uxtb	r2, r2
 80007d6:	701a      	strb	r2, [r3, #0]
		TxData[3] = Susp_R_L;
 80007d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80007da:	3303      	adds	r3, #3
 80007dc:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80007de:	b2d2      	uxtb	r2, r2
 80007e0:	701a      	strb	r2, [r3, #0]
		if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK);
 80007e2:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80007e6:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <message_cantx_RECU_Data+0x70>)
 80007e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80007ea:	f107 0008 	add.w	r0, r7, #8
 80007ee:	f002 faaf 	bl	8002d50 <HAL_CAN_AddTxMessage>

		}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007fa:	b004      	add	sp, #16
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	20000028 	.word	0x20000028

08000804 <message_cantx_RECU_SDC>:

	void message_cantx_RECU_SDC(CAN_HandleTypeDef hcan,uint8_t TSMS_TSMP, uint8_t Right_TS, uint8_t Left_TS, uint8_t HVBox, uint8_t HVD,uint8_t *TxData, CAN_TxHeaderTypeDef TxHeader){
 8000804:	b084      	sub	sp, #16
 8000806:	b580      	push	{r7, lr}
 8000808:	af00      	add	r7, sp, #0
 800080a:	f107 0c08 	add.w	ip, r7, #8
 800080e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

			TxHeader.DLC = 1; 									//Number of bites to be transmitted max- 8. DLC: Data Length Code
 8000812:	2301      	movs	r3, #1
 8000814:	65bb      	str	r3, [r7, #88]	@ 0x58
			TxHeader.IDE = 0;									//IDE: Identifier Extension. ID_STD: Standard Identifier. Dominant(0) = 11 bit ID, Recessive(1) = 29 bit ID
 8000816:	2300      	movs	r3, #0
 8000818:	653b      	str	r3, [r7, #80]	@ 0x50
			TxHeader.RTR = 0;									//RTR: Remote Transmission Request, Dominant(0) = Data frame, Recessive (1) = Remote Frame. Type of trace
 800081a:	2300      	movs	r3, #0
 800081c:	657b      	str	r3, [r7, #84]	@ 0x54
			TxHeader.StdId = 0xD1;								//Standard identifier ID
 800081e:	23d1      	movs	r3, #209	@ 0xd1
 8000820:	64bb      	str	r3, [r7, #72]	@ 0x48
			TxHeader.TransmitGlobalTime = DISABLE;				//A temporal mark in the CAN message is not added
 8000822:	2300      	movs	r3, #0
 8000824:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
			TxData[0] = (0b00011111)&(0b00000000|TSMS_TSMP|Right_TS<<1|Left_TS<<2|HVBox<<3|HVD<<4);						//Sent data. The TxData is the buffer where the data is saved
 8000828:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	b25a      	sxtb	r2, r3
 8000830:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8000834:	4313      	orrs	r3, r2
 8000836:	b25a      	sxtb	r2, r3
 8000838:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	b25b      	sxtb	r3, r3
 8000840:	4313      	orrs	r3, r2
 8000842:	b25a      	sxtb	r2, r3
 8000844:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	4313      	orrs	r3, r2
 800084e:	b25a      	sxtb	r2, r3
 8000850:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000854:	011b      	lsls	r3, r3, #4
 8000856:	b25b      	sxtb	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	b25b      	sxtb	r3, r3
 800085c:	b2db      	uxtb	r3, r3
 800085e:	f003 031f 	and.w	r3, r3, #31
 8000862:	b2da      	uxtb	r2, r3
 8000864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000866:	701a      	strb	r2, [r3, #0]
			if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK);
 8000868:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800086c:	4b05      	ldr	r3, [pc, #20]	@ (8000884 <message_cantx_RECU_SDC+0x80>)
 800086e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000870:	f107 0008 	add.w	r0, r7, #8
 8000874:	f002 fa6c 	bl	8002d50 <HAL_CAN_AddTxMessage>

			}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr
 8000884:	20000028 	.word	0x20000028

08000888 <message_cantx_RECU_Keep_Alive>:

	void message_cantx_RECU_Keep_Alive(CAN_HandleTypeDef hcan, uint8_t Keep_Alive,uint8_t *TxData, CAN_TxHeaderTypeDef TxHeader){
 8000888:	b084      	sub	sp, #16
 800088a:	b580      	push	{r7, lr}
 800088c:	af00      	add	r7, sp, #0
 800088e:	f107 0c08 	add.w	ip, r7, #8
 8000892:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

		TxHeader.DLC = 1; 									//Number of bites to be transmitted max- 8. DLC: Data Length Code
 8000896:	2301      	movs	r3, #1
 8000898:	64bb      	str	r3, [r7, #72]	@ 0x48
		TxHeader.IDE = 0;									//IDE: Identifier Extension. ID_STD: Standard Identifier. Dominant(0) = 11 bit ID, Recessive(1) = 29 bit ID
 800089a:	2300      	movs	r3, #0
 800089c:	643b      	str	r3, [r7, #64]	@ 0x40
		TxHeader.RTR = 0;									//RTR: Remote Transmission Request, Dominant(0) = Data frame, Recessive (1) = Remote Frame. Type of trace
 800089e:	2300      	movs	r3, #0
 80008a0:	647b      	str	r3, [r7, #68]	@ 0x44
		TxHeader.StdId = 0xCB;								//Standard identifier ID
 80008a2:	23cb      	movs	r3, #203	@ 0xcb
 80008a4:	63bb      	str	r3, [r7, #56]	@ 0x38
		TxHeader.TransmitGlobalTime = DISABLE;				//A temporal mark in the CAN message is not added
 80008a6:	2300      	movs	r3, #0
 80008a8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
		TxData[0] = Keep_Alive;						//Sent data. The TxData is the buffer where the data is saved
 80008ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008ae:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80008b2:	701a      	strb	r2, [r3, #0]
		if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK);
 80008b4:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80008b8:	4b05      	ldr	r3, [pc, #20]	@ (80008d0 <message_cantx_RECU_Keep_Alive+0x48>)
 80008ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80008bc:	f107 0008 	add.w	r0, r7, #8
 80008c0:	f002 fa46 	bl	8002d50 <HAL_CAN_AddTxMessage>

		}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008cc:	b004      	add	sp, #16
 80008ce:	4770      	bx	lr
 80008d0:	20000028 	.word	0x20000028
 80008d4:	00000000 	.word	0x00000000

080008d8 <applyLowPassFilter>:
//        v->out = v->in;        // Without filter. Out(k) = In(k)
//    }
//}

void applyLowPassFilter(uint16_t *value)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	float fc = 1.0f;  // Cutoff frequency in kHz
 80008e0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80008e4:	617b      	str	r3, [r7, #20]
	float Ts = 0.001f;  // Sampling time in seconds
 80008e6:	4b34      	ldr	r3, [pc, #208]	@ (80009b8 <applyLowPassFilter+0xe0>)
 80008e8:	613b      	str	r3, [r7, #16]
	float alpha = (fc*Ts*1000.0*PI2)/((fc*Ts*1000.0*PI2)+1.0);
 80008ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80008ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80008f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008fa:	ed9f 6b2b 	vldr	d6, [pc, #172]	@ 80009a8 <applyLowPassFilter+0xd0>
 80008fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000902:	ed9f 6b2b 	vldr	d6, [pc, #172]	@ 80009b0 <applyLowPassFilter+0xd8>
 8000906:	ee27 5b06 	vmul.f64	d5, d7, d6
 800090a:	ed97 7a05 	vldr	s14, [r7, #20]
 800090e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000916:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800091a:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 80009a8 <applyLowPassFilter+0xd0>
 800091e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000922:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 80009b0 <applyLowPassFilter+0xd8>
 8000926:	ee27 7b06 	vmul.f64	d7, d7, d6
 800092a:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800092e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000932:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000936:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800093a:	edc7 7a03 	vstr	s15, [r7, #12]
	value[0] = (uint16_t)round(alpha*value[0]+(1-alpha)*value[1]);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	ee07 3a90 	vmov	s15, r3
 8000946:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800094a:	edd7 7a03 	vldr	s15, [r7, #12]
 800094e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000952:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000956:	edd7 7a03 	vldr	s15, [r7, #12]
 800095a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3302      	adds	r3, #2
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	ee07 3a90 	vmov	s15, r3
 8000968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800096c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000970:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000974:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000978:	eeb0 0b47 	vmov.f64	d0, d7
 800097c:	f005 fc20 	bl	80061c0 <round>
 8000980:	eeb0 7b40 	vmov.f64	d7, d0
 8000984:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000988:	ee17 3a90 	vmov	r3, s15
 800098c:	b29a      	uxth	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	801a      	strh	r2, [r3, #0]
	value[1] = value[0];
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	3302      	adds	r3, #2
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	8812      	ldrh	r2, [r2, #0]
 800099a:	801a      	strh	r2, [r3, #0]
}
 800099c:	bf00      	nop
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	f3af 8000 	nop.w
 80009a8:	00000000 	.word	0x00000000
 80009ac:	408f4000 	.word	0x408f4000
 80009b0:	54442d18 	.word	0x54442d18
 80009b4:	401921fb 	.word	0x401921fb
 80009b8:	3a83126f 	.word	0x3a83126f

080009bc <refri_init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void refri_init(void){
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 80009c0:	2104      	movs	r1, #4
 80009c2:	4817      	ldr	r0, [pc, #92]	@ (8000a20 <refri_init+0x64>)
 80009c4:	f003 fce1 	bl	800438a <HAL_GPIO_TogglePin>
	TIM3->CCR4=100 - P_Controller_Init(pc);
 80009c8:	4b16      	ldr	r3, [pc, #88]	@ (8000a24 <refri_init+0x68>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fdab 	bl	8000528 <P_Controller_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
 80009d8:	4b13      	ldr	r3, [pc, #76]	@ (8000a28 <refri_init+0x6c>)
 80009da:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_Delay(500);
 80009dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009e0:	f001 fb42 	bl	8002068 <HAL_Delay>
	TIM8->CCR3=100 - P_Controller_Init(pc);
 80009e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <refri_init+0x68>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fd9d 	bl	8000528 <P_Controller_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
 80009f4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <refri_init+0x70>)
 80009f6:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_Delay(500);
 80009f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009fc:	f001 fb34 	bl	8002068 <HAL_Delay>
	TIM8->CCR2=100 - P_Controller_Init(pc);
 8000a00:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <refri_init+0x68>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fd8f 	bl	8000528 <P_Controller_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <refri_init+0x70>)
 8000a12:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(500);
 8000a14:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a18:	f001 fb26 	bl	8002068 <HAL_Delay>
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40020000 	.word	0x40020000
 8000a24:	20000070 	.word	0x20000070
 8000a28:	40000400 	.word	0x40000400
 8000a2c:	40010400 	.word	0x40010400

08000a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a32:	b091      	sub	sp, #68	@ 0x44
 8000a34:	af10      	add	r7, sp, #64	@ 0x40
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a36:	f000 ff2d 	bl	8001894 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3a:	f001 fab8 	bl	8001fae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3e:	f000 f87d 	bl	8000b3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a42:	f000 fc25 	bl	8001290 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a46:	f000 fc05 	bl	8001254 <MX_DMA_Init>
  MX_ADC1_Init();
 8000a4a:	f000 f8e7 	bl	8000c1c <MX_ADC1_Init>
  MX_CAN1_Init();
 8000a4e:	f000 f997 	bl	8000d80 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000a52:	f000 f9cb 	bl	8000dec <MX_CAN2_Init>
  MX_TIM3_Init();
 8000a56:	f000 fa8d 	bl	8000f74 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000a5a:	f000 fb4f 	bl	80010fc <MX_TIM8_Init>
  MX_TIM4_Init();
 8000a5e:	f000 faff 	bl	8001060 <MX_TIM4_Init>
  MX_ADC2_Init();
 8000a62:	f000 f93b 	bl	8000cdc <MX_ADC2_Init>
  MX_TIM1_Init();
 8000a66:	f000 f9f7 	bl	8000e58 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

   CAN1_FILTER_INIT(&canfil);												//CAN 1 Filter
 8000a6a:	482a      	ldr	r0, [pc, #168]	@ (8000b14 <main+0xe4>)
 8000a6c:	f7ff fde4 	bl	8000638 <CAN1_FILTER_INIT>
   CAN2_FILTER_INIT(&canfil2);											//CAN 2 Filter
 8000a70:	4829      	ldr	r0, [pc, #164]	@ (8000b18 <main+0xe8>)
 8000a72:	f7ff fe09 	bl	8000688 <CAN2_FILTER_INIT>

   CAN1_CONFIG_INIT(canfil, hcan1);										//CAN 1 Configuration - Initialization
 8000a76:	4e27      	ldr	r6, [pc, #156]	@ (8000b14 <main+0xe4>)
 8000a78:	4b28      	ldr	r3, [pc, #160]	@ (8000b1c <main+0xec>)
 8000a7a:	ac06      	add	r4, sp, #24
 8000a7c:	461d      	mov	r5, r3
 8000a7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a86:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a8a:	e884 0003 	stmia.w	r4, {r0, r1}
 8000a8e:	466d      	mov	r5, sp
 8000a90:	f106 0410 	add.w	r4, r6, #16
 8000a94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000aa0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000aa4:	f7ff fe18 	bl	80006d8 <CAN1_CONFIG_INIT>
   CAN2_CONFIG_INIT(canfil2, hcan2);										//CAN 2 Configuration - Initialization
 8000aa8:	4e1b      	ldr	r6, [pc, #108]	@ (8000b18 <main+0xe8>)
 8000aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8000b20 <main+0xf0>)
 8000aac:	ac06      	add	r4, sp, #24
 8000aae:	461d      	mov	r5, r3
 8000ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000abc:	e884 0003 	stmia.w	r4, {r0, r1}
 8000ac0:	466d      	mov	r5, sp
 8000ac2:	f106 0410 	add.w	r4, r6, #16
 8000ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000aca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ace:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ad2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ad6:	f7ff fe2d 	bl	8000734 <CAN2_CONFIG_INIT>


  HAL_ADC_Start_DMA(&hadc1,(uint32_t*) adc_buffer, 2);
 8000ada:	2202      	movs	r2, #2
 8000adc:	4911      	ldr	r1, [pc, #68]	@ (8000b24 <main+0xf4>)
 8000ade:	4812      	ldr	r0, [pc, #72]	@ (8000b28 <main+0xf8>)
 8000ae0:	f001 fb2a 	bl	8002138 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim4);
 8000ae4:	4811      	ldr	r0, [pc, #68]	@ (8000b2c <main+0xfc>)
 8000ae6:	f004 f973 	bl	8004dd0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000aea:	210c      	movs	r1, #12
 8000aec:	4810      	ldr	r0, [pc, #64]	@ (8000b30 <main+0x100>)
 8000aee:	f004 fa3f 	bl	8004f70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000af2:	2108      	movs	r1, #8
 8000af4:	480f      	ldr	r0, [pc, #60]	@ (8000b34 <main+0x104>)
 8000af6:	f004 fa3b 	bl	8004f70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000afa:	2104      	movs	r1, #4
 8000afc:	480d      	ldr	r0, [pc, #52]	@ (8000b34 <main+0x104>)
 8000afe:	f004 fa37 	bl	8004f70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b02:	2100      	movs	r1, #0
 8000b04:	480c      	ldr	r0, [pc, #48]	@ (8000b38 <main+0x108>)
 8000b06:	f004 fa33 	bl	8004f70 <HAL_TIM_PWM_Start>
  refri_init();
 8000b0a:	f7ff ff57 	bl	80009bc <refri_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b0e:	bf00      	nop
 8000b10:	e7fd      	b.n	8000b0e <main+0xde>
 8000b12:	bf00      	nop
 8000b14:	200000a8 	.word	0x200000a8
 8000b18:	200000d0 	.word	0x200000d0
 8000b1c:	20000228 	.word	0x20000228
 8000b20:	20000250 	.word	0x20000250
 8000b24:	2000002c 	.word	0x2000002c
 8000b28:	20000138 	.word	0x20000138
 8000b2c:	20000310 	.word	0x20000310
 8000b30:	200002c4 	.word	0x200002c4
 8000b34:	2000035c 	.word	0x2000035c
 8000b38:	20000278 	.word	0x20000278

08000b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b094      	sub	sp, #80	@ 0x50
 8000b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	2234      	movs	r2, #52	@ 0x34
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f005 fb0c 	bl	8006168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b60:	4b2c      	ldr	r3, [pc, #176]	@ (8000c14 <SystemClock_Config+0xd8>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b64:	4a2b      	ldr	r2, [pc, #172]	@ (8000c14 <SystemClock_Config+0xd8>)
 8000b66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6c:	4b29      	ldr	r3, [pc, #164]	@ (8000c14 <SystemClock_Config+0xd8>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b78:	4b27      	ldr	r3, [pc, #156]	@ (8000c18 <SystemClock_Config+0xdc>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b80:	4a25      	ldr	r2, [pc, #148]	@ (8000c18 <SystemClock_Config+0xdc>)
 8000b82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b86:	6013      	str	r3, [r2, #0]
 8000b88:	4b23      	ldr	r3, [pc, #140]	@ (8000c18 <SystemClock_Config+0xdc>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b94:	2302      	movs	r3, #2
 8000b96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b9c:	2310      	movs	r3, #16
 8000b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ba8:	2308      	movs	r3, #8
 8000baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 108;
 8000bac:	236c      	movs	r3, #108	@ 0x6c
 8000bae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f003 fc4d 	bl	8004460 <HAL_RCC_OscConfig>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bcc:	f000 fe8e 	bl	80018ec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bd0:	f003 fbf6 	bl	80043c0 <HAL_PWREx_EnableOverDrive>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000bda:	f000 fe87 	bl	80018ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bde:	230f      	movs	r3, #15
 8000be0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be2:	2302      	movs	r3, #2
 8000be4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bf4:	f107 0308 	add.w	r3, r7, #8
 8000bf8:	2103      	movs	r1, #3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f003 fede 	bl	80049bc <HAL_RCC_ClockConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000c06:	f000 fe71 	bl	80018ec <Error_Handler>
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	3750      	adds	r7, #80	@ 0x50
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40007000 	.word	0x40007000

08000c1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c22:	463b      	mov	r3, r7
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c2e:	4b29      	ldr	r3, [pc, #164]	@ (8000cd4 <MX_ADC1_Init+0xb8>)
 8000c30:	4a29      	ldr	r2, [pc, #164]	@ (8000cd8 <MX_ADC1_Init+0xbc>)
 8000c32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c34:	4b27      	ldr	r3, [pc, #156]	@ (8000cd4 <MX_ADC1_Init+0xb8>)
 8000c36:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c3c:	4b25      	ldr	r3, [pc, #148]	@ (8000cd4 <MX_ADC1_Init+0xb8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c42:	4b24      	ldr	r3, [pc, #144]	@ (8000cd4 <MX_ADC1_Init+0xb8>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c48:	4b22      	ldr	r3, [pc, #136]	@ (8000cd4 <MX_ADC1_Init+0xb8>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c4e:	4b21      	ldr	r3, [pc, #132]	@ (8000cd4 <MX_ADC1_Init+0xb8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c56:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd4 <MX_ADC1_Init+0xb8>)
 8000c58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T5_TRGO;
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd4 <MX_ADC1_Init+0xb8>)
 8000c60:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c66:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd4 <MX_ADC1_Init+0xb8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000c6c:	4b19      	ldr	r3, [pc, #100]	@ (8000cd4 <MX_ADC1_Init+0xb8>)
 8000c6e:	2202      	movs	r2, #2
 8000c70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c72:	4b18      	ldr	r3, [pc, #96]	@ (8000cd4 <MX_ADC1_Init+0xb8>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c7a:	4b16      	ldr	r3, [pc, #88]	@ (8000cd4 <MX_ADC1_Init+0xb8>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c80:	4814      	ldr	r0, [pc, #80]	@ (8000cd4 <MX_ADC1_Init+0xb8>)
 8000c82:	f001 fa15 	bl	80020b0 <HAL_ADC_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000c8c:	f000 fe2e 	bl	80018ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000c90:	230d      	movs	r3, #13
 8000c92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c94:	2301      	movs	r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000c98:	2307      	movs	r3, #7
 8000c9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480c      	ldr	r0, [pc, #48]	@ (8000cd4 <MX_ADC1_Init+0xb8>)
 8000ca2:	f001 fb57 	bl	8002354 <HAL_ADC_ConfigChannel>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000cac:	f000 fe1e 	bl	80018ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000cb0:	230c      	movs	r3, #12
 8000cb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb8:	463b      	mov	r3, r7
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	@ (8000cd4 <MX_ADC1_Init+0xb8>)
 8000cbe:	f001 fb49 	bl	8002354 <HAL_ADC_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000cc8:	f000 fe10 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000138 	.word	0x20000138
 8000cd8:	40012000 	.word	0x40012000

08000cdc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000cee:	4b21      	ldr	r3, [pc, #132]	@ (8000d74 <MX_ADC2_Init+0x98>)
 8000cf0:	4a21      	ldr	r2, [pc, #132]	@ (8000d78 <MX_ADC2_Init+0x9c>)
 8000cf2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d74 <MX_ADC2_Init+0x98>)
 8000cf6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000cfa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d74 <MX_ADC2_Init+0x98>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d02:	4b1c      	ldr	r3, [pc, #112]	@ (8000d74 <MX_ADC2_Init+0x98>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d08:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <MX_ADC2_Init+0x98>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d0e:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <MX_ADC2_Init+0x98>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d16:	4b17      	ldr	r3, [pc, #92]	@ (8000d74 <MX_ADC2_Init+0x98>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d1c:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <MX_ADC2_Init+0x98>)
 8000d1e:	4a17      	ldr	r2, [pc, #92]	@ (8000d7c <MX_ADC2_Init+0xa0>)
 8000d20:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d22:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <MX_ADC2_Init+0x98>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000d28:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <MX_ADC2_Init+0x98>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <MX_ADC2_Init+0x98>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d36:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <MX_ADC2_Init+0x98>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d3c:	480d      	ldr	r0, [pc, #52]	@ (8000d74 <MX_ADC2_Init+0x98>)
 8000d3e:	f001 f9b7 	bl	80020b0 <HAL_ADC_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000d48:	f000 fdd0 	bl	80018ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000d4c:	230c      	movs	r3, #12
 8000d4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d50:	2301      	movs	r3, #1
 8000d52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d58:	463b      	mov	r3, r7
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4805      	ldr	r0, [pc, #20]	@ (8000d74 <MX_ADC2_Init+0x98>)
 8000d5e:	f001 faf9 	bl	8002354 <HAL_ADC_ConfigChannel>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000d68:	f000 fdc0 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d6c:	bf00      	nop
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000180 	.word	0x20000180
 8000d78:	40012100 	.word	0x40012100
 8000d7c:	0f000001 	.word	0x0f000001

08000d80 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000d84:	4b17      	ldr	r3, [pc, #92]	@ (8000de4 <MX_CAN1_Init+0x64>)
 8000d86:	4a18      	ldr	r2, [pc, #96]	@ (8000de8 <MX_CAN1_Init+0x68>)
 8000d88:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000d8a:	4b16      	ldr	r3, [pc, #88]	@ (8000de4 <MX_CAN1_Init+0x64>)
 8000d8c:	220c      	movs	r2, #12
 8000d8e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d90:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <MX_CAN1_Init+0x64>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d96:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <MX_CAN1_Init+0x64>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <MX_CAN1_Init+0x64>)
 8000d9e:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8000da2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <MX_CAN1_Init+0x64>)
 8000da6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000daa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000dac:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <MX_CAN1_Init+0x64>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <MX_CAN1_Init+0x64>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <MX_CAN1_Init+0x64>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000dbe:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <MX_CAN1_Init+0x64>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <MX_CAN1_Init+0x64>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <MX_CAN1_Init+0x64>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000dd0:	4804      	ldr	r0, [pc, #16]	@ (8000de4 <MX_CAN1_Init+0x64>)
 8000dd2:	f001 fd91 	bl	80028f8 <HAL_CAN_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000ddc:	f000 fd86 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000228 	.word	0x20000228
 8000de8:	40006400 	.word	0x40006400

08000dec <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000df0:	4b17      	ldr	r3, [pc, #92]	@ (8000e50 <MX_CAN2_Init+0x64>)
 8000df2:	4a18      	ldr	r2, [pc, #96]	@ (8000e54 <MX_CAN2_Init+0x68>)
 8000df4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 12;
 8000df6:	4b16      	ldr	r3, [pc, #88]	@ (8000e50 <MX_CAN2_Init+0x64>)
 8000df8:	220c      	movs	r2, #12
 8000dfa:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000dfc:	4b14      	ldr	r3, [pc, #80]	@ (8000e50 <MX_CAN2_Init+0x64>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e02:	4b13      	ldr	r3, [pc, #76]	@ (8000e50 <MX_CAN2_Init+0x64>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000e08:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <MX_CAN2_Init+0x64>)
 8000e0a:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8000e0e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <MX_CAN2_Init+0x64>)
 8000e12:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000e16:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000e18:	4b0d      	ldr	r3, [pc, #52]	@ (8000e50 <MX_CAN2_Init+0x64>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <MX_CAN2_Init+0x64>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000e24:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <MX_CAN2_Init+0x64>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000e2a:	4b09      	ldr	r3, [pc, #36]	@ (8000e50 <MX_CAN2_Init+0x64>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000e30:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <MX_CAN2_Init+0x64>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000e36:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <MX_CAN2_Init+0x64>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000e3c:	4804      	ldr	r0, [pc, #16]	@ (8000e50 <MX_CAN2_Init+0x64>)
 8000e3e:	f001 fd5b 	bl	80028f8 <HAL_CAN_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000e48:	f000 fd50 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000250 	.word	0x20000250
 8000e54:	40006800 	.word	0x40006800

08000e58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b096      	sub	sp, #88	@ 0x58
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e5e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e6a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]
 8000e7a:	615a      	str	r2, [r3, #20]
 8000e7c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	222c      	movs	r2, #44	@ 0x2c
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f005 f96f 	bl	8006168 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e8a:	4b38      	ldr	r3, [pc, #224]	@ (8000f6c <MX_TIM1_Init+0x114>)
 8000e8c:	4a38      	ldr	r2, [pc, #224]	@ (8000f70 <MX_TIM1_Init+0x118>)
 8000e8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 54;
 8000e90:	4b36      	ldr	r3, [pc, #216]	@ (8000f6c <MX_TIM1_Init+0x114>)
 8000e92:	2236      	movs	r2, #54	@ 0x36
 8000e94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e96:	4b35      	ldr	r3, [pc, #212]	@ (8000f6c <MX_TIM1_Init+0x114>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000e9c:	4b33      	ldr	r3, [pc, #204]	@ (8000f6c <MX_TIM1_Init+0x114>)
 8000e9e:	2263      	movs	r2, #99	@ 0x63
 8000ea0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea2:	4b32      	ldr	r3, [pc, #200]	@ (8000f6c <MX_TIM1_Init+0x114>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ea8:	4b30      	ldr	r3, [pc, #192]	@ (8000f6c <MX_TIM1_Init+0x114>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eae:	4b2f      	ldr	r3, [pc, #188]	@ (8000f6c <MX_TIM1_Init+0x114>)
 8000eb0:	2280      	movs	r2, #128	@ 0x80
 8000eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000eb4:	482d      	ldr	r0, [pc, #180]	@ (8000f6c <MX_TIM1_Init+0x114>)
 8000eb6:	f004 f803 	bl	8004ec0 <HAL_TIM_PWM_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000ec0:	f000 fd14 	bl	80018ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ed0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4825      	ldr	r0, [pc, #148]	@ (8000f6c <MX_TIM1_Init+0x114>)
 8000ed8:	f005 f81c 	bl	8005f14 <HAL_TIMEx_MasterConfigSynchronization>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000ee2:	f000 fd03 	bl	80018ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee6:	2360      	movs	r3, #96	@ 0x60
 8000ee8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000efe:	2300      	movs	r3, #0
 8000f00:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f02:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f06:	2200      	movs	r2, #0
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4818      	ldr	r0, [pc, #96]	@ (8000f6c <MX_TIM1_Init+0x114>)
 8000f0c:	f004 fa32 	bl	8005374 <HAL_TIM_PWM_ConfigChannel>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000f16:	f000 fce9 	bl	80018ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f32:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f40:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4807      	ldr	r0, [pc, #28]	@ (8000f6c <MX_TIM1_Init+0x114>)
 8000f50:	f005 f86e 	bl	8006030 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000f5a:	f000 fcc7 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f5e:	4803      	ldr	r0, [pc, #12]	@ (8000f6c <MX_TIM1_Init+0x114>)
 8000f60:	f000 fed2 	bl	8001d08 <HAL_TIM_MspPostInit>

}
 8000f64:	bf00      	nop
 8000f66:	3758      	adds	r7, #88	@ 0x58
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000278 	.word	0x20000278
 8000f70:	40010000 	.word	0x40010000

08000f74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08e      	sub	sp, #56	@ 0x38
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f94:	463b      	mov	r3, r7
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]
 8000fa2:	615a      	str	r2, [r3, #20]
 8000fa4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fa6:	4b2c      	ldr	r3, [pc, #176]	@ (8001058 <MX_TIM3_Init+0xe4>)
 8000fa8:	4a2c      	ldr	r2, [pc, #176]	@ (800105c <MX_TIM3_Init+0xe8>)
 8000faa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 54;
 8000fac:	4b2a      	ldr	r3, [pc, #168]	@ (8001058 <MX_TIM3_Init+0xe4>)
 8000fae:	2236      	movs	r2, #54	@ 0x36
 8000fb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb2:	4b29      	ldr	r3, [pc, #164]	@ (8001058 <MX_TIM3_Init+0xe4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000fb8:	4b27      	ldr	r3, [pc, #156]	@ (8001058 <MX_TIM3_Init+0xe4>)
 8000fba:	2263      	movs	r2, #99	@ 0x63
 8000fbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fbe:	4b26      	ldr	r3, [pc, #152]	@ (8001058 <MX_TIM3_Init+0xe4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fc4:	4b24      	ldr	r3, [pc, #144]	@ (8001058 <MX_TIM3_Init+0xe4>)
 8000fc6:	2280      	movs	r2, #128	@ 0x80
 8000fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fca:	4823      	ldr	r0, [pc, #140]	@ (8001058 <MX_TIM3_Init+0xe4>)
 8000fcc:	f003 fea8 	bl	8004d20 <HAL_TIM_Base_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000fd6:	f000 fc89 	bl	80018ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fde:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fe0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	481c      	ldr	r0, [pc, #112]	@ (8001058 <MX_TIM3_Init+0xe4>)
 8000fe8:	f004 fad8 	bl	800559c <HAL_TIM_ConfigClockSource>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000ff2:	f000 fc7b 	bl	80018ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ff6:	4818      	ldr	r0, [pc, #96]	@ (8001058 <MX_TIM3_Init+0xe4>)
 8000ff8:	f003 ff62 	bl	8004ec0 <HAL_TIM_PWM_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001002:	f000 fc73 	bl	80018ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	4619      	mov	r1, r3
 8001014:	4810      	ldr	r0, [pc, #64]	@ (8001058 <MX_TIM3_Init+0xe4>)
 8001016:	f004 ff7d 	bl	8005f14 <HAL_TIMEx_MasterConfigSynchronization>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001020:	f000 fc64 	bl	80018ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001024:	2360      	movs	r3, #96	@ 0x60
 8001026:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001034:	463b      	mov	r3, r7
 8001036:	220c      	movs	r2, #12
 8001038:	4619      	mov	r1, r3
 800103a:	4807      	ldr	r0, [pc, #28]	@ (8001058 <MX_TIM3_Init+0xe4>)
 800103c:	f004 f99a 	bl	8005374 <HAL_TIM_PWM_ConfigChannel>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001046:	f000 fc51 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800104a:	4803      	ldr	r0, [pc, #12]	@ (8001058 <MX_TIM3_Init+0xe4>)
 800104c:	f000 fe5c 	bl	8001d08 <HAL_TIM_MspPostInit>

}
 8001050:	bf00      	nop
 8001052:	3738      	adds	r7, #56	@ 0x38
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200002c4 	.word	0x200002c4
 800105c:	40000400 	.word	0x40000400

08001060 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800107e:	4b1d      	ldr	r3, [pc, #116]	@ (80010f4 <MX_TIM4_Init+0x94>)
 8001080:	4a1d      	ldr	r2, [pc, #116]	@ (80010f8 <MX_TIM4_Init+0x98>)
 8001082:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 216;
 8001084:	4b1b      	ldr	r3, [pc, #108]	@ (80010f4 <MX_TIM4_Init+0x94>)
 8001086:	22d8      	movs	r2, #216	@ 0xd8
 8001088:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108a:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <MX_TIM4_Init+0x94>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001090:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <MX_TIM4_Init+0x94>)
 8001092:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001096:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001098:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <MX_TIM4_Init+0x94>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109e:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <MX_TIM4_Init+0x94>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010a4:	4813      	ldr	r0, [pc, #76]	@ (80010f4 <MX_TIM4_Init+0x94>)
 80010a6:	f003 fe3b 	bl	8004d20 <HAL_TIM_Base_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80010b0:	f000 fc1c 	bl	80018ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	4619      	mov	r1, r3
 80010c0:	480c      	ldr	r0, [pc, #48]	@ (80010f4 <MX_TIM4_Init+0x94>)
 80010c2:	f004 fa6b 	bl	800559c <HAL_TIM_ConfigClockSource>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80010cc:	f000 fc0e 	bl	80018ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d0:	2300      	movs	r3, #0
 80010d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	@ (80010f4 <MX_TIM4_Init+0x94>)
 80010de:	f004 ff19 	bl	8005f14 <HAL_TIMEx_MasterConfigSynchronization>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80010e8:	f000 fc00 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000310 	.word	0x20000310
 80010f8:	40000800 	.word	0x40000800

080010fc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b09a      	sub	sp, #104	@ 0x68
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800111c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
 800112c:	615a      	str	r2, [r3, #20]
 800112e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	222c      	movs	r2, #44	@ 0x2c
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f005 f816 	bl	8006168 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800113c:	4b43      	ldr	r3, [pc, #268]	@ (800124c <MX_TIM8_Init+0x150>)
 800113e:	4a44      	ldr	r2, [pc, #272]	@ (8001250 <MX_TIM8_Init+0x154>)
 8001140:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 54;
 8001142:	4b42      	ldr	r3, [pc, #264]	@ (800124c <MX_TIM8_Init+0x150>)
 8001144:	2236      	movs	r2, #54	@ 0x36
 8001146:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001148:	4b40      	ldr	r3, [pc, #256]	@ (800124c <MX_TIM8_Init+0x150>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 800114e:	4b3f      	ldr	r3, [pc, #252]	@ (800124c <MX_TIM8_Init+0x150>)
 8001150:	2263      	movs	r2, #99	@ 0x63
 8001152:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001154:	4b3d      	ldr	r3, [pc, #244]	@ (800124c <MX_TIM8_Init+0x150>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800115a:	4b3c      	ldr	r3, [pc, #240]	@ (800124c <MX_TIM8_Init+0x150>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001160:	4b3a      	ldr	r3, [pc, #232]	@ (800124c <MX_TIM8_Init+0x150>)
 8001162:	2280      	movs	r2, #128	@ 0x80
 8001164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001166:	4839      	ldr	r0, [pc, #228]	@ (800124c <MX_TIM8_Init+0x150>)
 8001168:	f003 fdda 	bl	8004d20 <HAL_TIM_Base_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001172:	f000 fbbb 	bl	80018ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001176:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800117a:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800117c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001180:	4619      	mov	r1, r3
 8001182:	4832      	ldr	r0, [pc, #200]	@ (800124c <MX_TIM8_Init+0x150>)
 8001184:	f004 fa0a 	bl	800559c <HAL_TIM_ConfigClockSource>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800118e:	f000 fbad 	bl	80018ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001192:	482e      	ldr	r0, [pc, #184]	@ (800124c <MX_TIM8_Init+0x150>)
 8001194:	f003 fe94 	bl	8004ec0 <HAL_TIM_PWM_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800119e:	f000 fba5 	bl	80018ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80011ae:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80011b2:	4619      	mov	r1, r3
 80011b4:	4825      	ldr	r0, [pc, #148]	@ (800124c <MX_TIM8_Init+0x150>)
 80011b6:	f004 fead 	bl	8005f14 <HAL_TIMEx_MasterConfigSynchronization>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 80011c0:	f000 fb94 	bl	80018ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011c4:	2360      	movs	r3, #96	@ 0x60
 80011c6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011cc:	2300      	movs	r3, #0
 80011ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011d0:	2300      	movs	r3, #0
 80011d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011dc:	2300      	movs	r3, #0
 80011de:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011e4:	2204      	movs	r2, #4
 80011e6:	4619      	mov	r1, r3
 80011e8:	4818      	ldr	r0, [pc, #96]	@ (800124c <MX_TIM8_Init+0x150>)
 80011ea:	f004 f8c3 	bl	8005374 <HAL_TIM_PWM_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 80011f4:	f000 fb7a 	bl	80018ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800120c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001210:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800121a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800121e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4807      	ldr	r0, [pc, #28]	@ (800124c <MX_TIM8_Init+0x150>)
 800122e:	f004 feff 	bl	8006030 <HAL_TIMEx_ConfigBreakDeadTime>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001238:	f000 fb58 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800123c:	4803      	ldr	r0, [pc, #12]	@ (800124c <MX_TIM8_Init+0x150>)
 800123e:	f000 fd63 	bl	8001d08 <HAL_TIM_MspPostInit>

}
 8001242:	bf00      	nop
 8001244:	3768      	adds	r7, #104	@ 0x68
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	2000035c 	.word	0x2000035c
 8001250:	40010400 	.word	0x40010400

08001254 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800125a:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <MX_DMA_Init+0x38>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a0b      	ldr	r2, [pc, #44]	@ (800128c <MX_DMA_Init+0x38>)
 8001260:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b09      	ldr	r3, [pc, #36]	@ (800128c <MX_DMA_Init+0x38>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2102      	movs	r1, #2
 8001276:	2038      	movs	r0, #56	@ 0x38
 8001278:	f002 fa83 	bl	8003782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800127c:	2038      	movs	r0, #56	@ 0x38
 800127e:	f002 fa9c 	bl	80037ba <HAL_NVIC_EnableIRQ>

}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800

08001290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	@ 0x28
 8001294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a6:	4b36      	ldr	r3, [pc, #216]	@ (8001380 <MX_GPIO_Init+0xf0>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a35      	ldr	r2, [pc, #212]	@ (8001380 <MX_GPIO_Init+0xf0>)
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b33      	ldr	r3, [pc, #204]	@ (8001380 <MX_GPIO_Init+0xf0>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	4b30      	ldr	r3, [pc, #192]	@ (8001380 <MX_GPIO_Init+0xf0>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001380 <MX_GPIO_Init+0xf0>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001380 <MX_GPIO_Init+0xf0>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001380 <MX_GPIO_Init+0xf0>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	4a29      	ldr	r2, [pc, #164]	@ (8001380 <MX_GPIO_Init+0xf0>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e2:	4b27      	ldr	r3, [pc, #156]	@ (8001380 <MX_GPIO_Init+0xf0>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ee:	4b24      	ldr	r3, [pc, #144]	@ (8001380 <MX_GPIO_Init+0xf0>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	4a23      	ldr	r2, [pc, #140]	@ (8001380 <MX_GPIO_Init+0xf0>)
 80012f4:	f043 0310 	orr.w	r3, r3, #16
 80012f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fa:	4b21      	ldr	r3, [pc, #132]	@ (8001380 <MX_GPIO_Init+0xf0>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	f003 0310 	and.w	r3, r3, #16
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001306:	4b1e      	ldr	r3, [pc, #120]	@ (8001380 <MX_GPIO_Init+0xf0>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	4a1d      	ldr	r2, [pc, #116]	@ (8001380 <MX_GPIO_Init+0xf0>)
 800130c:	f043 0308 	orr.w	r3, r3, #8
 8001310:	6313      	str	r3, [r2, #48]	@ 0x30
 8001312:	4b1b      	ldr	r3, [pc, #108]	@ (8001380 <MX_GPIO_Init+0xf0>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	211e      	movs	r1, #30
 8001322:	4818      	ldr	r0, [pc, #96]	@ (8001384 <MX_GPIO_Init+0xf4>)
 8001324:	f003 f818 	bl	8004358 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001328:	231e      	movs	r3, #30
 800132a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132c:	2301      	movs	r3, #1
 800132e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	4811      	ldr	r0, [pc, #68]	@ (8001384 <MX_GPIO_Init+0xf4>)
 8001340:	f002 fe46 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TSMS_TSMP_Pin */
  GPIO_InitStruct.Pin = TSMS_TSMP_Pin;
 8001344:	2304      	movs	r3, #4
 8001346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TSMS_TSMP_GPIO_Port, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	480c      	ldr	r0, [pc, #48]	@ (8001388 <MX_GPIO_Init+0xf8>)
 8001358:	f002 fe3a 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Right_TS_Pin Left_TS_Pin HVBox_Pin HVD_Pin */
  GPIO_InitStruct.Pin = Right_TS_Pin|Left_TS_Pin|HVBox_Pin|HVD_Pin;
 800135c:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8001360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	4806      	ldr	r0, [pc, #24]	@ (800138c <MX_GPIO_Init+0xfc>)
 8001372:	f002 fe2d 	bl	8003fd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001376:	bf00      	nop
 8001378:	3728      	adds	r7, #40	@ 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800
 8001384:	40020000 	.word	0x40020000
 8001388:	40020400 	.word	0x40020400
 800138c:	40021000 	.word	0x40021000

08001390 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	   	  Susp_R_R[0] = adc_buffer[0];
 8001398:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <HAL_ADC_ConvCpltCallback+0x2c>)
 800139a:	881a      	ldrh	r2, [r3, #0]
 800139c:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <HAL_ADC_ConvCpltCallback+0x30>)
 800139e:	801a      	strh	r2, [r3, #0]
	   	applyLowPassFilter(Susp_R_R);
 80013a0:	4807      	ldr	r0, [pc, #28]	@ (80013c0 <HAL_ADC_ConvCpltCallback+0x30>)
 80013a2:	f7ff fa99 	bl	80008d8 <applyLowPassFilter>
	   	  Susp_R_L[0] = adc_buffer[1];
 80013a6:	4b05      	ldr	r3, [pc, #20]	@ (80013bc <HAL_ADC_ConvCpltCallback+0x2c>)
 80013a8:	885a      	ldrh	r2, [r3, #2]
 80013aa:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <HAL_ADC_ConvCpltCallback+0x34>)
 80013ac:	801a      	strh	r2, [r3, #0]
	   	applyLowPassFilter(Susp_R_L);
 80013ae:	4805      	ldr	r0, [pc, #20]	@ (80013c4 <HAL_ADC_ConvCpltCallback+0x34>)
 80013b0:	f7ff fa92 	bl	80008d8 <applyLowPassFilter>
  }
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	2000002c 	.word	0x2000002c
 80013c0:	20000030 	.word	0x20000030
 80013c4:	20000034 	.word	0x20000034

080013c8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
		//Lectura del missatge rebut
	   if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) Error_Handler();
 80013d0:	4b12      	ldr	r3, [pc, #72]	@ (800141c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80013d2:	4a13      	ldr	r2, [pc, #76]	@ (8001420 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80013d4:	2100      	movs	r1, #0
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f001 fd8a 	bl	8002ef0 <HAL_CAN_GetRxMessage>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
 80013e2:	f000 fa83 	bl	80018ec <Error_Handler>

	    switch(RxHeader.StdId){
 80013e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001420 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b93      	cmp	r3, #147	@ 0x93
 80013ec:	d112      	bne.n	8001414 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
	      	case(ACCU_TEMP):
	      			Temperature_Accu=((RxData[2]<<8)+RxData[3])/10;
 80013ee:	4b0b      	ldr	r3, [pc, #44]	@ (800141c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80013f0:	789b      	ldrb	r3, [r3, #2]
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	4a09      	ldr	r2, [pc, #36]	@ (800141c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80013f6:	78d2      	ldrb	r2, [r2, #3]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80013fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001400:	1092      	asrs	r2, r2, #2
 8001402:	17db      	asrs	r3, r3, #31
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140e:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8001410:	edc3 7a00 	vstr	s15, [r3]
	        }
	   }
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200000f8 	.word	0x200000f8
 8001420:	20000074 	.word	0x20000074
 8001424:	66666667 	.word	0x66666667
 8001428:	20000050 	.word	0x20000050

0800142c <HAL_CAN_RxFifo1MsgPendingCallback>:


void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
 {
 800142c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142e:	b099      	sub	sp, #100	@ 0x64
 8001430:	af12      	add	r7, sp, #72	@ 0x48
 8001432:	6178      	str	r0, [r7, #20]
	   if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK) Error_Handler();
 8001434:	4baf      	ldr	r3, [pc, #700]	@ (80016f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 8001436:	4ab0      	ldr	r2, [pc, #704]	@ (80016f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 8001438:	2101      	movs	r1, #1
 800143a:	6978      	ldr	r0, [r7, #20]
 800143c:	f001 fd58 	bl	8002ef0 <HAL_CAN_GetRxMessage>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_CAN_RxFifo1MsgPendingCallback+0x1e>
 8001446:	f000 fa51 	bl	80018ec <Error_Handler>

	   switch(RxHeader.StdId){
 800144a:	4bab      	ldr	r3, [pc, #684]	@ (80016f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2bd3      	cmp	r3, #211	@ 0xd3
 8001450:	f000 80f7 	beq.w	8001642 <HAL_CAN_RxFifo1MsgPendingCallback+0x216>
 8001454:	2bd3      	cmp	r3, #211	@ 0xd3
 8001456:	f200 8149 	bhi.w	80016ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>
 800145a:	2bd2      	cmp	r3, #210	@ 0xd2
 800145c:	f000 80ce 	beq.w	80015fc <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>
 8001460:	2bd2      	cmp	r3, #210	@ 0xd2
 8001462:	f200 8143 	bhi.w	80016ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>
 8001466:	2ba1      	cmp	r3, #161	@ 0xa1
 8001468:	f000 80ae 	beq.w	80015c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>
 800146c:	2ba1      	cmp	r3, #161	@ 0xa1
 800146e:	f200 813d 	bhi.w	80016ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>
 8001472:	2b80      	cmp	r3, #128	@ 0x80
 8001474:	d003      	beq.n	800147e <HAL_CAN_RxFifo1MsgPendingCallback+0x52>
 8001476:	2b81      	cmp	r3, #129	@ 0x81
 8001478:	f000 8106 	beq.w	8001688 <HAL_CAN_RxFifo1MsgPendingCallback+0x25c>
	   	 		    			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
	   	 		    		}

	   	 			   	    break;
	   	 		   	   }
 }
 800147c:	e136      	b.n	80016ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>
							message_cantx_RECU_Keep_Alive(hcan2, Keep_Alive, TxData, TxHeader);
 800147e:	4b9f      	ldr	r3, [pc, #636]	@ (80016fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	4e9e      	ldr	r6, [pc, #632]	@ (8001700 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 8001486:	4b9f      	ldr	r3, [pc, #636]	@ (8001704 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 8001488:	ac08      	add	r4, sp, #32
 800148a:	461d      	mov	r5, r3
 800148c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800148e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001490:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001494:	e884 0003 	stmia.w	r4, {r0, r1}
 8001498:	4b9b      	ldr	r3, [pc, #620]	@ (8001708 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800149a:	9307      	str	r3, [sp, #28]
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	9306      	str	r3, [sp, #24]
 80014a0:	466d      	mov	r5, sp
 80014a2:	f106 0410 	add.w	r4, r6, #16
 80014a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80014b2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80014b6:	f7ff f9e7 	bl	8000888 <message_cantx_RECU_Keep_Alive>
	   	 					message_cantx_RECU_Data(hcan2, Susp_R_R[0], Susp_R_L[0], TxData, TxHeader);
 80014ba:	4b94      	ldr	r3, [pc, #592]	@ (800170c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	4b93      	ldr	r3, [pc, #588]	@ (8001710 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e4>)
 80014c2:	881a      	ldrh	r2, [r3, #0]
 80014c4:	60fa      	str	r2, [r7, #12]
 80014c6:	4e8e      	ldr	r6, [pc, #568]	@ (8001700 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 80014c8:	4b8e      	ldr	r3, [pc, #568]	@ (8001704 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 80014ca:	ac09      	add	r4, sp, #36	@ 0x24
 80014cc:	461d      	mov	r5, r3
 80014ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014d6:	e884 0003 	stmia.w	r4, {r0, r1}
 80014da:	4b8b      	ldr	r3, [pc, #556]	@ (8001708 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 80014dc:	9308      	str	r3, [sp, #32]
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	9207      	str	r2, [sp, #28]
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	9306      	str	r3, [sp, #24]
 80014e6:	466d      	mov	r5, sp
 80014e8:	f106 0410 	add.w	r4, r6, #16
 80014ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80014f8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80014fc:	f7ff f948 	bl	8000790 <message_cantx_RECU_Data>
	   	 					TSMS=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 8001500:	2104      	movs	r1, #4
 8001502:	4884      	ldr	r0, [pc, #528]	@ (8001714 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 8001504:	f002 ff10 	bl	8004328 <HAL_GPIO_ReadPin>
 8001508:	4603      	mov	r3, r0
 800150a:	461a      	mov	r2, r3
 800150c:	4b82      	ldr	r3, [pc, #520]	@ (8001718 <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 800150e:	701a      	strb	r2, [r3, #0]
	   	 					TS_Right=HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001510:	2180      	movs	r1, #128	@ 0x80
 8001512:	4882      	ldr	r0, [pc, #520]	@ (800171c <HAL_CAN_RxFifo1MsgPendingCallback+0x2f0>)
 8001514:	f002 ff08 	bl	8004328 <HAL_GPIO_ReadPin>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	4b80      	ldr	r3, [pc, #512]	@ (8001720 <HAL_CAN_RxFifo1MsgPendingCallback+0x2f4>)
 800151e:	701a      	strb	r2, [r3, #0]
	   	 					TS_Left=HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8);
 8001520:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001524:	487d      	ldr	r0, [pc, #500]	@ (800171c <HAL_CAN_RxFifo1MsgPendingCallback+0x2f0>)
 8001526:	f002 feff 	bl	8004328 <HAL_GPIO_ReadPin>
 800152a:	4603      	mov	r3, r0
 800152c:	461a      	mov	r2, r3
 800152e:	4b7d      	ldr	r3, [pc, #500]	@ (8001724 <HAL_CAN_RxFifo1MsgPendingCallback+0x2f8>)
 8001530:	701a      	strb	r2, [r3, #0]
	   	 					HV_Box=HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9);
 8001532:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001536:	4879      	ldr	r0, [pc, #484]	@ (800171c <HAL_CAN_RxFifo1MsgPendingCallback+0x2f0>)
 8001538:	f002 fef6 	bl	8004328 <HAL_GPIO_ReadPin>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	4b79      	ldr	r3, [pc, #484]	@ (8001728 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fc>)
 8001542:	701a      	strb	r2, [r3, #0]
	   	 					HVD=HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10);
 8001544:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001548:	4874      	ldr	r0, [pc, #464]	@ (800171c <HAL_CAN_RxFifo1MsgPendingCallback+0x2f0>)
 800154a:	f002 feed 	bl	8004328 <HAL_GPIO_ReadPin>
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	4b76      	ldr	r3, [pc, #472]	@ (800172c <HAL_CAN_RxFifo1MsgPendingCallback+0x300>)
 8001554:	701a      	strb	r2, [r3, #0]
	   	 		   	   	   	message_cantx_RECU_SDC(hcan2,TSMS ,TS_Right ,TS_Left , HV_Box, HVD, TxData, TxHeader);
 8001556:	4b70      	ldr	r3, [pc, #448]	@ (8001718 <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	4b70      	ldr	r3, [pc, #448]	@ (8001720 <HAL_CAN_RxFifo1MsgPendingCallback+0x2f4>)
 800155e:	781a      	ldrb	r2, [r3, #0]
 8001560:	60fa      	str	r2, [r7, #12]
 8001562:	4b70      	ldr	r3, [pc, #448]	@ (8001724 <HAL_CAN_RxFifo1MsgPendingCallback+0x2f8>)
 8001564:	7819      	ldrb	r1, [r3, #0]
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	4b6f      	ldr	r3, [pc, #444]	@ (8001728 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fc>)
 800156a:	7818      	ldrb	r0, [r3, #0]
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	4b6f      	ldr	r3, [pc, #444]	@ (800172c <HAL_CAN_RxFifo1MsgPendingCallback+0x300>)
 8001570:	781c      	ldrb	r4, [r3, #0]
 8001572:	603c      	str	r4, [r7, #0]
 8001574:	4e62      	ldr	r6, [pc, #392]	@ (8001700 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 8001576:	4b63      	ldr	r3, [pc, #396]	@ (8001704 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 8001578:	ac0c      	add	r4, sp, #48	@ 0x30
 800157a:	461d      	mov	r5, r3
 800157c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800157e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001580:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001584:	e884 0003 	stmia.w	r4, {r0, r1}
 8001588:	4b5f      	ldr	r3, [pc, #380]	@ (8001708 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800158a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800158c:	683c      	ldr	r4, [r7, #0]
 800158e:	940a      	str	r4, [sp, #40]	@ 0x28
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	9009      	str	r0, [sp, #36]	@ 0x24
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	9108      	str	r1, [sp, #32]
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	9207      	str	r2, [sp, #28]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	9306      	str	r3, [sp, #24]
 80015a0:	466d      	mov	r5, sp
 80015a2:	f106 0410 	add.w	r4, r6, #16
 80015a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80015b2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80015b6:	f7ff f925 	bl	8000804 <message_cantx_RECU_SDC>
	   	 			  		Keep_Alive++;
 80015ba:	4b50      	ldr	r3, [pc, #320]	@ (80016fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4b4e      	ldr	r3, [pc, #312]	@ (80016fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 80015c4:	701a      	strb	r2, [r3, #0]
	   	 			   break;
 80015c6:	e091      	b.n	80016ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>
	   	 		     	   Refri_Accu = RxData[0] & 0b00000011;
 80015c8:	4b4a      	ldr	r3, [pc, #296]	@ (80016f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	4b57      	ldr	r3, [pc, #348]	@ (8001730 <HAL_CAN_RxFifo1MsgPendingCallback+0x304>)
 80015d4:	701a      	strb	r2, [r3, #0]
	   	 		     	   Refri_Inverters = (RxData[0] & 0b00001100)>>2;
 80015d6:	4b47      	ldr	r3, [pc, #284]	@ (80016f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	109b      	asrs	r3, r3, #2
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	4b53      	ldr	r3, [pc, #332]	@ (8001734 <HAL_CAN_RxFifo1MsgPendingCallback+0x308>)
 80015e6:	701a      	strb	r2, [r3, #0]
	   	 		     	   Refri_Motors = (RxData[0] & 0b00110000)>>4;
 80015e8:	4b42      	ldr	r3, [pc, #264]	@ (80016f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	111b      	asrs	r3, r3, #4
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4b50      	ldr	r3, [pc, #320]	@ (8001738 <HAL_CAN_RxFifo1MsgPendingCallback+0x30c>)
 80015f8:	701a      	strb	r2, [r3, #0]
	   	 		       break;
 80015fa:	e077      	b.n	80016ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>
	   	 			       Inverter_L_Temp = ((RxData[0]<<8)+RxData[1])*0.01f;//100º offset(conversion by main ecu)
 80015fc:	4b3d      	ldr	r3, [pc, #244]	@ (80016f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	4a3c      	ldr	r2, [pc, #240]	@ (80016f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 8001604:	7852      	ldrb	r2, [r2, #1]
 8001606:	4413      	add	r3, r2
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001610:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800173c <HAL_CAN_RxFifo1MsgPendingCallback+0x310>
 8001614:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001618:	4b49      	ldr	r3, [pc, #292]	@ (8001740 <HAL_CAN_RxFifo1MsgPendingCallback+0x314>)
 800161a:	edc3 7a00 	vstr	s15, [r3]
	   	 		       	   Motor_L_Temp = ((RxData[2]<<8)+RxData[3])*0.01f;
 800161e:	4b35      	ldr	r3, [pc, #212]	@ (80016f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 8001620:	789b      	ldrb	r3, [r3, #2]
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	4a33      	ldr	r2, [pc, #204]	@ (80016f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 8001626:	78d2      	ldrb	r2, [r2, #3]
 8001628:	4413      	add	r3, r2
 800162a:	ee07 3a90 	vmov	s15, r3
 800162e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001632:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800173c <HAL_CAN_RxFifo1MsgPendingCallback+0x310>
 8001636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800163a:	4b42      	ldr	r3, [pc, #264]	@ (8001744 <HAL_CAN_RxFifo1MsgPendingCallback+0x318>)
 800163c:	edc3 7a00 	vstr	s15, [r3]
	   	 		   	   break;
 8001640:	e054      	b.n	80016ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>
							Inverter_R_Temp = ((RxData[0]<<8)+RxData[1])*0.01f;//100º offset(conversion by main ecu)
 8001642:	4b2c      	ldr	r3, [pc, #176]	@ (80016f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	4a2a      	ldr	r2, [pc, #168]	@ (80016f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 800164a:	7852      	ldrb	r2, [r2, #1]
 800164c:	4413      	add	r3, r2
 800164e:	ee07 3a90 	vmov	s15, r3
 8001652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001656:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800173c <HAL_CAN_RxFifo1MsgPendingCallback+0x310>
 800165a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800165e:	4b3a      	ldr	r3, [pc, #232]	@ (8001748 <HAL_CAN_RxFifo1MsgPendingCallback+0x31c>)
 8001660:	edc3 7a00 	vstr	s15, [r3]
			   	 		    Motor_R_Temp = ((RxData[2]<<8)+RxData[3])*0.01f;
 8001664:	4b23      	ldr	r3, [pc, #140]	@ (80016f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 8001666:	789b      	ldrb	r3, [r3, #2]
 8001668:	021b      	lsls	r3, r3, #8
 800166a:	4a22      	ldr	r2, [pc, #136]	@ (80016f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 800166c:	78d2      	ldrb	r2, [r2, #3]
 800166e:	4413      	add	r3, r2
 8001670:	ee07 3a90 	vmov	s15, r3
 8001674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001678:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800173c <HAL_CAN_RxFifo1MsgPendingCallback+0x310>
 800167c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001680:	4b32      	ldr	r3, [pc, #200]	@ (800174c <HAL_CAN_RxFifo1MsgPendingCallback+0x320>)
 8001682:	edc3 7a00 	vstr	s15, [r3]
	   	 		   	       break;
 8001686:	e031      	b.n	80016ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>
	   	 		    		Brakelight=RxData[0];
 8001688:	4b1a      	ldr	r3, [pc, #104]	@ (80016f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 800168a:	781a      	ldrb	r2, [r3, #0]
 800168c:	4b30      	ldr	r3, [pc, #192]	@ (8001750 <HAL_CAN_RxFifo1MsgPendingCallback+0x324>)
 800168e:	701a      	strb	r2, [r3, #0]
	   	 		    		if(Brakelight==1){
 8001690:	4b2f      	ldr	r3, [pc, #188]	@ (8001750 <HAL_CAN_RxFifo1MsgPendingCallback+0x324>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d114      	bne.n	80016c2 <HAL_CAN_RxFifo1MsgPendingCallback+0x296>
	   	 		    			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8001698:	2201      	movs	r2, #1
 800169a:	2102      	movs	r1, #2
 800169c:	482d      	ldr	r0, [pc, #180]	@ (8001754 <HAL_CAN_RxFifo1MsgPendingCallback+0x328>)
 800169e:	f002 fe5b 	bl	8004358 <HAL_GPIO_WritePin>
	   	 		    			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 80016a2:	2201      	movs	r2, #1
 80016a4:	2104      	movs	r1, #4
 80016a6:	482b      	ldr	r0, [pc, #172]	@ (8001754 <HAL_CAN_RxFifo1MsgPendingCallback+0x328>)
 80016a8:	f002 fe56 	bl	8004358 <HAL_GPIO_WritePin>
	   	 		    			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 80016ac:	2201      	movs	r2, #1
 80016ae:	2108      	movs	r1, #8
 80016b0:	4828      	ldr	r0, [pc, #160]	@ (8001754 <HAL_CAN_RxFifo1MsgPendingCallback+0x328>)
 80016b2:	f002 fe51 	bl	8004358 <HAL_GPIO_WritePin>
	   	 		    			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80016b6:	2201      	movs	r2, #1
 80016b8:	2110      	movs	r1, #16
 80016ba:	4826      	ldr	r0, [pc, #152]	@ (8001754 <HAL_CAN_RxFifo1MsgPendingCallback+0x328>)
 80016bc:	f002 fe4c 	bl	8004358 <HAL_GPIO_WritePin>
	   	 			   	    break;
 80016c0:	e013      	b.n	80016ea <HAL_CAN_RxFifo1MsgPendingCallback+0x2be>
	   	 		    			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2102      	movs	r1, #2
 80016c6:	4823      	ldr	r0, [pc, #140]	@ (8001754 <HAL_CAN_RxFifo1MsgPendingCallback+0x328>)
 80016c8:	f002 fe46 	bl	8004358 <HAL_GPIO_WritePin>
	   	 		    			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2104      	movs	r1, #4
 80016d0:	4820      	ldr	r0, [pc, #128]	@ (8001754 <HAL_CAN_RxFifo1MsgPendingCallback+0x328>)
 80016d2:	f002 fe41 	bl	8004358 <HAL_GPIO_WritePin>
	   	 		    			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2108      	movs	r1, #8
 80016da:	481e      	ldr	r0, [pc, #120]	@ (8001754 <HAL_CAN_RxFifo1MsgPendingCallback+0x328>)
 80016dc:	f002 fe3c 	bl	8004358 <HAL_GPIO_WritePin>
	   	 		    			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2110      	movs	r1, #16
 80016e4:	481b      	ldr	r0, [pc, #108]	@ (8001754 <HAL_CAN_RxFifo1MsgPendingCallback+0x328>)
 80016e6:	f002 fe37 	bl	8004358 <HAL_GPIO_WritePin>
	   	 			   	    break;
 80016ea:	bf00      	nop
 }
 80016ec:	bf00      	nop
 80016ee:	371c      	adds	r7, #28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f4:	200000f8 	.word	0x200000f8
 80016f8:	20000074 	.word	0x20000074
 80016fc:	2000006c 	.word	0x2000006c
 8001700:	20000250 	.word	0x20000250
 8001704:	20000090 	.word	0x20000090
 8001708:	20000118 	.word	0x20000118
 800170c:	20000030 	.word	0x20000030
 8001710:	20000034 	.word	0x20000034
 8001714:	40020400 	.word	0x40020400
 8001718:	20000048 	.word	0x20000048
 800171c:	40021000 	.word	0x40021000
 8001720:	20000049 	.word	0x20000049
 8001724:	2000004a 	.word	0x2000004a
 8001728:	2000004b 	.word	0x2000004b
 800172c:	2000004c 	.word	0x2000004c
 8001730:	20000038 	.word	0x20000038
 8001734:	20000039 	.word	0x20000039
 8001738:	2000003a 	.word	0x2000003a
 800173c:	3c23d70a 	.word	0x3c23d70a
 8001740:	20000058 	.word	0x20000058
 8001744:	20000064 	.word	0x20000064
 8001748:	20000054 	.word	0x20000054
 800174c:	20000060 	.word	0x20000060
 8001750:	2000003b 	.word	0x2000003b
 8001754:	40020000 	.word	0x40020000

08001758 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim4)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a3a      	ldr	r2, [pc, #232]	@ (800184c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d16c      	bne.n	8001842 <HAL_TIM_PeriodElapsedCallback+0xea>
  {
	if(Inverter_L_Temp>=Inverter_R_Temp){
 8001768:	4b39      	ldr	r3, [pc, #228]	@ (8001850 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800176a:	ed93 7a00 	vldr	s14, [r3]
 800176e:	4b39      	ldr	r3, [pc, #228]	@ (8001854 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001770:	edd3 7a00 	vldr	s15, [r3]
 8001774:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177c:	db04      	blt.n	8001788 <HAL_TIM_PeriodElapsedCallback+0x30>
		Inverter_Highest_Temp=Inverter_L_Temp;
 800177e:	4b34      	ldr	r3, [pc, #208]	@ (8001850 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a35      	ldr	r2, [pc, #212]	@ (8001858 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	e003      	b.n	8001790 <HAL_TIM_PeriodElapsedCallback+0x38>
	}
	else{
		Inverter_Highest_Temp=Inverter_R_Temp;
 8001788:	4b32      	ldr	r3, [pc, #200]	@ (8001854 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a32      	ldr	r2, [pc, #200]	@ (8001858 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800178e:	6013      	str	r3, [r2, #0]
	}

	if(Inverter_L_Temp>=Inverter_R_Temp){
 8001790:	4b2f      	ldr	r3, [pc, #188]	@ (8001850 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001792:	ed93 7a00 	vldr	s14, [r3]
 8001796:	4b2f      	ldr	r3, [pc, #188]	@ (8001854 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001798:	edd3 7a00 	vldr	s15, [r3]
 800179c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a4:	db04      	blt.n	80017b0 <HAL_TIM_PeriodElapsedCallback+0x58>
		Motor_Highest_Temp=Motor_L_Temp;
 80017a6:	4b2d      	ldr	r3, [pc, #180]	@ (800185c <HAL_TIM_PeriodElapsedCallback+0x104>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001860 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e003      	b.n	80017b8 <HAL_TIM_PeriodElapsedCallback+0x60>
	}
	else{
		Motor_Highest_Temp=Motor_R_Temp;
 80017b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001864 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a2a      	ldr	r2, [pc, #168]	@ (8001860 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80017b6:	6013      	str	r3, [r2, #0]
	}

    duty_accu = P_Controller_Update(pc, Temperature_Accu, Refri_Accu, 0);
 80017b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001868 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a2b      	ldr	r2, [pc, #172]	@ (800186c <HAL_TIM_PeriodElapsedCallback+0x114>)
 80017be:	edd2 7a00 	vldr	s15, [r2]
 80017c2:	4a2b      	ldr	r2, [pc, #172]	@ (8001870 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80017c4:	7812      	ldrb	r2, [r2, #0]
 80017c6:	4611      	mov	r1, r2
 80017c8:	2200      	movs	r2, #0
 80017ca:	eeb0 0a67 	vmov.f32	s0, s15
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe feb9 	bl	8000546 <P_Controller_Update>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4a27      	ldr	r2, [pc, #156]	@ (8001874 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80017d8:	6013      	str	r3, [r2, #0]
	TIM3->CCR4 = 100 - duty_accu;
 80017da:	4b26      	ldr	r3, [pc, #152]	@ (8001874 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
 80017e2:	4b25      	ldr	r3, [pc, #148]	@ (8001878 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80017e4:	641a      	str	r2, [r3, #64]	@ 0x40

    duty_motors = P_Controller_Update(pc, Motor_Highest_Temp, Refri_Motors, 1);
 80017e6:	4b20      	ldr	r3, [pc, #128]	@ (8001868 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001860 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80017ec:	edd2 7a00 	vldr	s15, [r2]
 80017f0:	4a22      	ldr	r2, [pc, #136]	@ (800187c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80017f2:	7812      	ldrb	r2, [r2, #0]
 80017f4:	4611      	mov	r1, r2
 80017f6:	2201      	movs	r2, #1
 80017f8:	eeb0 0a67 	vmov.f32	s0, s15
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe fea2 	bl	8000546 <P_Controller_Update>
 8001802:	4603      	mov	r3, r0
 8001804:	4a1e      	ldr	r2, [pc, #120]	@ (8001880 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001806:	6013      	str	r3, [r2, #0]
    TIM1->CCR1 = 100 - duty_motors;
 8001808:	4b1d      	ldr	r3, [pc, #116]	@ (8001880 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
 8001810:	4b1c      	ldr	r3, [pc, #112]	@ (8001884 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001812:	635a      	str	r2, [r3, #52]	@ 0x34

    duty_inverters = P_Controller_Update(pc, Inverter_Highest_Temp, Refri_Inverters, 2);
 8001814:	4b14      	ldr	r3, [pc, #80]	@ (8001868 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0f      	ldr	r2, [pc, #60]	@ (8001858 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800181a:	edd2 7a00 	vldr	s15, [r2]
 800181e:	4a1a      	ldr	r2, [pc, #104]	@ (8001888 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001820:	7812      	ldrb	r2, [r2, #0]
 8001822:	4611      	mov	r1, r2
 8001824:	2202      	movs	r2, #2
 8001826:	eeb0 0a67 	vmov.f32	s0, s15
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fe8b 	bl	8000546 <P_Controller_Update>
 8001830:	4603      	mov	r3, r0
 8001832:	4a16      	ldr	r2, [pc, #88]	@ (800188c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001834:	6013      	str	r3, [r2, #0]
    TIM8->CCR2 = 100 - duty_inverters;
 8001836:	4b15      	ldr	r3, [pc, #84]	@ (800188c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
 800183e:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001840:	639a      	str	r2, [r3, #56]	@ 0x38
  }
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000310 	.word	0x20000310
 8001850:	20000058 	.word	0x20000058
 8001854:	20000054 	.word	0x20000054
 8001858:	2000005c 	.word	0x2000005c
 800185c:	20000064 	.word	0x20000064
 8001860:	20000068 	.word	0x20000068
 8001864:	20000060 	.word	0x20000060
 8001868:	20000070 	.word	0x20000070
 800186c:	20000050 	.word	0x20000050
 8001870:	20000038 	.word	0x20000038
 8001874:	20000044 	.word	0x20000044
 8001878:	40000400 	.word	0x40000400
 800187c:	2000003a 	.word	0x2000003a
 8001880:	20000040 	.word	0x20000040
 8001884:	40010000 	.word	0x40010000
 8001888:	20000039 	.word	0x20000039
 800188c:	2000003c 	.word	0x2000003c
 8001890:	40010400 	.word	0x40010400

08001894 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800189a:	463b      	mov	r3, r7
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80018a6:	f001 ffa3 	bl	80037f0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80018aa:	2301      	movs	r3, #1
 80018ac:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80018b6:	231f      	movs	r3, #31
 80018b8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80018ba:	2387      	movs	r3, #135	@ 0x87
 80018bc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80018be:	2300      	movs	r3, #0
 80018c0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80018c2:	2300      	movs	r3, #0
 80018c4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80018c6:	2301      	movs	r3, #1
 80018c8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80018ca:	2301      	movs	r3, #1
 80018cc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80018d6:	463b      	mov	r3, r7
 80018d8:	4618      	mov	r0, r3
 80018da:	f001 ffc1 	bl	8003860 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80018de:	2004      	movs	r0, #4
 80018e0:	f001 ff9e 	bl	8003820 <HAL_MPU_Enable>

}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f0:	b672      	cpsid	i
}
 80018f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <Error_Handler+0x8>

080018f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	4b0f      	ldr	r3, [pc, #60]	@ (800193c <HAL_MspInit+0x44>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	4a0e      	ldr	r2, [pc, #56]	@ (800193c <HAL_MspInit+0x44>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001908:	6413      	str	r3, [r2, #64]	@ 0x40
 800190a:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <HAL_MspInit+0x44>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001916:	4b09      	ldr	r3, [pc, #36]	@ (800193c <HAL_MspInit+0x44>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191a:	4a08      	ldr	r2, [pc, #32]	@ (800193c <HAL_MspInit+0x44>)
 800191c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001920:	6453      	str	r3, [r2, #68]	@ 0x44
 8001922:	4b06      	ldr	r3, [pc, #24]	@ (800193c <HAL_MspInit+0x44>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001926:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800

08001940 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08c      	sub	sp, #48	@ 0x30
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a42      	ldr	r2, [pc, #264]	@ (8001a68 <HAL_ADC_MspInit+0x128>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d154      	bne.n	8001a0c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001962:	4b42      	ldr	r3, [pc, #264]	@ (8001a6c <HAL_ADC_MspInit+0x12c>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001966:	4a41      	ldr	r2, [pc, #260]	@ (8001a6c <HAL_ADC_MspInit+0x12c>)
 8001968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800196c:	6453      	str	r3, [r2, #68]	@ 0x44
 800196e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a6c <HAL_ADC_MspInit+0x12c>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001976:	61bb      	str	r3, [r7, #24]
 8001978:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800197a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a6c <HAL_ADC_MspInit+0x12c>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	4a3b      	ldr	r2, [pc, #236]	@ (8001a6c <HAL_ADC_MspInit+0x12c>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	6313      	str	r3, [r2, #48]	@ 0x30
 8001986:	4b39      	ldr	r3, [pc, #228]	@ (8001a6c <HAL_ADC_MspInit+0x12c>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = Susp_R_L_Pin|Susp_R_R_Pin;
 8001992:	230c      	movs	r3, #12
 8001994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001996:	2303      	movs	r3, #3
 8001998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	4619      	mov	r1, r3
 80019a4:	4832      	ldr	r0, [pc, #200]	@ (8001a70 <HAL_ADC_MspInit+0x130>)
 80019a6:	f002 fb13 	bl	8003fd0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80019aa:	4b32      	ldr	r3, [pc, #200]	@ (8001a74 <HAL_ADC_MspInit+0x134>)
 80019ac:	4a32      	ldr	r2, [pc, #200]	@ (8001a78 <HAL_ADC_MspInit+0x138>)
 80019ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80019b0:	4b30      	ldr	r3, [pc, #192]	@ (8001a74 <HAL_ADC_MspInit+0x134>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001a74 <HAL_ADC_MspInit+0x134>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001a74 <HAL_ADC_MspInit+0x134>)
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001a74 <HAL_ADC_MspInit+0x134>)
 80019c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001a74 <HAL_ADC_MspInit+0x134>)
 80019cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019d2:	4b28      	ldr	r3, [pc, #160]	@ (8001a74 <HAL_ADC_MspInit+0x134>)
 80019d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019da:	4b26      	ldr	r3, [pc, #152]	@ (8001a74 <HAL_ADC_MspInit+0x134>)
 80019dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019e0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019e2:	4b24      	ldr	r3, [pc, #144]	@ (8001a74 <HAL_ADC_MspInit+0x134>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019e8:	4b22      	ldr	r3, [pc, #136]	@ (8001a74 <HAL_ADC_MspInit+0x134>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019ee:	4821      	ldr	r0, [pc, #132]	@ (8001a74 <HAL_ADC_MspInit+0x134>)
 80019f0:	f001 ff76 	bl	80038e0 <HAL_DMA_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80019fa:	f7ff ff77 	bl	80018ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a1c      	ldr	r2, [pc, #112]	@ (8001a74 <HAL_ADC_MspInit+0x134>)
 8001a02:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a04:	4a1b      	ldr	r2, [pc, #108]	@ (8001a74 <HAL_ADC_MspInit+0x134>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a0a:	e028      	b.n	8001a5e <HAL_ADC_MspInit+0x11e>
  else if(hadc->Instance==ADC2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a1a      	ldr	r2, [pc, #104]	@ (8001a7c <HAL_ADC_MspInit+0x13c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d123      	bne.n	8001a5e <HAL_ADC_MspInit+0x11e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001a16:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <HAL_ADC_MspInit+0x12c>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1a:	4a14      	ldr	r2, [pc, #80]	@ (8001a6c <HAL_ADC_MspInit+0x12c>)
 8001a1c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a22:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <HAL_ADC_MspInit+0x12c>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <HAL_ADC_MspInit+0x12c>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	4a0e      	ldr	r2, [pc, #56]	@ (8001a6c <HAL_ADC_MspInit+0x12c>)
 8001a34:	f043 0304 	orr.w	r3, r3, #4
 8001a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a6c <HAL_ADC_MspInit+0x12c>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Susp_R_L_Pin;
 8001a46:	2304      	movs	r3, #4
 8001a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Susp_R_L_GPIO_Port, &GPIO_InitStruct);
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	4619      	mov	r1, r3
 8001a58:	4805      	ldr	r0, [pc, #20]	@ (8001a70 <HAL_ADC_MspInit+0x130>)
 8001a5a:	f002 fab9 	bl	8003fd0 <HAL_GPIO_Init>
}
 8001a5e:	bf00      	nop
 8001a60:	3730      	adds	r7, #48	@ 0x30
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40012000 	.word	0x40012000
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020800 	.word	0x40020800
 8001a74:	200001c8 	.word	0x200001c8
 8001a78:	40026410 	.word	0x40026410
 8001a7c:	40012100 	.word	0x40012100

08001a80 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08c      	sub	sp, #48	@ 0x30
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a5d      	ldr	r2, [pc, #372]	@ (8001c14 <HAL_CAN_MspInit+0x194>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d151      	bne.n	8001b46 <HAL_CAN_MspInit+0xc6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001aa2:	4b5d      	ldr	r3, [pc, #372]	@ (8001c18 <HAL_CAN_MspInit+0x198>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	4a5b      	ldr	r2, [pc, #364]	@ (8001c18 <HAL_CAN_MspInit+0x198>)
 8001aaa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001aac:	4b5a      	ldr	r3, [pc, #360]	@ (8001c18 <HAL_CAN_MspInit+0x198>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d10b      	bne.n	8001acc <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001ab4:	4b59      	ldr	r3, [pc, #356]	@ (8001c1c <HAL_CAN_MspInit+0x19c>)
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab8:	4a58      	ldr	r2, [pc, #352]	@ (8001c1c <HAL_CAN_MspInit+0x19c>)
 8001aba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001abe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ac0:	4b56      	ldr	r3, [pc, #344]	@ (8001c1c <HAL_CAN_MspInit+0x19c>)
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac8:	61bb      	str	r3, [r7, #24]
 8001aca:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001acc:	4b53      	ldr	r3, [pc, #332]	@ (8001c1c <HAL_CAN_MspInit+0x19c>)
 8001ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad0:	4a52      	ldr	r2, [pc, #328]	@ (8001c1c <HAL_CAN_MspInit+0x19c>)
 8001ad2:	f043 0308 	orr.w	r3, r3, #8
 8001ad6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad8:	4b50      	ldr	r3, [pc, #320]	@ (8001c1c <HAL_CAN_MspInit+0x19c>)
 8001ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001af4:	2309      	movs	r3, #9
 8001af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af8:	f107 031c 	add.w	r3, r7, #28
 8001afc:	4619      	mov	r1, r3
 8001afe:	4848      	ldr	r0, [pc, #288]	@ (8001c20 <HAL_CAN_MspInit+0x1a0>)
 8001b00:	f002 fa66 	bl	8003fd0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 6, 0);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2106      	movs	r1, #6
 8001b08:	2013      	movs	r0, #19
 8001b0a:	f001 fe3a 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001b0e:	2013      	movs	r0, #19
 8001b10:	f001 fe53 	bl	80037ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 6, 0);
 8001b14:	2200      	movs	r2, #0
 8001b16:	2106      	movs	r1, #6
 8001b18:	2014      	movs	r0, #20
 8001b1a:	f001 fe32 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001b1e:	2014      	movs	r0, #20
 8001b20:	f001 fe4b 	bl	80037ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 6, 0);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2106      	movs	r1, #6
 8001b28:	2015      	movs	r0, #21
 8001b2a:	f001 fe2a 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001b2e:	2015      	movs	r0, #21
 8001b30:	f001 fe43 	bl	80037ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 6, 0);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2106      	movs	r1, #6
 8001b38:	2016      	movs	r0, #22
 8001b3a:	f001 fe22 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001b3e:	2016      	movs	r0, #22
 8001b40:	f001 fe3b 	bl	80037ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001b44:	e062      	b.n	8001c0c <HAL_CAN_MspInit+0x18c>
  else if(hcan->Instance==CAN2)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a36      	ldr	r2, [pc, #216]	@ (8001c24 <HAL_CAN_MspInit+0x1a4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d15d      	bne.n	8001c0c <HAL_CAN_MspInit+0x18c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001b50:	4b32      	ldr	r3, [pc, #200]	@ (8001c1c <HAL_CAN_MspInit+0x19c>)
 8001b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b54:	4a31      	ldr	r2, [pc, #196]	@ (8001c1c <HAL_CAN_MspInit+0x19c>)
 8001b56:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001b5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b5c:	4b2f      	ldr	r3, [pc, #188]	@ (8001c1c <HAL_CAN_MspInit+0x19c>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001b68:	4b2b      	ldr	r3, [pc, #172]	@ (8001c18 <HAL_CAN_MspInit+0x198>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	4a2a      	ldr	r2, [pc, #168]	@ (8001c18 <HAL_CAN_MspInit+0x198>)
 8001b70:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001b72:	4b29      	ldr	r3, [pc, #164]	@ (8001c18 <HAL_CAN_MspInit+0x198>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d10b      	bne.n	8001b92 <HAL_CAN_MspInit+0x112>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001b7a:	4b28      	ldr	r3, [pc, #160]	@ (8001c1c <HAL_CAN_MspInit+0x19c>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	4a27      	ldr	r2, [pc, #156]	@ (8001c1c <HAL_CAN_MspInit+0x19c>)
 8001b80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b86:	4b25      	ldr	r3, [pc, #148]	@ (8001c1c <HAL_CAN_MspInit+0x19c>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b92:	4b22      	ldr	r3, [pc, #136]	@ (8001c1c <HAL_CAN_MspInit+0x19c>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b96:	4a21      	ldr	r2, [pc, #132]	@ (8001c1c <HAL_CAN_MspInit+0x19c>)
 8001b98:	f043 0302 	orr.w	r3, r3, #2
 8001b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b9e:	4b1f      	ldr	r3, [pc, #124]	@ (8001c1c <HAL_CAN_MspInit+0x19c>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001baa:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001bbc:	2309      	movs	r3, #9
 8001bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc0:	f107 031c 	add.w	r3, r7, #28
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4818      	ldr	r0, [pc, #96]	@ (8001c28 <HAL_CAN_MspInit+0x1a8>)
 8001bc8:	f002 fa02 	bl	8003fd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 6, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2106      	movs	r1, #6
 8001bd0:	203f      	movs	r0, #63	@ 0x3f
 8001bd2:	f001 fdd6 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8001bd6:	203f      	movs	r0, #63	@ 0x3f
 8001bd8:	f001 fdef 	bl	80037ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 6, 0);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2106      	movs	r1, #6
 8001be0:	2040      	movs	r0, #64	@ 0x40
 8001be2:	f001 fdce 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001be6:	2040      	movs	r0, #64	@ 0x40
 8001be8:	f001 fde7 	bl	80037ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 6, 0);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2106      	movs	r1, #6
 8001bf0:	2041      	movs	r0, #65	@ 0x41
 8001bf2:	f001 fdc6 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001bf6:	2041      	movs	r0, #65	@ 0x41
 8001bf8:	f001 fddf 	bl	80037ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 6, 0);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2106      	movs	r1, #6
 8001c00:	2042      	movs	r0, #66	@ 0x42
 8001c02:	f001 fdbe 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 8001c06:	2042      	movs	r0, #66	@ 0x42
 8001c08:	f001 fdd7 	bl	80037ba <HAL_NVIC_EnableIRQ>
}
 8001c0c:	bf00      	nop
 8001c0e:	3730      	adds	r7, #48	@ 0x30
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40006400 	.word	0x40006400
 8001c18:	200003a8 	.word	0x200003a8
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40020c00 	.word	0x40020c00
 8001c24:	40006800 	.word	0x40006800
 8001c28:	40020400 	.word	0x40020400

08001c2c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0a      	ldr	r2, [pc, #40]	@ (8001c64 <HAL_TIM_PWM_MspInit+0x38>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d10b      	bne.n	8001c56 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c68 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c42:	4a09      	ldr	r2, [pc, #36]	@ (8001c68 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c4a:	4b07      	ldr	r3, [pc, #28]	@ (8001c68 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001c56:	bf00      	nop
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40010000 	.word	0x40010000
 8001c68:	40023800 	.word	0x40023800

08001c6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a1f      	ldr	r2, [pc, #124]	@ (8001cf8 <HAL_TIM_Base_MspInit+0x8c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d10c      	bne.n	8001c98 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cfc <HAL_TIM_Base_MspInit+0x90>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	4a1e      	ldr	r2, [pc, #120]	@ (8001cfc <HAL_TIM_Base_MspInit+0x90>)
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cfc <HAL_TIM_Base_MspInit+0x90>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001c96:	e02a      	b.n	8001cee <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a18      	ldr	r2, [pc, #96]	@ (8001d00 <HAL_TIM_Base_MspInit+0x94>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d114      	bne.n	8001ccc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ca2:	4b16      	ldr	r3, [pc, #88]	@ (8001cfc <HAL_TIM_Base_MspInit+0x90>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	4a15      	ldr	r2, [pc, #84]	@ (8001cfc <HAL_TIM_Base_MspInit+0x90>)
 8001ca8:	f043 0304 	orr.w	r3, r3, #4
 8001cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cae:	4b13      	ldr	r3, [pc, #76]	@ (8001cfc <HAL_TIM_Base_MspInit+0x90>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	201e      	movs	r0, #30
 8001cc0:	f001 fd5f 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cc4:	201e      	movs	r0, #30
 8001cc6:	f001 fd78 	bl	80037ba <HAL_NVIC_EnableIRQ>
}
 8001cca:	e010      	b.n	8001cee <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0c      	ldr	r2, [pc, #48]	@ (8001d04 <HAL_TIM_Base_MspInit+0x98>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d10b      	bne.n	8001cee <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001cd6:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <HAL_TIM_Base_MspInit+0x90>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cda:	4a08      	ldr	r2, [pc, #32]	@ (8001cfc <HAL_TIM_Base_MspInit+0x90>)
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ce2:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <HAL_TIM_Base_MspInit+0x90>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
}
 8001cee:	bf00      	nop
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40000400 	.word	0x40000400
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40000800 	.word	0x40000800
 8001d04:	40010400 	.word	0x40010400

08001d08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	@ 0x28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a34      	ldr	r2, [pc, #208]	@ (8001df8 <HAL_TIM_MspPostInit+0xf0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d11d      	bne.n	8001d66 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2a:	4b34      	ldr	r3, [pc, #208]	@ (8001dfc <HAL_TIM_MspPostInit+0xf4>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	4a33      	ldr	r2, [pc, #204]	@ (8001dfc <HAL_TIM_MspPostInit+0xf4>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d36:	4b31      	ldr	r3, [pc, #196]	@ (8001dfc <HAL_TIM_MspPostInit+0xf4>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d54:	2301      	movs	r3, #1
 8001d56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4828      	ldr	r0, [pc, #160]	@ (8001e00 <HAL_TIM_MspPostInit+0xf8>)
 8001d60:	f002 f936 	bl	8003fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001d64:	e043      	b.n	8001dee <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a26      	ldr	r2, [pc, #152]	@ (8001e04 <HAL_TIM_MspPostInit+0xfc>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d11d      	bne.n	8001dac <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d70:	4b22      	ldr	r3, [pc, #136]	@ (8001dfc <HAL_TIM_MspPostInit+0xf4>)
 8001d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d74:	4a21      	ldr	r2, [pc, #132]	@ (8001dfc <HAL_TIM_MspPostInit+0xf4>)
 8001d76:	f043 0304 	orr.w	r3, r3, #4
 8001d7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dfc <HAL_TIM_MspPostInit+0xf4>)
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ACCU_PWM_Pin;
 8001d88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ACCU_PWM_GPIO_Port, &GPIO_InitStruct);
 8001d9e:	f107 0314 	add.w	r3, r7, #20
 8001da2:	4619      	mov	r1, r3
 8001da4:	4818      	ldr	r0, [pc, #96]	@ (8001e08 <HAL_TIM_MspPostInit+0x100>)
 8001da6:	f002 f913 	bl	8003fd0 <HAL_GPIO_Init>
}
 8001daa:	e020      	b.n	8001dee <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM8)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a16      	ldr	r2, [pc, #88]	@ (8001e0c <HAL_TIM_MspPostInit+0x104>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d11b      	bne.n	8001dee <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db6:	4b11      	ldr	r3, [pc, #68]	@ (8001dfc <HAL_TIM_MspPostInit+0xf4>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	4a10      	ldr	r2, [pc, #64]	@ (8001dfc <HAL_TIM_MspPostInit+0xf4>)
 8001dbc:	f043 0304 	orr.w	r3, r3, #4
 8001dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001dfc <HAL_TIM_MspPostInit+0xf4>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 8001dce:	2380      	movs	r3, #128	@ 0x80
 8001dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001dde:	2303      	movs	r3, #3
 8001de0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4619      	mov	r1, r3
 8001de8:	4807      	ldr	r0, [pc, #28]	@ (8001e08 <HAL_TIM_MspPostInit+0x100>)
 8001dea:	f002 f8f1 	bl	8003fd0 <HAL_GPIO_Init>
}
 8001dee:	bf00      	nop
 8001df0:	3728      	adds	r7, #40	@ 0x28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40010000 	.word	0x40010000
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40020000 	.word	0x40020000
 8001e04:	40000400 	.word	0x40000400
 8001e08:	40020800 	.word	0x40020800
 8001e0c:	40010400 	.word	0x40010400

08001e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e14:	bf00      	nop
 8001e16:	e7fd      	b.n	8001e14 <NMI_Handler+0x4>

08001e18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e1c:	bf00      	nop
 8001e1e:	e7fd      	b.n	8001e1c <HardFault_Handler+0x4>

08001e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <MemManage_Handler+0x4>

08001e28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <BusFault_Handler+0x4>

08001e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e34:	bf00      	nop
 8001e36:	e7fd      	b.n	8001e34 <UsageFault_Handler+0x4>

08001e38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e66:	f000 f8df 	bl	8002028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e74:	4802      	ldr	r0, [pc, #8]	@ (8001e80 <CAN1_TX_IRQHandler+0x10>)
 8001e76:	f001 f983 	bl	8003180 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000228 	.word	0x20000228

08001e84 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e88:	4802      	ldr	r0, [pc, #8]	@ (8001e94 <CAN1_RX0_IRQHandler+0x10>)
 8001e8a:	f001 f979 	bl	8003180 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000228 	.word	0x20000228

08001e98 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e9c:	4802      	ldr	r0, [pc, #8]	@ (8001ea8 <CAN1_RX1_IRQHandler+0x10>)
 8001e9e:	f001 f96f 	bl	8003180 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000228 	.word	0x20000228

08001eac <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001eb0:	4802      	ldr	r0, [pc, #8]	@ (8001ebc <CAN1_SCE_IRQHandler+0x10>)
 8001eb2:	f001 f965 	bl	8003180 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000228 	.word	0x20000228

08001ec0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ec4:	4802      	ldr	r0, [pc, #8]	@ (8001ed0 <TIM4_IRQHandler+0x10>)
 8001ec6:	f003 f94d 	bl	8005164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000310 	.word	0x20000310

08001ed4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ed8:	4802      	ldr	r0, [pc, #8]	@ (8001ee4 <DMA2_Stream0_IRQHandler+0x10>)
 8001eda:	f001 fe0f 	bl	8003afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200001c8 	.word	0x200001c8

08001ee8 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001eec:	4802      	ldr	r0, [pc, #8]	@ (8001ef8 <CAN2_TX_IRQHandler+0x10>)
 8001eee:	f001 f947 	bl	8003180 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000250 	.word	0x20000250

08001efc <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001f00:	4802      	ldr	r0, [pc, #8]	@ (8001f0c <CAN2_RX0_IRQHandler+0x10>)
 8001f02:	f001 f93d 	bl	8003180 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000250 	.word	0x20000250

08001f10 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001f14:	4802      	ldr	r0, [pc, #8]	@ (8001f20 <CAN2_RX1_IRQHandler+0x10>)
 8001f16:	f001 f933 	bl	8003180 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000250 	.word	0x20000250

08001f24 <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001f28:	4802      	ldr	r0, [pc, #8]	@ (8001f34 <CAN2_SCE_IRQHandler+0x10>)
 8001f2a:	f001 f929 	bl	8003180 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000250 	.word	0x20000250

08001f38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f3c:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <SystemInit+0x20>)
 8001f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f42:	4a05      	ldr	r2, [pc, #20]	@ (8001f58 <SystemInit+0x20>)
 8001f44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f60:	480d      	ldr	r0, [pc, #52]	@ (8001f98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f62:	490e      	ldr	r1, [pc, #56]	@ (8001f9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f64:	4a0e      	ldr	r2, [pc, #56]	@ (8001fa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f68:	e002      	b.n	8001f70 <LoopCopyDataInit>

08001f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6e:	3304      	adds	r3, #4

08001f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f74:	d3f9      	bcc.n	8001f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f76:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f78:	4c0b      	ldr	r4, [pc, #44]	@ (8001fa8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f7c:	e001      	b.n	8001f82 <LoopFillZerobss>

08001f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f80:	3204      	adds	r2, #4

08001f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f84:	d3fb      	bcc.n	8001f7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f86:	f7ff ffd7 	bl	8001f38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f8a:	f004 f8f5 	bl	8006178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f8e:	f7fe fd4f 	bl	8000a30 <main>
  bx  lr    
 8001f92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f94:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f9c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001fa0:	08006288 	.word	0x08006288
  ldr r2, =_sbss
 8001fa4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001fa8:	200003b0 	.word	0x200003b0

08001fac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fac:	e7fe      	b.n	8001fac <ADC_IRQHandler>

08001fae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb2:	2003      	movs	r0, #3
 8001fb4:	f001 fbda 	bl	800376c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fb8:	200f      	movs	r0, #15
 8001fba:	f000 f805 	bl	8001fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fbe:	f7ff fc9b 	bl	80018f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fd0:	4b12      	ldr	r3, [pc, #72]	@ (800201c <HAL_InitTick+0x54>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4b12      	ldr	r3, [pc, #72]	@ (8002020 <HAL_InitTick+0x58>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f001 fbf5 	bl	80037d6 <HAL_SYSTICK_Config>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e00e      	b.n	8002014 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b0f      	cmp	r3, #15
 8001ffa:	d80a      	bhi.n	8002012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	f04f 30ff 	mov.w	r0, #4294967295
 8002004:	f001 fbbd 	bl	8003782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002008:	4a06      	ldr	r2, [pc, #24]	@ (8002024 <HAL_InitTick+0x5c>)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800200e:	2300      	movs	r3, #0
 8002010:	e000      	b.n	8002014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000000 	.word	0x20000000
 8002020:	20000008 	.word	0x20000008
 8002024:	20000004 	.word	0x20000004

08002028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800202c:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <HAL_IncTick+0x20>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	4b06      	ldr	r3, [pc, #24]	@ (800204c <HAL_IncTick+0x24>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4413      	add	r3, r2
 8002038:	4a04      	ldr	r2, [pc, #16]	@ (800204c <HAL_IncTick+0x24>)
 800203a:	6013      	str	r3, [r2, #0]
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	20000008 	.word	0x20000008
 800204c:	200003ac 	.word	0x200003ac

08002050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return uwTick;
 8002054:	4b03      	ldr	r3, [pc, #12]	@ (8002064 <HAL_GetTick+0x14>)
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	200003ac 	.word	0x200003ac

08002068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002070:	f7ff ffee 	bl	8002050 <HAL_GetTick>
 8002074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002080:	d005      	beq.n	800208e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002082:	4b0a      	ldr	r3, [pc, #40]	@ (80020ac <HAL_Delay+0x44>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4413      	add	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800208e:	bf00      	nop
 8002090:	f7ff ffde 	bl	8002050 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	429a      	cmp	r2, r3
 800209e:	d8f7      	bhi.n	8002090 <HAL_Delay+0x28>
  {
  }
}
 80020a0:	bf00      	nop
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000008 	.word	0x20000008

080020b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e031      	b.n	800212a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d109      	bne.n	80020e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff fc36 	bl	8001940 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	f003 0310 	and.w	r3, r3, #16
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d116      	bne.n	800211c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020f2:	4b10      	ldr	r3, [pc, #64]	@ (8002134 <HAL_ADC_Init+0x84>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	f043 0202 	orr.w	r2, r3, #2
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 fa7e 	bl	8002600 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	f023 0303 	bic.w	r3, r3, #3
 8002112:	f043 0201 	orr.w	r2, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	641a      	str	r2, [r3, #64]	@ 0x40
 800211a:	e001      	b.n	8002120 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002128:	7bfb      	ldrb	r3, [r7, #15]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	ffffeefd 	.word	0xffffeefd

08002138 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_ADC_Start_DMA+0x1e>
 8002152:	2302      	movs	r3, #2
 8002154:	e0d4      	b.n	8002300 <HAL_ADC_Start_DMA+0x1c8>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b01      	cmp	r3, #1
 800216a:	d018      	beq.n	800219e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0201 	orr.w	r2, r2, #1
 800217a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800217c:	4b62      	ldr	r3, [pc, #392]	@ (8002308 <HAL_ADC_Start_DMA+0x1d0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a62      	ldr	r2, [pc, #392]	@ (800230c <HAL_ADC_Start_DMA+0x1d4>)
 8002182:	fba2 2303 	umull	r2, r3, r2, r3
 8002186:	0c9a      	lsrs	r2, r3, #18
 8002188:	4613      	mov	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4413      	add	r3, r2
 800218e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002190:	e002      	b.n	8002198 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	3b01      	subs	r3, #1
 8002196:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f9      	bne.n	8002192 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	f040 809c 	bne.w	80022e6 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021b2:	4b57      	ldr	r3, [pc, #348]	@ (8002310 <HAL_ADC_Start_DMA+0x1d8>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d007      	beq.n	80021dc <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021d4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021e8:	d106      	bne.n	80021f8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ee:	f023 0206 	bic.w	r2, r3, #6
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	645a      	str	r2, [r3, #68]	@ 0x44
 80021f6:	e002      	b.n	80021fe <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800220a:	4a42      	ldr	r2, [pc, #264]	@ (8002314 <HAL_ADC_Start_DMA+0x1dc>)
 800220c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002212:	4a41      	ldr	r2, [pc, #260]	@ (8002318 <HAL_ADC_Start_DMA+0x1e0>)
 8002214:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800221a:	4a40      	ldr	r2, [pc, #256]	@ (800231c <HAL_ADC_Start_DMA+0x1e4>)
 800221c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002226:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002236:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002246:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	334c      	adds	r3, #76	@ 0x4c
 8002252:	4619      	mov	r1, r3
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f001 fbf0 	bl	8003a3c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800225c:	4b30      	ldr	r3, [pc, #192]	@ (8002320 <HAL_ADC_Start_DMA+0x1e8>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 031f 	and.w	r3, r3, #31
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10f      	bne.n	8002288 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d143      	bne.n	80022fe <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002284:	609a      	str	r2, [r3, #8]
 8002286:	e03a      	b.n	80022fe <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a25      	ldr	r2, [pc, #148]	@ (8002324 <HAL_ADC_Start_DMA+0x1ec>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d10e      	bne.n	80022b0 <HAL_ADC_Start_DMA+0x178>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d107      	bne.n	80022b0 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022ae:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80022b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002320 <HAL_ADC_Start_DMA+0x1e8>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d120      	bne.n	80022fe <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a19      	ldr	r2, [pc, #100]	@ (8002328 <HAL_ADC_Start_DMA+0x1f0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d11b      	bne.n	80022fe <HAL_ADC_Start_DMA+0x1c6>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d114      	bne.n	80022fe <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	e00b      	b.n	80022fe <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	f043 0210 	orr.w	r2, r3, #16
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f6:	f043 0201 	orr.w	r2, r3, #1
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	20000000 	.word	0x20000000
 800230c:	431bde83 	.word	0x431bde83
 8002310:	fffff8fe 	.word	0xfffff8fe
 8002314:	080027f5 	.word	0x080027f5
 8002318:	080028af 	.word	0x080028af
 800231c:	080028cb 	.word	0x080028cb
 8002320:	40012300 	.word	0x40012300
 8002324:	40012000 	.word	0x40012000
 8002328:	40012200 	.word	0x40012200

0800232c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1c>
 800236c:	2302      	movs	r3, #2
 800236e:	e136      	b.n	80025de <HAL_ADC_ConfigChannel+0x28a>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b09      	cmp	r3, #9
 800237e:	d93a      	bls.n	80023f6 <HAL_ADC_ConfigChannel+0xa2>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002388:	d035      	beq.n	80023f6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68d9      	ldr	r1, [r3, #12]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	b29b      	uxth	r3, r3
 8002396:	461a      	mov	r2, r3
 8002398:	4613      	mov	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4413      	add	r3, r2
 800239e:	3b1e      	subs	r3, #30
 80023a0:	2207      	movs	r2, #7
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43da      	mvns	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	400a      	ands	r2, r1
 80023ae:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a8d      	ldr	r2, [pc, #564]	@ (80025ec <HAL_ADC_ConfigChannel+0x298>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d10a      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68d9      	ldr	r1, [r3, #12]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	061a      	lsls	r2, r3, #24
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023ce:	e035      	b.n	800243c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68d9      	ldr	r1, [r3, #12]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	4618      	mov	r0, r3
 80023e2:	4603      	mov	r3, r0
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	4403      	add	r3, r0
 80023e8:	3b1e      	subs	r3, #30
 80023ea:	409a      	lsls	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023f4:	e022      	b.n	800243c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6919      	ldr	r1, [r3, #16]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	b29b      	uxth	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	4613      	mov	r3, r2
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4413      	add	r3, r2
 800240a:	2207      	movs	r2, #7
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43da      	mvns	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	400a      	ands	r2, r1
 8002418:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6919      	ldr	r1, [r3, #16]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	b29b      	uxth	r3, r3
 800242a:	4618      	mov	r0, r3
 800242c:	4603      	mov	r3, r0
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4403      	add	r3, r0
 8002432:	409a      	lsls	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b06      	cmp	r3, #6
 8002442:	d824      	bhi.n	800248e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	3b05      	subs	r3, #5
 8002456:	221f      	movs	r2, #31
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43da      	mvns	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	400a      	ands	r2, r1
 8002464:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	b29b      	uxth	r3, r3
 8002472:	4618      	mov	r0, r3
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	3b05      	subs	r3, #5
 8002480:	fa00 f203 	lsl.w	r2, r0, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	635a      	str	r2, [r3, #52]	@ 0x34
 800248c:	e04c      	b.n	8002528 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b0c      	cmp	r3, #12
 8002494:	d824      	bhi.n	80024e0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	3b23      	subs	r3, #35	@ 0x23
 80024a8:	221f      	movs	r2, #31
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43da      	mvns	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	400a      	ands	r2, r1
 80024b6:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	4618      	mov	r0, r3
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	3b23      	subs	r3, #35	@ 0x23
 80024d2:	fa00 f203 	lsl.w	r2, r0, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80024de:	e023      	b.n	8002528 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	3b41      	subs	r3, #65	@ 0x41
 80024f2:	221f      	movs	r2, #31
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43da      	mvns	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	400a      	ands	r2, r1
 8002500:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	b29b      	uxth	r3, r3
 800250e:	4618      	mov	r0, r3
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	3b41      	subs	r3, #65	@ 0x41
 800251c:	fa00 f203 	lsl.w	r2, r0, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a30      	ldr	r2, [pc, #192]	@ (80025f0 <HAL_ADC_ConfigChannel+0x29c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d10a      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x1f4>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800253a:	d105      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800253c:	4b2d      	ldr	r3, [pc, #180]	@ (80025f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4a2c      	ldr	r2, [pc, #176]	@ (80025f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002542:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002546:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a28      	ldr	r2, [pc, #160]	@ (80025f0 <HAL_ADC_ConfigChannel+0x29c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d10f      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x21e>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b12      	cmp	r3, #18
 8002558:	d10b      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800255a:	4b26      	ldr	r3, [pc, #152]	@ (80025f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4a25      	ldr	r2, [pc, #148]	@ (80025f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002560:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002564:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002566:	4b23      	ldr	r3, [pc, #140]	@ (80025f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	4a22      	ldr	r2, [pc, #136]	@ (80025f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800256c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002570:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a1e      	ldr	r2, [pc, #120]	@ (80025f0 <HAL_ADC_ConfigChannel+0x29c>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d12b      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x280>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a1a      	ldr	r2, [pc, #104]	@ (80025ec <HAL_ADC_ConfigChannel+0x298>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d003      	beq.n	800258e <HAL_ADC_ConfigChannel+0x23a>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b11      	cmp	r3, #17
 800258c:	d122      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800258e:	4b19      	ldr	r3, [pc, #100]	@ (80025f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4a18      	ldr	r2, [pc, #96]	@ (80025f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002594:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002598:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800259a:	4b16      	ldr	r3, [pc, #88]	@ (80025f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4a15      	ldr	r2, [pc, #84]	@ (80025f4 <HAL_ADC_ConfigChannel+0x2a0>)
 80025a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025a4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a10      	ldr	r2, [pc, #64]	@ (80025ec <HAL_ADC_ConfigChannel+0x298>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d111      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80025b0:	4b11      	ldr	r3, [pc, #68]	@ (80025f8 <HAL_ADC_ConfigChannel+0x2a4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a11      	ldr	r2, [pc, #68]	@ (80025fc <HAL_ADC_ConfigChannel+0x2a8>)
 80025b6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ba:	0c9a      	lsrs	r2, r3, #18
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80025c6:	e002      	b.n	80025ce <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f9      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	10000012 	.word	0x10000012
 80025f0:	40012000 	.word	0x40012000
 80025f4:	40012300 	.word	0x40012300
 80025f8:	20000000 	.word	0x20000000
 80025fc:	431bde83 	.word	0x431bde83

08002600 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002608:	4b78      	ldr	r3, [pc, #480]	@ (80027ec <ADC_Init+0x1ec>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	4a77      	ldr	r2, [pc, #476]	@ (80027ec <ADC_Init+0x1ec>)
 800260e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002612:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002614:	4b75      	ldr	r3, [pc, #468]	@ (80027ec <ADC_Init+0x1ec>)
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4973      	ldr	r1, [pc, #460]	@ (80027ec <ADC_Init+0x1ec>)
 800261e:	4313      	orrs	r3, r2
 8002620:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002630:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6859      	ldr	r1, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	021a      	lsls	r2, r3, #8
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002654:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002676:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6899      	ldr	r1, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800268e:	4a58      	ldr	r2, [pc, #352]	@ (80027f0 <ADC_Init+0x1f0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d022      	beq.n	80026da <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6899      	ldr	r1, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6899      	ldr	r1, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	e00f      	b.n	80026fa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0202 	bic.w	r2, r2, #2
 8002708:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6899      	ldr	r1, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	005a      	lsls	r2, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d01b      	beq.n	8002760 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002736:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002746:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6859      	ldr	r1, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002752:	3b01      	subs	r3, #1
 8002754:	035a      	lsls	r2, r3, #13
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	e007      	b.n	8002770 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800276e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800277e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	3b01      	subs	r3, #1
 800278c:	051a      	lsls	r2, r3, #20
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80027a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6899      	ldr	r1, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027b2:	025a      	lsls	r2, r3, #9
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6899      	ldr	r1, [r3, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	029a      	lsls	r2, r3, #10
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	609a      	str	r2, [r3, #8]
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	40012300 	.word	0x40012300
 80027f0:	0f000001 	.word	0x0f000001

080027f4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002800:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800280a:	2b00      	cmp	r3, #0
 800280c:	d13c      	bne.n	8002888 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d12b      	bne.n	8002880 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800282c:	2b00      	cmp	r3, #0
 800282e:	d127      	bne.n	8002880 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002836:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800283a:	2b00      	cmp	r3, #0
 800283c:	d006      	beq.n	800284c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002848:	2b00      	cmp	r3, #0
 800284a:	d119      	bne.n	8002880 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0220 	bic.w	r2, r2, #32
 800285a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002860:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d105      	bne.n	8002880 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002878:	f043 0201 	orr.w	r2, r3, #1
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f7fe fd85 	bl	8001390 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002886:	e00e      	b.n	80028a6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288c:	f003 0310 	and.w	r3, r3, #16
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f7ff fd53 	bl	8002340 <HAL_ADC_ErrorCallback>
}
 800289a:	e004      	b.n	80028a6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	4798      	blx	r3
}
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b084      	sub	sp, #16
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ba:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f7ff fd35 	bl	800232c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028d6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2240      	movs	r2, #64	@ 0x40
 80028dc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e2:	f043 0204 	orr.w	r2, r3, #4
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f7ff fd28 	bl	8002340 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028f0:	bf00      	nop
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e0ed      	b.n	8002ae6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d102      	bne.n	800291c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff f8b2 	bl	8001a80 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800292c:	f7ff fb90 	bl	8002050 <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002932:	e012      	b.n	800295a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002934:	f7ff fb8c 	bl	8002050 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b0a      	cmp	r3, #10
 8002940:	d90b      	bls.n	800295a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002946:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2205      	movs	r2, #5
 8002952:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e0c5      	b.n	8002ae6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0e5      	beq.n	8002934 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0202 	bic.w	r2, r2, #2
 8002976:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002978:	f7ff fb6a 	bl	8002050 <HAL_GetTick>
 800297c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800297e:	e012      	b.n	80029a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002980:	f7ff fb66 	bl	8002050 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b0a      	cmp	r3, #10
 800298c:	d90b      	bls.n	80029a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002992:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2205      	movs	r2, #5
 800299e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e09f      	b.n	8002ae6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1e5      	bne.n	8002980 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	7e1b      	ldrb	r3, [r3, #24]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d108      	bne.n	80029ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	e007      	b.n	80029de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	7e5b      	ldrb	r3, [r3, #25]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d108      	bne.n	80029f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	e007      	b.n	8002a08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	7e9b      	ldrb	r3, [r3, #26]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d108      	bne.n	8002a22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0220 	orr.w	r2, r2, #32
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	e007      	b.n	8002a32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0220 	bic.w	r2, r2, #32
 8002a30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	7edb      	ldrb	r3, [r3, #27]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d108      	bne.n	8002a4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0210 	bic.w	r2, r2, #16
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	e007      	b.n	8002a5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0210 	orr.w	r2, r2, #16
 8002a5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	7f1b      	ldrb	r3, [r3, #28]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d108      	bne.n	8002a76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0208 	orr.w	r2, r2, #8
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	e007      	b.n	8002a86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0208 	bic.w	r2, r2, #8
 8002a84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	7f5b      	ldrb	r3, [r3, #29]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d108      	bne.n	8002aa0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 0204 	orr.w	r2, r2, #4
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	e007      	b.n	8002ab0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0204 	bic.w	r2, r2, #4
 8002aae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	ea42 0103 	orr.w	r1, r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	1e5a      	subs	r2, r3, #1
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b06:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002b08:	7cfb      	ldrb	r3, [r7, #19]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d003      	beq.n	8002b16 <HAL_CAN_ConfigFilter+0x26>
 8002b0e:	7cfb      	ldrb	r3, [r7, #19]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	f040 80c7 	bne.w	8002ca4 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a69      	ldr	r2, [pc, #420]	@ (8002cc0 <HAL_CAN_ConfigFilter+0x1d0>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d001      	beq.n	8002b24 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002b20:	4b68      	ldr	r3, [pc, #416]	@ (8002cc4 <HAL_CAN_ConfigFilter+0x1d4>)
 8002b22:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002b2a:	f043 0201 	orr.w	r2, r3, #1
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	4a63      	ldr	r2, [pc, #396]	@ (8002cc4 <HAL_CAN_ConfigFilter+0x1d4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d111      	bne.n	8002b60 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002b42:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b56:	021b      	lsls	r3, r3, #8
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	2201      	movs	r2, #1
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d123      	bne.n	8002bd2 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	43db      	mvns	r3, r3
 8002b94:	401a      	ands	r2, r3
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002bac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	3248      	adds	r2, #72	@ 0x48
 8002bb2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bc6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bc8:	6979      	ldr	r1, [r7, #20]
 8002bca:	3348      	adds	r3, #72	@ 0x48
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	440b      	add	r3, r1
 8002bd0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d122      	bne.n	8002c20 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002bfa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	3248      	adds	r2, #72	@ 0x48
 8002c00:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c14:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c16:	6979      	ldr	r1, [r7, #20]
 8002c18:	3348      	adds	r3, #72	@ 0x48
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	440b      	add	r3, r1
 8002c1e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d109      	bne.n	8002c3c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	43db      	mvns	r3, r3
 8002c32:	401a      	ands	r2, r3
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002c3a:	e007      	b.n	8002c4c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	431a      	orrs	r2, r3
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d109      	bne.n	8002c68 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	401a      	ands	r2, r3
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002c66:	e007      	b.n	8002c78 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	431a      	orrs	r2, r3
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d107      	bne.n	8002c90 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002c96:	f023 0201 	bic.w	r2, r3, #1
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	e006      	b.n	8002cb2 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
  }
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	371c      	adds	r7, #28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40003400 	.word	0x40003400
 8002cc4:	40006400 	.word	0x40006400

08002cc8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d12e      	bne.n	8002d3a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cf4:	f7ff f9ac 	bl	8002050 <HAL_GetTick>
 8002cf8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002cfa:	e012      	b.n	8002d22 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cfc:	f7ff f9a8 	bl	8002050 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b0a      	cmp	r3, #10
 8002d08:	d90b      	bls.n	8002d22 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2205      	movs	r2, #5
 8002d1a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e012      	b.n	8002d48 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1e5      	bne.n	8002cfc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	e006      	b.n	8002d48 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
  }
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b089      	sub	sp, #36	@ 0x24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d64:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d6e:	7ffb      	ldrb	r3, [r7, #31]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d003      	beq.n	8002d7c <HAL_CAN_AddTxMessage+0x2c>
 8002d74:	7ffb      	ldrb	r3, [r7, #31]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	f040 80ad 	bne.w	8002ed6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10a      	bne.n	8002d9c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d105      	bne.n	8002d9c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 8095 	beq.w	8002ec6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	0e1b      	lsrs	r3, r3, #24
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002da6:	2201      	movs	r2, #1
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	409a      	lsls	r2, r3
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10d      	bne.n	8002dd4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002dc2:	68f9      	ldr	r1, [r7, #12]
 8002dc4:	6809      	ldr	r1, [r1, #0]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	3318      	adds	r3, #24
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	440b      	add	r3, r1
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	e00f      	b.n	8002df4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002dde:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002de4:	68f9      	ldr	r1, [r7, #12]
 8002de6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002de8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	3318      	adds	r3, #24
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	440b      	add	r3, r1
 8002df2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6819      	ldr	r1, [r3, #0]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	3318      	adds	r3, #24
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	440b      	add	r3, r1
 8002e04:	3304      	adds	r3, #4
 8002e06:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	7d1b      	ldrb	r3, [r3, #20]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d111      	bne.n	8002e34 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	3318      	adds	r3, #24
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	6811      	ldr	r1, [r2, #0]
 8002e24:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	3318      	adds	r3, #24
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	440b      	add	r3, r1
 8002e30:	3304      	adds	r3, #4
 8002e32:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3307      	adds	r3, #7
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	061a      	lsls	r2, r3, #24
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3306      	adds	r3, #6
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	041b      	lsls	r3, r3, #16
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3305      	adds	r3, #5
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	021b      	lsls	r3, r3, #8
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	3204      	adds	r2, #4
 8002e54:	7812      	ldrb	r2, [r2, #0]
 8002e56:	4610      	mov	r0, r2
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	6811      	ldr	r1, [r2, #0]
 8002e5c:	ea43 0200 	orr.w	r2, r3, r0
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	440b      	add	r3, r1
 8002e66:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002e6a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3303      	adds	r3, #3
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	061a      	lsls	r2, r3, #24
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3302      	adds	r3, #2
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	041b      	lsls	r3, r3, #16
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3301      	adds	r3, #1
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	4313      	orrs	r3, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	7812      	ldrb	r2, [r2, #0]
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	6811      	ldr	r1, [r2, #0]
 8002e92:	ea43 0200 	orr.w	r2, r3, r0
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	011b      	lsls	r3, r3, #4
 8002e9a:	440b      	add	r3, r1
 8002e9c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002ea0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	3318      	adds	r3, #24
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	4413      	add	r3, r2
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	6811      	ldr	r1, [r2, #0]
 8002eb4:	f043 0201 	orr.w	r2, r3, #1
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	3318      	adds	r3, #24
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	440b      	add	r3, r1
 8002ec0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	e00e      	b.n	8002ee4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e006      	b.n	8002ee4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eda:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
  }
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3724      	adds	r7, #36	@ 0x24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f04:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f06:	7dfb      	ldrb	r3, [r7, #23]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d003      	beq.n	8002f14 <HAL_CAN_GetRxMessage+0x24>
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	f040 8103 	bne.w	800311a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10e      	bne.n	8002f38 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d116      	bne.n	8002f56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0f7      	b.n	8003128 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d107      	bne.n	8002f56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0e8      	b.n	8003128 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	331b      	adds	r3, #27
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	4413      	add	r3, r2
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0204 	and.w	r2, r3, #4
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10c      	bne.n	8002f8e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	331b      	adds	r3, #27
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	4413      	add	r3, r2
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	0d5b      	lsrs	r3, r3, #21
 8002f84:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	e00b      	b.n	8002fa6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	331b      	adds	r3, #27
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	4413      	add	r3, r2
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	08db      	lsrs	r3, r3, #3
 8002f9e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	331b      	adds	r3, #27
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	4413      	add	r3, r2
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0202 	and.w	r2, r3, #2
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	331b      	adds	r3, #27
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3304      	adds	r3, #4
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2208      	movs	r2, #8
 8002fd8:	611a      	str	r2, [r3, #16]
 8002fda:	e00b      	b.n	8002ff4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	331b      	adds	r3, #27
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3304      	adds	r3, #4
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 020f 	and.w	r2, r3, #15
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	331b      	adds	r3, #27
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	4413      	add	r3, r2
 8003000:	3304      	adds	r3, #4
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	0a1b      	lsrs	r3, r3, #8
 8003006:	b2da      	uxtb	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	331b      	adds	r3, #27
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	4413      	add	r3, r2
 8003018:	3304      	adds	r3, #4
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	0c1b      	lsrs	r3, r3, #16
 800301e:	b29a      	uxth	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	4413      	add	r3, r2
 800302e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	b2da      	uxtb	r2, r3
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	4413      	add	r3, r2
 8003044:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	0a1a      	lsrs	r2, r3, #8
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	3301      	adds	r3, #1
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	4413      	add	r3, r2
 800305e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	0c1a      	lsrs	r2, r3, #16
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	3302      	adds	r3, #2
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	4413      	add	r3, r2
 8003078:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	0e1a      	lsrs	r2, r3, #24
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	3303      	adds	r3, #3
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	4413      	add	r3, r2
 8003092:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	3304      	adds	r3, #4
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	0a1a      	lsrs	r2, r3, #8
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	3305      	adds	r3, #5
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	0c1a      	lsrs	r2, r3, #16
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	3306      	adds	r3, #6
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	4413      	add	r3, r2
 80030de:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	0e1a      	lsrs	r2, r3, #24
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	3307      	adds	r3, #7
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d108      	bne.n	8003106 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0220 	orr.w	r2, r2, #32
 8003102:	60da      	str	r2, [r3, #12]
 8003104:	e007      	b.n	8003116 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0220 	orr.w	r2, r2, #32
 8003114:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	e006      	b.n	8003128 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
  }
}
 8003128:	4618      	mov	r0, r3
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003144:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003146:	7bfb      	ldrb	r3, [r7, #15]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d002      	beq.n	8003152 <HAL_CAN_ActivateNotification+0x1e>
 800314c:	7bfb      	ldrb	r3, [r7, #15]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d109      	bne.n	8003166 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6959      	ldr	r1, [r3, #20]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	e006      	b.n	8003174 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
  }
}
 8003174:	4618      	mov	r0, r3
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08a      	sub	sp, #40	@ 0x28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003188:	2300      	movs	r3, #0
 800318a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d07c      	beq.n	80032c0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d023      	beq.n	8003218 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2201      	movs	r2, #1
 80031d6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f983 	bl	80034ee <HAL_CAN_TxMailbox0CompleteCallback>
 80031e8:	e016      	b.n	8003218 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d004      	beq.n	80031fe <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80031f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80031fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80031fc:	e00c      	b.n	8003218 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	2b00      	cmp	r3, #0
 8003206:	d004      	beq.n	8003212 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800320e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003210:	e002      	b.n	8003218 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f989 	bl	800352a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800321e:	2b00      	cmp	r3, #0
 8003220:	d024      	beq.n	800326c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800322a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f963 	bl	8003502 <HAL_CAN_TxMailbox1CompleteCallback>
 800323c:	e016      	b.n	800326c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003244:	2b00      	cmp	r3, #0
 8003246:	d004      	beq.n	8003252 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800324e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003250:	e00c      	b.n	800326c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003258:	2b00      	cmp	r3, #0
 800325a:	d004      	beq.n	8003266 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800325c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003262:	627b      	str	r3, [r7, #36]	@ 0x24
 8003264:	e002      	b.n	800326c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f969 	bl	800353e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d024      	beq.n	80032c0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800327e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f943 	bl	8003516 <HAL_CAN_TxMailbox2CompleteCallback>
 8003290:	e016      	b.n	80032c0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d004      	beq.n	80032a6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800329c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80032a4:	e00c      	b.n	80032c0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d004      	beq.n	80032ba <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80032b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80032b8:	e002      	b.n	80032c0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f949 	bl	8003552 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00c      	beq.n	80032e4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d007      	beq.n	80032e4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80032d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032da:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2210      	movs	r2, #16
 80032e2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00b      	beq.n	8003306 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d006      	beq.n	8003306 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2208      	movs	r2, #8
 80032fe:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f930 	bl	8003566 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d009      	beq.n	8003324 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d002      	beq.n	8003324 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fe f852 	bl	80013c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00c      	beq.n	8003348 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	2b00      	cmp	r3, #0
 8003336:	d007      	beq.n	8003348 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800333e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2210      	movs	r2, #16
 8003346:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00b      	beq.n	800336a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	2b00      	cmp	r3, #0
 800335a:	d006      	beq.n	800336a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2208      	movs	r2, #8
 8003362:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f908 	bl	800357a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b00      	cmp	r3, #0
 8003372:	d009      	beq.n	8003388 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7fe f852 	bl	800142c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00b      	beq.n	80033aa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b00      	cmp	r3, #0
 800339a:	d006      	beq.n	80033aa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2210      	movs	r2, #16
 80033a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f8f2 	bl	800358e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00b      	beq.n	80033cc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d006      	beq.n	80033cc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2208      	movs	r2, #8
 80033c4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f8eb 	bl	80035a2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d07b      	beq.n	80034ce <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d072      	beq.n	80034c6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d008      	beq.n	80033fc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80033f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003402:	2b00      	cmp	r3, #0
 8003404:	d008      	beq.n	8003418 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003412:	f043 0302 	orr.w	r3, r3, #2
 8003416:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800341e:	2b00      	cmp	r3, #0
 8003420:	d008      	beq.n	8003434 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800342c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342e:	f043 0304 	orr.w	r3, r3, #4
 8003432:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800343a:	2b00      	cmp	r3, #0
 800343c:	d043      	beq.n	80034c6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003444:	2b00      	cmp	r3, #0
 8003446:	d03e      	beq.n	80034c6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800344e:	2b60      	cmp	r3, #96	@ 0x60
 8003450:	d02b      	beq.n	80034aa <HAL_CAN_IRQHandler+0x32a>
 8003452:	2b60      	cmp	r3, #96	@ 0x60
 8003454:	d82e      	bhi.n	80034b4 <HAL_CAN_IRQHandler+0x334>
 8003456:	2b50      	cmp	r3, #80	@ 0x50
 8003458:	d022      	beq.n	80034a0 <HAL_CAN_IRQHandler+0x320>
 800345a:	2b50      	cmp	r3, #80	@ 0x50
 800345c:	d82a      	bhi.n	80034b4 <HAL_CAN_IRQHandler+0x334>
 800345e:	2b40      	cmp	r3, #64	@ 0x40
 8003460:	d019      	beq.n	8003496 <HAL_CAN_IRQHandler+0x316>
 8003462:	2b40      	cmp	r3, #64	@ 0x40
 8003464:	d826      	bhi.n	80034b4 <HAL_CAN_IRQHandler+0x334>
 8003466:	2b30      	cmp	r3, #48	@ 0x30
 8003468:	d010      	beq.n	800348c <HAL_CAN_IRQHandler+0x30c>
 800346a:	2b30      	cmp	r3, #48	@ 0x30
 800346c:	d822      	bhi.n	80034b4 <HAL_CAN_IRQHandler+0x334>
 800346e:	2b10      	cmp	r3, #16
 8003470:	d002      	beq.n	8003478 <HAL_CAN_IRQHandler+0x2f8>
 8003472:	2b20      	cmp	r3, #32
 8003474:	d005      	beq.n	8003482 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003476:	e01d      	b.n	80034b4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347a:	f043 0308 	orr.w	r3, r3, #8
 800347e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003480:	e019      	b.n	80034b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003484:	f043 0310 	orr.w	r3, r3, #16
 8003488:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800348a:	e014      	b.n	80034b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800348c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348e:	f043 0320 	orr.w	r3, r3, #32
 8003492:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003494:	e00f      	b.n	80034b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003498:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800349c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800349e:	e00a      	b.n	80034b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80034a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034a6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80034a8:	e005      	b.n	80034b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80034aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034b0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80034b2:	e000      	b.n	80034b6 <HAL_CAN_IRQHandler+0x336>
            break;
 80034b4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	699a      	ldr	r2, [r3, #24]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80034c4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2204      	movs	r2, #4
 80034cc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80034ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f868 	bl	80035b6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80034e6:	bf00      	nop
 80034e8:	3728      	adds	r7, #40	@ 0x28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
	...

080035cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035dc:	4b0b      	ldr	r3, [pc, #44]	@ (800360c <__NVIC_SetPriorityGrouping+0x40>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035e8:	4013      	ands	r3, r2
 80035ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80035f4:	4b06      	ldr	r3, [pc, #24]	@ (8003610 <__NVIC_SetPriorityGrouping+0x44>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035fa:	4a04      	ldr	r2, [pc, #16]	@ (800360c <__NVIC_SetPriorityGrouping+0x40>)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	60d3      	str	r3, [r2, #12]
}
 8003600:	bf00      	nop
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	e000ed00 	.word	0xe000ed00
 8003610:	05fa0000 	.word	0x05fa0000

08003614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003618:	4b04      	ldr	r3, [pc, #16]	@ (800362c <__NVIC_GetPriorityGrouping+0x18>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	0a1b      	lsrs	r3, r3, #8
 800361e:	f003 0307 	and.w	r3, r3, #7
}
 8003622:	4618      	mov	r0, r3
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	e000ed00 	.word	0xe000ed00

08003630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800363a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363e:	2b00      	cmp	r3, #0
 8003640:	db0b      	blt.n	800365a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	f003 021f 	and.w	r2, r3, #31
 8003648:	4907      	ldr	r1, [pc, #28]	@ (8003668 <__NVIC_EnableIRQ+0x38>)
 800364a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364e:	095b      	lsrs	r3, r3, #5
 8003650:	2001      	movs	r0, #1
 8003652:	fa00 f202 	lsl.w	r2, r0, r2
 8003656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	e000e100 	.word	0xe000e100

0800366c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	6039      	str	r1, [r7, #0]
 8003676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367c:	2b00      	cmp	r3, #0
 800367e:	db0a      	blt.n	8003696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	b2da      	uxtb	r2, r3
 8003684:	490c      	ldr	r1, [pc, #48]	@ (80036b8 <__NVIC_SetPriority+0x4c>)
 8003686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368a:	0112      	lsls	r2, r2, #4
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	440b      	add	r3, r1
 8003690:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003694:	e00a      	b.n	80036ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	b2da      	uxtb	r2, r3
 800369a:	4908      	ldr	r1, [pc, #32]	@ (80036bc <__NVIC_SetPriority+0x50>)
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	3b04      	subs	r3, #4
 80036a4:	0112      	lsls	r2, r2, #4
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	440b      	add	r3, r1
 80036aa:	761a      	strb	r2, [r3, #24]
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	e000e100 	.word	0xe000e100
 80036bc:	e000ed00 	.word	0xe000ed00

080036c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b089      	sub	sp, #36	@ 0x24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f1c3 0307 	rsb	r3, r3, #7
 80036da:	2b04      	cmp	r3, #4
 80036dc:	bf28      	it	cs
 80036de:	2304      	movcs	r3, #4
 80036e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	3304      	adds	r3, #4
 80036e6:	2b06      	cmp	r3, #6
 80036e8:	d902      	bls.n	80036f0 <NVIC_EncodePriority+0x30>
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3b03      	subs	r3, #3
 80036ee:	e000      	b.n	80036f2 <NVIC_EncodePriority+0x32>
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f4:	f04f 32ff 	mov.w	r2, #4294967295
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	43da      	mvns	r2, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	401a      	ands	r2, r3
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003708:	f04f 31ff 	mov.w	r1, #4294967295
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	fa01 f303 	lsl.w	r3, r1, r3
 8003712:	43d9      	mvns	r1, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003718:	4313      	orrs	r3, r2
         );
}
 800371a:	4618      	mov	r0, r3
 800371c:	3724      	adds	r7, #36	@ 0x24
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3b01      	subs	r3, #1
 8003734:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003738:	d301      	bcc.n	800373e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800373a:	2301      	movs	r3, #1
 800373c:	e00f      	b.n	800375e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800373e:	4a0a      	ldr	r2, [pc, #40]	@ (8003768 <SysTick_Config+0x40>)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3b01      	subs	r3, #1
 8003744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003746:	210f      	movs	r1, #15
 8003748:	f04f 30ff 	mov.w	r0, #4294967295
 800374c:	f7ff ff8e 	bl	800366c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003750:	4b05      	ldr	r3, [pc, #20]	@ (8003768 <SysTick_Config+0x40>)
 8003752:	2200      	movs	r2, #0
 8003754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003756:	4b04      	ldr	r3, [pc, #16]	@ (8003768 <SysTick_Config+0x40>)
 8003758:	2207      	movs	r2, #7
 800375a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	e000e010 	.word	0xe000e010

0800376c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff ff29 	bl	80035cc <__NVIC_SetPriorityGrouping>
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003782:	b580      	push	{r7, lr}
 8003784:	b086      	sub	sp, #24
 8003786:	af00      	add	r7, sp, #0
 8003788:	4603      	mov	r3, r0
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	607a      	str	r2, [r7, #4]
 800378e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003794:	f7ff ff3e 	bl	8003614 <__NVIC_GetPriorityGrouping>
 8003798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	6978      	ldr	r0, [r7, #20]
 80037a0:	f7ff ff8e 	bl	80036c0 <NVIC_EncodePriority>
 80037a4:	4602      	mov	r2, r0
 80037a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037aa:	4611      	mov	r1, r2
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff ff5d 	bl	800366c <__NVIC_SetPriority>
}
 80037b2:	bf00      	nop
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	4603      	mov	r3, r0
 80037c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff ff31 	bl	8003630 <__NVIC_EnableIRQ>
}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff ffa2 	bl	8003728 <SysTick_Config>
 80037e4:	4603      	mov	r3, r0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80037f4:	f3bf 8f5f 	dmb	sy
}
 80037f8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80037fa:	4b07      	ldr	r3, [pc, #28]	@ (8003818 <HAL_MPU_Disable+0x28>)
 80037fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fe:	4a06      	ldr	r2, [pc, #24]	@ (8003818 <HAL_MPU_Disable+0x28>)
 8003800:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003804:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003806:	4b05      	ldr	r3, [pc, #20]	@ (800381c <HAL_MPU_Disable+0x2c>)
 8003808:	2200      	movs	r2, #0
 800380a:	605a      	str	r2, [r3, #4]
}
 800380c:	bf00      	nop
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	e000ed00 	.word	0xe000ed00
 800381c:	e000ed90 	.word	0xe000ed90

08003820 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003828:	4a0b      	ldr	r2, [pc, #44]	@ (8003858 <HAL_MPU_Enable+0x38>)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003832:	4b0a      	ldr	r3, [pc, #40]	@ (800385c <HAL_MPU_Enable+0x3c>)
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	4a09      	ldr	r2, [pc, #36]	@ (800385c <HAL_MPU_Enable+0x3c>)
 8003838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800383c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800383e:	f3bf 8f4f 	dsb	sy
}
 8003842:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003844:	f3bf 8f6f 	isb	sy
}
 8003848:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	e000ed90 	.word	0xe000ed90
 800385c:	e000ed00 	.word	0xe000ed00

08003860 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	785a      	ldrb	r2, [r3, #1]
 800386c:	4b1b      	ldr	r3, [pc, #108]	@ (80038dc <HAL_MPU_ConfigRegion+0x7c>)
 800386e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003870:	4b1a      	ldr	r3, [pc, #104]	@ (80038dc <HAL_MPU_ConfigRegion+0x7c>)
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	4a19      	ldr	r2, [pc, #100]	@ (80038dc <HAL_MPU_ConfigRegion+0x7c>)
 8003876:	f023 0301 	bic.w	r3, r3, #1
 800387a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800387c:	4a17      	ldr	r2, [pc, #92]	@ (80038dc <HAL_MPU_ConfigRegion+0x7c>)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	7b1b      	ldrb	r3, [r3, #12]
 8003888:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	7adb      	ldrb	r3, [r3, #11]
 800388e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003890:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	7a9b      	ldrb	r3, [r3, #10]
 8003896:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003898:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	7b5b      	ldrb	r3, [r3, #13]
 800389e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80038a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	7b9b      	ldrb	r3, [r3, #14]
 80038a6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80038a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	7bdb      	ldrb	r3, [r3, #15]
 80038ae:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80038b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	7a5b      	ldrb	r3, [r3, #9]
 80038b6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80038b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	7a1b      	ldrb	r3, [r3, #8]
 80038be:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80038c0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	7812      	ldrb	r2, [r2, #0]
 80038c6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80038c8:	4a04      	ldr	r2, [pc, #16]	@ (80038dc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80038ca:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80038cc:	6113      	str	r3, [r2, #16]
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	e000ed90 	.word	0xe000ed90

080038e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80038ec:	f7fe fbb0 	bl	8002050 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e099      	b.n	8003a30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0201 	bic.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800391c:	e00f      	b.n	800393e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800391e:	f7fe fb97 	bl	8002050 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b05      	cmp	r3, #5
 800392a:	d908      	bls.n	800393e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2220      	movs	r2, #32
 8003930:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2203      	movs	r2, #3
 8003936:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e078      	b.n	8003a30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e8      	bne.n	800391e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	4b38      	ldr	r3, [pc, #224]	@ (8003a38 <HAL_DMA_Init+0x158>)
 8003958:	4013      	ands	r3, r2
 800395a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800396a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003976:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003982:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	4313      	orrs	r3, r2
 800398e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003994:	2b04      	cmp	r3, #4
 8003996:	d107      	bne.n	80039a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a0:	4313      	orrs	r3, r2
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f023 0307 	bic.w	r3, r3, #7
 80039be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d117      	bne.n	8003a02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	4313      	orrs	r3, r2
 80039da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00e      	beq.n	8003a02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 fa77 	bl	8003ed8 <DMA_CheckFifoParam>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d008      	beq.n	8003a02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2240      	movs	r2, #64	@ 0x40
 80039f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80039fe:	2301      	movs	r3, #1
 8003a00:	e016      	b.n	8003a30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fa2e 	bl	8003e6c <DMA_CalcBaseAndBitshift>
 8003a10:	4603      	mov	r3, r0
 8003a12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a18:	223f      	movs	r2, #63	@ 0x3f
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	e010803f 	.word	0xe010803f

08003a3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_DMA_Start_IT+0x26>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e048      	b.n	8003af4 <HAL_DMA_Start_IT+0xb8>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d137      	bne.n	8003ae6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2202      	movs	r2, #2
 8003a7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 f9c0 	bl	8003e10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a94:	223f      	movs	r2, #63	@ 0x3f
 8003a96:	409a      	lsls	r2, r3
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0216 	orr.w	r2, r2, #22
 8003aaa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695a      	ldr	r2, [r3, #20]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003aba:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d007      	beq.n	8003ad4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0208 	orr.w	r2, r2, #8
 8003ad2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0201 	orr.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	e005      	b.n	8003af2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003aee:	2302      	movs	r3, #2
 8003af0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003b04:	2300      	movs	r3, #0
 8003b06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003b08:	4b8e      	ldr	r3, [pc, #568]	@ (8003d44 <HAL_DMA_IRQHandler+0x248>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a8e      	ldr	r2, [pc, #568]	@ (8003d48 <HAL_DMA_IRQHandler+0x24c>)
 8003b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b12:	0a9b      	lsrs	r3, r3, #10
 8003b14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b26:	2208      	movs	r2, #8
 8003b28:	409a      	lsls	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d01a      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d013      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0204 	bic.w	r2, r2, #4
 8003b4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b54:	2208      	movs	r2, #8
 8003b56:	409a      	lsls	r2, r3
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b60:	f043 0201 	orr.w	r2, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	409a      	lsls	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d012      	beq.n	8003b9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00b      	beq.n	8003b9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	409a      	lsls	r2, r3
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b96:	f043 0202 	orr.w	r2, r3, #2
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba2:	2204      	movs	r2, #4
 8003ba4:	409a      	lsls	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d012      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00b      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc0:	2204      	movs	r2, #4
 8003bc2:	409a      	lsls	r2, r3
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bcc:	f043 0204 	orr.w	r2, r3, #4
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd8:	2210      	movs	r2, #16
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d043      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d03c      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf6:	2210      	movs	r2, #16
 8003bf8:	409a      	lsls	r2, r3
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d018      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d108      	bne.n	8003c2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d024      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	4798      	blx	r3
 8003c2a:	e01f      	b.n	8003c6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d01b      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	4798      	blx	r3
 8003c3c:	e016      	b.n	8003c6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d107      	bne.n	8003c5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0208 	bic.w	r2, r2, #8
 8003c5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c70:	2220      	movs	r2, #32
 8003c72:	409a      	lsls	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4013      	ands	r3, r2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 808f 	beq.w	8003d9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0310 	and.w	r3, r3, #16
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 8087 	beq.w	8003d9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c92:	2220      	movs	r2, #32
 8003c94:	409a      	lsls	r2, r3
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b05      	cmp	r3, #5
 8003ca4:	d136      	bne.n	8003d14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0216 	bic.w	r2, r2, #22
 8003cb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695a      	ldr	r2, [r3, #20]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cc4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d103      	bne.n	8003cd6 <HAL_DMA_IRQHandler+0x1da>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d007      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0208 	bic.w	r2, r2, #8
 8003ce4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cea:	223f      	movs	r2, #63	@ 0x3f
 8003cec:	409a      	lsls	r2, r3
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d07e      	beq.n	8003e08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	4798      	blx	r3
        }
        return;
 8003d12:	e079      	b.n	8003e08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d01d      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10d      	bne.n	8003d4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d031      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	4798      	blx	r3
 8003d40:	e02c      	b.n	8003d9c <HAL_DMA_IRQHandler+0x2a0>
 8003d42:	bf00      	nop
 8003d44:	20000000 	.word	0x20000000
 8003d48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d023      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	4798      	blx	r3
 8003d5c:	e01e      	b.n	8003d9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10f      	bne.n	8003d8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0210 	bic.w	r2, r2, #16
 8003d7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d032      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d022      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2205      	movs	r2, #5
 8003db4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0201 	bic.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d307      	bcc.n	8003de4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f2      	bne.n	8003dc8 <HAL_DMA_IRQHandler+0x2cc>
 8003de2:	e000      	b.n	8003de6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003de4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d005      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	4798      	blx	r3
 8003e06:	e000      	b.n	8003e0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e08:	bf00      	nop
    }
  }
}
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003e2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b40      	cmp	r3, #64	@ 0x40
 8003e3c:	d108      	bne.n	8003e50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e4e:	e007      	b.n	8003e60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	60da      	str	r2, [r3, #12]
}
 8003e60:	bf00      	nop
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	3b10      	subs	r3, #16
 8003e7c:	4a13      	ldr	r2, [pc, #76]	@ (8003ecc <DMA_CalcBaseAndBitshift+0x60>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	091b      	lsrs	r3, r3, #4
 8003e84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e86:	4a12      	ldr	r2, [pc, #72]	@ (8003ed0 <DMA_CalcBaseAndBitshift+0x64>)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d908      	bls.n	8003eac <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed4 <DMA_CalcBaseAndBitshift+0x68>)
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	1d1a      	adds	r2, r3, #4
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	659a      	str	r2, [r3, #88]	@ 0x58
 8003eaa:	e006      	b.n	8003eba <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	4b08      	ldr	r3, [pc, #32]	@ (8003ed4 <DMA_CalcBaseAndBitshift+0x68>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	aaaaaaab 	.word	0xaaaaaaab
 8003ed0:	08006270 	.word	0x08006270
 8003ed4:	fffffc00 	.word	0xfffffc00

08003ed8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d11f      	bne.n	8003f32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d856      	bhi.n	8003fa6 <DMA_CheckFifoParam+0xce>
 8003ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8003f00 <DMA_CheckFifoParam+0x28>)
 8003efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efe:	bf00      	nop
 8003f00:	08003f11 	.word	0x08003f11
 8003f04:	08003f23 	.word	0x08003f23
 8003f08:	08003f11 	.word	0x08003f11
 8003f0c:	08003fa7 	.word	0x08003fa7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d046      	beq.n	8003faa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f20:	e043      	b.n	8003faa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f26:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f2a:	d140      	bne.n	8003fae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f30:	e03d      	b.n	8003fae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f3a:	d121      	bne.n	8003f80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d837      	bhi.n	8003fb2 <DMA_CheckFifoParam+0xda>
 8003f42:	a201      	add	r2, pc, #4	@ (adr r2, 8003f48 <DMA_CheckFifoParam+0x70>)
 8003f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f48:	08003f59 	.word	0x08003f59
 8003f4c:	08003f5f 	.word	0x08003f5f
 8003f50:	08003f59 	.word	0x08003f59
 8003f54:	08003f71 	.word	0x08003f71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f5c:	e030      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d025      	beq.n	8003fb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f6e:	e022      	b.n	8003fb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f74:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f78:	d11f      	bne.n	8003fba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f7e:	e01c      	b.n	8003fba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d903      	bls.n	8003f8e <DMA_CheckFifoParam+0xb6>
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d003      	beq.n	8003f94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f8c:	e018      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	73fb      	strb	r3, [r7, #15]
      break;
 8003f92:	e015      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00e      	beq.n	8003fbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fa4:	e00b      	b.n	8003fbe <DMA_CheckFifoParam+0xe6>
      break;
 8003fa6:	bf00      	nop
 8003fa8:	e00a      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8003faa:	bf00      	nop
 8003fac:	e008      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8003fae:	bf00      	nop
 8003fb0:	e006      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8003fb2:	bf00      	nop
 8003fb4:	e004      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8003fb6:	bf00      	nop
 8003fb8:	e002      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003fba:	bf00      	nop
 8003fbc:	e000      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8003fbe:	bf00      	nop
    }
  } 
  
  return status; 
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop

08003fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b089      	sub	sp, #36	@ 0x24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003fea:	2300      	movs	r3, #0
 8003fec:	61fb      	str	r3, [r7, #28]
 8003fee:	e175      	b.n	80042dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4013      	ands	r3, r2
 8004002:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	429a      	cmp	r2, r3
 800400a:	f040 8164 	bne.w	80042d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b01      	cmp	r3, #1
 8004018:	d005      	beq.n	8004026 <HAL_GPIO_Init+0x56>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d130      	bne.n	8004088 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	2203      	movs	r2, #3
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	43db      	mvns	r3, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4013      	ands	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4313      	orrs	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800405c:	2201      	movs	r2, #1
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	43db      	mvns	r3, r3
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	4013      	ands	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	091b      	lsrs	r3, r3, #4
 8004072:	f003 0201 	and.w	r2, r3, #1
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4313      	orrs	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 0303 	and.w	r3, r3, #3
 8004090:	2b03      	cmp	r3, #3
 8004092:	d017      	beq.n	80040c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	2203      	movs	r2, #3
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	43db      	mvns	r3, r3
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4013      	ands	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 0303 	and.w	r3, r3, #3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d123      	bne.n	8004118 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	08da      	lsrs	r2, r3, #3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3208      	adds	r2, #8
 80040d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	220f      	movs	r2, #15
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4013      	ands	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	4313      	orrs	r3, r2
 8004108:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	08da      	lsrs	r2, r3, #3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3208      	adds	r2, #8
 8004112:	69b9      	ldr	r1, [r7, #24]
 8004114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	2203      	movs	r2, #3
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	43db      	mvns	r3, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4013      	ands	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 0203 	and.w	r2, r3, #3
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	4313      	orrs	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 80be 	beq.w	80042d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800415a:	4b66      	ldr	r3, [pc, #408]	@ (80042f4 <HAL_GPIO_Init+0x324>)
 800415c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415e:	4a65      	ldr	r2, [pc, #404]	@ (80042f4 <HAL_GPIO_Init+0x324>)
 8004160:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004164:	6453      	str	r3, [r2, #68]	@ 0x44
 8004166:	4b63      	ldr	r3, [pc, #396]	@ (80042f4 <HAL_GPIO_Init+0x324>)
 8004168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004172:	4a61      	ldr	r2, [pc, #388]	@ (80042f8 <HAL_GPIO_Init+0x328>)
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	089b      	lsrs	r3, r3, #2
 8004178:	3302      	adds	r3, #2
 800417a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800417e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	220f      	movs	r2, #15
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43db      	mvns	r3, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	4013      	ands	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a58      	ldr	r2, [pc, #352]	@ (80042fc <HAL_GPIO_Init+0x32c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d037      	beq.n	800420e <HAL_GPIO_Init+0x23e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a57      	ldr	r2, [pc, #348]	@ (8004300 <HAL_GPIO_Init+0x330>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d031      	beq.n	800420a <HAL_GPIO_Init+0x23a>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a56      	ldr	r2, [pc, #344]	@ (8004304 <HAL_GPIO_Init+0x334>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d02b      	beq.n	8004206 <HAL_GPIO_Init+0x236>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a55      	ldr	r2, [pc, #340]	@ (8004308 <HAL_GPIO_Init+0x338>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d025      	beq.n	8004202 <HAL_GPIO_Init+0x232>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a54      	ldr	r2, [pc, #336]	@ (800430c <HAL_GPIO_Init+0x33c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d01f      	beq.n	80041fe <HAL_GPIO_Init+0x22e>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a53      	ldr	r2, [pc, #332]	@ (8004310 <HAL_GPIO_Init+0x340>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d019      	beq.n	80041fa <HAL_GPIO_Init+0x22a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a52      	ldr	r2, [pc, #328]	@ (8004314 <HAL_GPIO_Init+0x344>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d013      	beq.n	80041f6 <HAL_GPIO_Init+0x226>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a51      	ldr	r2, [pc, #324]	@ (8004318 <HAL_GPIO_Init+0x348>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d00d      	beq.n	80041f2 <HAL_GPIO_Init+0x222>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a50      	ldr	r2, [pc, #320]	@ (800431c <HAL_GPIO_Init+0x34c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d007      	beq.n	80041ee <HAL_GPIO_Init+0x21e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a4f      	ldr	r2, [pc, #316]	@ (8004320 <HAL_GPIO_Init+0x350>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d101      	bne.n	80041ea <HAL_GPIO_Init+0x21a>
 80041e6:	2309      	movs	r3, #9
 80041e8:	e012      	b.n	8004210 <HAL_GPIO_Init+0x240>
 80041ea:	230a      	movs	r3, #10
 80041ec:	e010      	b.n	8004210 <HAL_GPIO_Init+0x240>
 80041ee:	2308      	movs	r3, #8
 80041f0:	e00e      	b.n	8004210 <HAL_GPIO_Init+0x240>
 80041f2:	2307      	movs	r3, #7
 80041f4:	e00c      	b.n	8004210 <HAL_GPIO_Init+0x240>
 80041f6:	2306      	movs	r3, #6
 80041f8:	e00a      	b.n	8004210 <HAL_GPIO_Init+0x240>
 80041fa:	2305      	movs	r3, #5
 80041fc:	e008      	b.n	8004210 <HAL_GPIO_Init+0x240>
 80041fe:	2304      	movs	r3, #4
 8004200:	e006      	b.n	8004210 <HAL_GPIO_Init+0x240>
 8004202:	2303      	movs	r3, #3
 8004204:	e004      	b.n	8004210 <HAL_GPIO_Init+0x240>
 8004206:	2302      	movs	r3, #2
 8004208:	e002      	b.n	8004210 <HAL_GPIO_Init+0x240>
 800420a:	2301      	movs	r3, #1
 800420c:	e000      	b.n	8004210 <HAL_GPIO_Init+0x240>
 800420e:	2300      	movs	r3, #0
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	f002 0203 	and.w	r2, r2, #3
 8004216:	0092      	lsls	r2, r2, #2
 8004218:	4093      	lsls	r3, r2
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4313      	orrs	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004220:	4935      	ldr	r1, [pc, #212]	@ (80042f8 <HAL_GPIO_Init+0x328>)
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	089b      	lsrs	r3, r3, #2
 8004226:	3302      	adds	r3, #2
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800422e:	4b3d      	ldr	r3, [pc, #244]	@ (8004324 <HAL_GPIO_Init+0x354>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	43db      	mvns	r3, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4013      	ands	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	4313      	orrs	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004252:	4a34      	ldr	r2, [pc, #208]	@ (8004324 <HAL_GPIO_Init+0x354>)
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004258:	4b32      	ldr	r3, [pc, #200]	@ (8004324 <HAL_GPIO_Init+0x354>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	43db      	mvns	r3, r3
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	4013      	ands	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	4313      	orrs	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800427c:	4a29      	ldr	r2, [pc, #164]	@ (8004324 <HAL_GPIO_Init+0x354>)
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004282:	4b28      	ldr	r3, [pc, #160]	@ (8004324 <HAL_GPIO_Init+0x354>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	43db      	mvns	r3, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4013      	ands	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004324 <HAL_GPIO_Init+0x354>)
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004324 <HAL_GPIO_Init+0x354>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	43db      	mvns	r3, r3
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	4013      	ands	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042d0:	4a14      	ldr	r2, [pc, #80]	@ (8004324 <HAL_GPIO_Init+0x354>)
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	3301      	adds	r3, #1
 80042da:	61fb      	str	r3, [r7, #28]
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	2b0f      	cmp	r3, #15
 80042e0:	f67f ae86 	bls.w	8003ff0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop
 80042e8:	3724      	adds	r7, #36	@ 0x24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40023800 	.word	0x40023800
 80042f8:	40013800 	.word	0x40013800
 80042fc:	40020000 	.word	0x40020000
 8004300:	40020400 	.word	0x40020400
 8004304:	40020800 	.word	0x40020800
 8004308:	40020c00 	.word	0x40020c00
 800430c:	40021000 	.word	0x40021000
 8004310:	40021400 	.word	0x40021400
 8004314:	40021800 	.word	0x40021800
 8004318:	40021c00 	.word	0x40021c00
 800431c:	40022000 	.word	0x40022000
 8004320:	40022400 	.word	0x40022400
 8004324:	40013c00 	.word	0x40013c00

08004328 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	887b      	ldrh	r3, [r7, #2]
 800433a:	4013      	ands	r3, r2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d002      	beq.n	8004346 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004340:	2301      	movs	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
 8004344:	e001      	b.n	800434a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004346:	2300      	movs	r3, #0
 8004348:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800434a:	7bfb      	ldrb	r3, [r7, #15]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	460b      	mov	r3, r1
 8004362:	807b      	strh	r3, [r7, #2]
 8004364:	4613      	mov	r3, r2
 8004366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004368:	787b      	ldrb	r3, [r7, #1]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800436e:	887a      	ldrh	r2, [r7, #2]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004374:	e003      	b.n	800437e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004376:	887b      	ldrh	r3, [r7, #2]
 8004378:	041a      	lsls	r2, r3, #16
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	619a      	str	r2, [r3, #24]
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800438a:	b480      	push	{r7}
 800438c:	b085      	sub	sp, #20
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	460b      	mov	r3, r1
 8004394:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800439c:	887a      	ldrh	r2, [r7, #2]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4013      	ands	r3, r2
 80043a2:	041a      	lsls	r2, r3, #16
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	43d9      	mvns	r1, r3
 80043a8:	887b      	ldrh	r3, [r7, #2]
 80043aa:	400b      	ands	r3, r1
 80043ac:	431a      	orrs	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	619a      	str	r2, [r3, #24]
}
 80043b2:	bf00      	nop
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
	...

080043c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80043c6:	2300      	movs	r3, #0
 80043c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80043ca:	4b23      	ldr	r3, [pc, #140]	@ (8004458 <HAL_PWREx_EnableOverDrive+0x98>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ce:	4a22      	ldr	r2, [pc, #136]	@ (8004458 <HAL_PWREx_EnableOverDrive+0x98>)
 80043d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80043d6:	4b20      	ldr	r3, [pc, #128]	@ (8004458 <HAL_PWREx_EnableOverDrive+0x98>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043de:	603b      	str	r3, [r7, #0]
 80043e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80043e2:	4b1e      	ldr	r3, [pc, #120]	@ (800445c <HAL_PWREx_EnableOverDrive+0x9c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a1d      	ldr	r2, [pc, #116]	@ (800445c <HAL_PWREx_EnableOverDrive+0x9c>)
 80043e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043ee:	f7fd fe2f 	bl	8002050 <HAL_GetTick>
 80043f2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80043f4:	e009      	b.n	800440a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043f6:	f7fd fe2b 	bl	8002050 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004404:	d901      	bls.n	800440a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e022      	b.n	8004450 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800440a:	4b14      	ldr	r3, [pc, #80]	@ (800445c <HAL_PWREx_EnableOverDrive+0x9c>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004416:	d1ee      	bne.n	80043f6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004418:	4b10      	ldr	r3, [pc, #64]	@ (800445c <HAL_PWREx_EnableOverDrive+0x9c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a0f      	ldr	r2, [pc, #60]	@ (800445c <HAL_PWREx_EnableOverDrive+0x9c>)
 800441e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004422:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004424:	f7fd fe14 	bl	8002050 <HAL_GetTick>
 8004428:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800442a:	e009      	b.n	8004440 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800442c:	f7fd fe10 	bl	8002050 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800443a:	d901      	bls.n	8004440 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e007      	b.n	8004450 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004440:	4b06      	ldr	r3, [pc, #24]	@ (800445c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004448:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800444c:	d1ee      	bne.n	800442c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40023800 	.word	0x40023800
 800445c:	40007000 	.word	0x40007000

08004460 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004468:	2300      	movs	r3, #0
 800446a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e29b      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 8087 	beq.w	8004592 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004484:	4b96      	ldr	r3, [pc, #600]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 030c 	and.w	r3, r3, #12
 800448c:	2b04      	cmp	r3, #4
 800448e:	d00c      	beq.n	80044aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004490:	4b93      	ldr	r3, [pc, #588]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 030c 	and.w	r3, r3, #12
 8004498:	2b08      	cmp	r3, #8
 800449a:	d112      	bne.n	80044c2 <HAL_RCC_OscConfig+0x62>
 800449c:	4b90      	ldr	r3, [pc, #576]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044a8:	d10b      	bne.n	80044c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044aa:	4b8d      	ldr	r3, [pc, #564]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d06c      	beq.n	8004590 <HAL_RCC_OscConfig+0x130>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d168      	bne.n	8004590 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e275      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ca:	d106      	bne.n	80044da <HAL_RCC_OscConfig+0x7a>
 80044cc:	4b84      	ldr	r3, [pc, #528]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a83      	ldr	r2, [pc, #524]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	e02e      	b.n	8004538 <HAL_RCC_OscConfig+0xd8>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10c      	bne.n	80044fc <HAL_RCC_OscConfig+0x9c>
 80044e2:	4b7f      	ldr	r3, [pc, #508]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a7e      	ldr	r2, [pc, #504]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	4b7c      	ldr	r3, [pc, #496]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a7b      	ldr	r2, [pc, #492]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	e01d      	b.n	8004538 <HAL_RCC_OscConfig+0xd8>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004504:	d10c      	bne.n	8004520 <HAL_RCC_OscConfig+0xc0>
 8004506:	4b76      	ldr	r3, [pc, #472]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a75      	ldr	r2, [pc, #468]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 800450c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	4b73      	ldr	r3, [pc, #460]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a72      	ldr	r2, [pc, #456]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	e00b      	b.n	8004538 <HAL_RCC_OscConfig+0xd8>
 8004520:	4b6f      	ldr	r3, [pc, #444]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a6e      	ldr	r2, [pc, #440]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004526:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	4b6c      	ldr	r3, [pc, #432]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a6b      	ldr	r2, [pc, #428]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004532:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004536:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d013      	beq.n	8004568 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004540:	f7fd fd86 	bl	8002050 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004548:	f7fd fd82 	bl	8002050 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b64      	cmp	r3, #100	@ 0x64
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e229      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455a:	4b61      	ldr	r3, [pc, #388]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCC_OscConfig+0xe8>
 8004566:	e014      	b.n	8004592 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7fd fd72 	bl	8002050 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004570:	f7fd fd6e 	bl	8002050 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b64      	cmp	r3, #100	@ 0x64
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e215      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004582:	4b57      	ldr	r3, [pc, #348]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f0      	bne.n	8004570 <HAL_RCC_OscConfig+0x110>
 800458e:	e000      	b.n	8004592 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d069      	beq.n	8004672 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800459e:	4b50      	ldr	r3, [pc, #320]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 030c 	and.w	r3, r3, #12
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00b      	beq.n	80045c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045aa:	4b4d      	ldr	r3, [pc, #308]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 030c 	and.w	r3, r3, #12
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d11c      	bne.n	80045f0 <HAL_RCC_OscConfig+0x190>
 80045b6:	4b4a      	ldr	r3, [pc, #296]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d116      	bne.n	80045f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045c2:	4b47      	ldr	r3, [pc, #284]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d005      	beq.n	80045da <HAL_RCC_OscConfig+0x17a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d001      	beq.n	80045da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e1e9      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045da:	4b41      	ldr	r3, [pc, #260]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	493d      	ldr	r1, [pc, #244]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ee:	e040      	b.n	8004672 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d023      	beq.n	8004640 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045f8:	4b39      	ldr	r3, [pc, #228]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a38      	ldr	r2, [pc, #224]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004604:	f7fd fd24 	bl	8002050 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800460c:	f7fd fd20 	bl	8002050 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e1c7      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461e:	4b30      	ldr	r3, [pc, #192]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0f0      	beq.n	800460c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800462a:	4b2d      	ldr	r3, [pc, #180]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	4929      	ldr	r1, [pc, #164]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 800463a:	4313      	orrs	r3, r2
 800463c:	600b      	str	r3, [r1, #0]
 800463e:	e018      	b.n	8004672 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004640:	4b27      	ldr	r3, [pc, #156]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a26      	ldr	r2, [pc, #152]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004646:	f023 0301 	bic.w	r3, r3, #1
 800464a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464c:	f7fd fd00 	bl	8002050 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004654:	f7fd fcfc 	bl	8002050 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e1a3      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004666:	4b1e      	ldr	r3, [pc, #120]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f0      	bne.n	8004654 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	2b00      	cmp	r3, #0
 800467c:	d038      	beq.n	80046f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d019      	beq.n	80046ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004686:	4b16      	ldr	r3, [pc, #88]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800468a:	4a15      	ldr	r2, [pc, #84]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004692:	f7fd fcdd 	bl	8002050 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800469a:	f7fd fcd9 	bl	8002050 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e180      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ac:	4b0c      	ldr	r3, [pc, #48]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 80046ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <HAL_RCC_OscConfig+0x23a>
 80046b8:	e01a      	b.n	80046f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ba:	4b09      	ldr	r3, [pc, #36]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 80046bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046be:	4a08      	ldr	r2, [pc, #32]	@ (80046e0 <HAL_RCC_OscConfig+0x280>)
 80046c0:	f023 0301 	bic.w	r3, r3, #1
 80046c4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c6:	f7fd fcc3 	bl	8002050 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046cc:	e00a      	b.n	80046e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ce:	f7fd fcbf 	bl	8002050 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d903      	bls.n	80046e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e166      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
 80046e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e4:	4b92      	ldr	r3, [pc, #584]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80046e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1ee      	bne.n	80046ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80a4 	beq.w	8004846 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046fe:	4b8c      	ldr	r3, [pc, #560]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10d      	bne.n	8004726 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800470a:	4b89      	ldr	r3, [pc, #548]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470e:	4a88      	ldr	r2, [pc, #544]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004714:	6413      	str	r3, [r2, #64]	@ 0x40
 8004716:	4b86      	ldr	r3, [pc, #536]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004722:	2301      	movs	r3, #1
 8004724:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004726:	4b83      	ldr	r3, [pc, #524]	@ (8004934 <HAL_RCC_OscConfig+0x4d4>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800472e:	2b00      	cmp	r3, #0
 8004730:	d118      	bne.n	8004764 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004732:	4b80      	ldr	r3, [pc, #512]	@ (8004934 <HAL_RCC_OscConfig+0x4d4>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a7f      	ldr	r2, [pc, #508]	@ (8004934 <HAL_RCC_OscConfig+0x4d4>)
 8004738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800473c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800473e:	f7fd fc87 	bl	8002050 <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004746:	f7fd fc83 	bl	8002050 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b64      	cmp	r3, #100	@ 0x64
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e12a      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004758:	4b76      	ldr	r3, [pc, #472]	@ (8004934 <HAL_RCC_OscConfig+0x4d4>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f0      	beq.n	8004746 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d106      	bne.n	800477a <HAL_RCC_OscConfig+0x31a>
 800476c:	4b70      	ldr	r3, [pc, #448]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 800476e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004770:	4a6f      	ldr	r2, [pc, #444]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	6713      	str	r3, [r2, #112]	@ 0x70
 8004778:	e02d      	b.n	80047d6 <HAL_RCC_OscConfig+0x376>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10c      	bne.n	800479c <HAL_RCC_OscConfig+0x33c>
 8004782:	4b6b      	ldr	r3, [pc, #428]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004786:	4a6a      	ldr	r2, [pc, #424]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004788:	f023 0301 	bic.w	r3, r3, #1
 800478c:	6713      	str	r3, [r2, #112]	@ 0x70
 800478e:	4b68      	ldr	r3, [pc, #416]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004792:	4a67      	ldr	r2, [pc, #412]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004794:	f023 0304 	bic.w	r3, r3, #4
 8004798:	6713      	str	r3, [r2, #112]	@ 0x70
 800479a:	e01c      	b.n	80047d6 <HAL_RCC_OscConfig+0x376>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	2b05      	cmp	r3, #5
 80047a2:	d10c      	bne.n	80047be <HAL_RCC_OscConfig+0x35e>
 80047a4:	4b62      	ldr	r3, [pc, #392]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80047a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a8:	4a61      	ldr	r2, [pc, #388]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80047aa:	f043 0304 	orr.w	r3, r3, #4
 80047ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80047b0:	4b5f      	ldr	r3, [pc, #380]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b4:	4a5e      	ldr	r2, [pc, #376]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80047bc:	e00b      	b.n	80047d6 <HAL_RCC_OscConfig+0x376>
 80047be:	4b5c      	ldr	r3, [pc, #368]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80047c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c2:	4a5b      	ldr	r2, [pc, #364]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80047c4:	f023 0301 	bic.w	r3, r3, #1
 80047c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80047ca:	4b59      	ldr	r3, [pc, #356]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ce:	4a58      	ldr	r2, [pc, #352]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80047d0:	f023 0304 	bic.w	r3, r3, #4
 80047d4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d015      	beq.n	800480a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047de:	f7fd fc37 	bl	8002050 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e4:	e00a      	b.n	80047fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e6:	f7fd fc33 	bl	8002050 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e0d8      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fc:	4b4c      	ldr	r3, [pc, #304]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80047fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0ee      	beq.n	80047e6 <HAL_RCC_OscConfig+0x386>
 8004808:	e014      	b.n	8004834 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480a:	f7fd fc21 	bl	8002050 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004810:	e00a      	b.n	8004828 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004812:	f7fd fc1d 	bl	8002050 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004820:	4293      	cmp	r3, r2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e0c2      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004828:	4b41      	ldr	r3, [pc, #260]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 800482a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1ee      	bne.n	8004812 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004834:	7dfb      	ldrb	r3, [r7, #23]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d105      	bne.n	8004846 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800483a:	4b3d      	ldr	r3, [pc, #244]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483e:	4a3c      	ldr	r2, [pc, #240]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004840:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004844:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 80ae 	beq.w	80049ac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004850:	4b37      	ldr	r3, [pc, #220]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 030c 	and.w	r3, r3, #12
 8004858:	2b08      	cmp	r3, #8
 800485a:	d06d      	beq.n	8004938 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	2b02      	cmp	r3, #2
 8004862:	d14b      	bne.n	80048fc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004864:	4b32      	ldr	r3, [pc, #200]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a31      	ldr	r2, [pc, #196]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 800486a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800486e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004870:	f7fd fbee 	bl	8002050 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004878:	f7fd fbea 	bl	8002050 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e091      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800488a:	4b29      	ldr	r3, [pc, #164]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f0      	bne.n	8004878 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69da      	ldr	r2, [r3, #28]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a4:	019b      	lsls	r3, r3, #6
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ac:	085b      	lsrs	r3, r3, #1
 80048ae:	3b01      	subs	r3, #1
 80048b0:	041b      	lsls	r3, r3, #16
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b8:	061b      	lsls	r3, r3, #24
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c0:	071b      	lsls	r3, r3, #28
 80048c2:	491b      	ldr	r1, [pc, #108]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048c8:	4b19      	ldr	r3, [pc, #100]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a18      	ldr	r2, [pc, #96]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80048ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d4:	f7fd fbbc 	bl	8002050 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048dc:	f7fd fbb8 	bl	8002050 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e05f      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ee:	4b10      	ldr	r3, [pc, #64]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCC_OscConfig+0x47c>
 80048fa:	e057      	b.n	80049ac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a0b      	ldr	r2, [pc, #44]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004902:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004908:	f7fd fba2 	bl	8002050 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004910:	f7fd fb9e 	bl	8002050 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e045      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004922:	4b03      	ldr	r3, [pc, #12]	@ (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1f0      	bne.n	8004910 <HAL_RCC_OscConfig+0x4b0>
 800492e:	e03d      	b.n	80049ac <HAL_RCC_OscConfig+0x54c>
 8004930:	40023800 	.word	0x40023800
 8004934:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004938:	4b1f      	ldr	r3, [pc, #124]	@ (80049b8 <HAL_RCC_OscConfig+0x558>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d030      	beq.n	80049a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004950:	429a      	cmp	r2, r3
 8004952:	d129      	bne.n	80049a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800495e:	429a      	cmp	r2, r3
 8004960:	d122      	bne.n	80049a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004968:	4013      	ands	r3, r2
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800496e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004970:	4293      	cmp	r3, r2
 8004972:	d119      	bne.n	80049a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497e:	085b      	lsrs	r3, r3, #1
 8004980:	3b01      	subs	r3, #1
 8004982:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004984:	429a      	cmp	r2, r3
 8004986:	d10f      	bne.n	80049a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004992:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004994:	429a      	cmp	r2, r3
 8004996:	d107      	bne.n	80049a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d001      	beq.n	80049ac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e000      	b.n	80049ae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3718      	adds	r7, #24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40023800 	.word	0x40023800

080049bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e0d0      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049d4:	4b6a      	ldr	r3, [pc, #424]	@ (8004b80 <HAL_RCC_ClockConfig+0x1c4>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 030f 	and.w	r3, r3, #15
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d910      	bls.n	8004a04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e2:	4b67      	ldr	r3, [pc, #412]	@ (8004b80 <HAL_RCC_ClockConfig+0x1c4>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f023 020f 	bic.w	r2, r3, #15
 80049ea:	4965      	ldr	r1, [pc, #404]	@ (8004b80 <HAL_RCC_ClockConfig+0x1c4>)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f2:	4b63      	ldr	r3, [pc, #396]	@ (8004b80 <HAL_RCC_ClockConfig+0x1c4>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0b8      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d020      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a1c:	4b59      	ldr	r3, [pc, #356]	@ (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4a58      	ldr	r2, [pc, #352]	@ (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004a22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a34:	4b53      	ldr	r3, [pc, #332]	@ (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	4a52      	ldr	r2, [pc, #328]	@ (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004a3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a40:	4b50      	ldr	r3, [pc, #320]	@ (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	494d      	ldr	r1, [pc, #308]	@ (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d040      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d107      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a66:	4b47      	ldr	r3, [pc, #284]	@ (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d115      	bne.n	8004a9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e07f      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d107      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a7e:	4b41      	ldr	r3, [pc, #260]	@ (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d109      	bne.n	8004a9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e073      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a8e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e06b      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a9e:	4b39      	ldr	r3, [pc, #228]	@ (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f023 0203 	bic.w	r2, r3, #3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	4936      	ldr	r1, [pc, #216]	@ (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab0:	f7fd face 	bl	8002050 <HAL_GetTick>
 8004ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ab6:	e00a      	b.n	8004ace <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ab8:	f7fd faca 	bl	8002050 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e053      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ace:	4b2d      	ldr	r3, [pc, #180]	@ (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 020c 	and.w	r2, r3, #12
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d1eb      	bne.n	8004ab8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae0:	4b27      	ldr	r3, [pc, #156]	@ (8004b80 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 030f 	and.w	r3, r3, #15
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d210      	bcs.n	8004b10 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aee:	4b24      	ldr	r3, [pc, #144]	@ (8004b80 <HAL_RCC_ClockConfig+0x1c4>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f023 020f 	bic.w	r2, r3, #15
 8004af6:	4922      	ldr	r1, [pc, #136]	@ (8004b80 <HAL_RCC_ClockConfig+0x1c4>)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afe:	4b20      	ldr	r3, [pc, #128]	@ (8004b80 <HAL_RCC_ClockConfig+0x1c4>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d001      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e032      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d008      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b1c:	4b19      	ldr	r3, [pc, #100]	@ (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	4916      	ldr	r1, [pc, #88]	@ (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b3a:	4b12      	ldr	r3, [pc, #72]	@ (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	490e      	ldr	r1, [pc, #56]	@ (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b4e:	f000 f821 	bl	8004b94 <HAL_RCC_GetSysClockFreq>
 8004b52:	4602      	mov	r2, r0
 8004b54:	4b0b      	ldr	r3, [pc, #44]	@ (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	091b      	lsrs	r3, r3, #4
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	490a      	ldr	r1, [pc, #40]	@ (8004b88 <HAL_RCC_ClockConfig+0x1cc>)
 8004b60:	5ccb      	ldrb	r3, [r1, r3]
 8004b62:	fa22 f303 	lsr.w	r3, r2, r3
 8004b66:	4a09      	ldr	r2, [pc, #36]	@ (8004b8c <HAL_RCC_ClockConfig+0x1d0>)
 8004b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b6a:	4b09      	ldr	r3, [pc, #36]	@ (8004b90 <HAL_RCC_ClockConfig+0x1d4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fd fa2a 	bl	8001fc8 <HAL_InitTick>

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40023c00 	.word	0x40023c00
 8004b84:	40023800 	.word	0x40023800
 8004b88:	08006260 	.word	0x08006260
 8004b8c:	20000000 	.word	0x20000000
 8004b90:	20000004 	.word	0x20000004

08004b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b98:	b090      	sub	sp, #64	@ 0x40
 8004b9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bac:	4b59      	ldr	r3, [pc, #356]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f003 030c 	and.w	r3, r3, #12
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d00d      	beq.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x40>
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	f200 80a1 	bhi.w	8004d00 <HAL_RCC_GetSysClockFreq+0x16c>
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d002      	beq.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d003      	beq.n	8004bce <HAL_RCC_GetSysClockFreq+0x3a>
 8004bc6:	e09b      	b.n	8004d00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bc8:	4b53      	ldr	r3, [pc, #332]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x184>)
 8004bca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004bcc:	e09b      	b.n	8004d06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bce:	4b53      	ldr	r3, [pc, #332]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x188>)
 8004bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004bd2:	e098      	b.n	8004d06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bd4:	4b4f      	ldr	r3, [pc, #316]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bdc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004bde:	4b4d      	ldr	r3, [pc, #308]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d028      	beq.n	8004c3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bea:	4b4a      	ldr	r3, [pc, #296]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	099b      	lsrs	r3, r3, #6
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	623b      	str	r3, [r7, #32]
 8004bf4:	627a      	str	r2, [r7, #36]	@ 0x24
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	4b47      	ldr	r3, [pc, #284]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x188>)
 8004c00:	fb03 f201 	mul.w	r2, r3, r1
 8004c04:	2300      	movs	r3, #0
 8004c06:	fb00 f303 	mul.w	r3, r0, r3
 8004c0a:	4413      	add	r3, r2
 8004c0c:	4a43      	ldr	r2, [pc, #268]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x188>)
 8004c0e:	fba0 1202 	umull	r1, r2, r0, r2
 8004c12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c14:	460a      	mov	r2, r1
 8004c16:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004c18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c1a:	4413      	add	r3, r2
 8004c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c20:	2200      	movs	r2, #0
 8004c22:	61bb      	str	r3, [r7, #24]
 8004c24:	61fa      	str	r2, [r7, #28]
 8004c26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004c2e:	f7fb fb03 	bl	8000238 <__aeabi_uldivmod>
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	4613      	mov	r3, r2
 8004c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c3a:	e053      	b.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c3c:	4b35      	ldr	r3, [pc, #212]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	099b      	lsrs	r3, r3, #6
 8004c42:	2200      	movs	r2, #0
 8004c44:	613b      	str	r3, [r7, #16]
 8004c46:	617a      	str	r2, [r7, #20]
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c4e:	f04f 0b00 	mov.w	fp, #0
 8004c52:	4652      	mov	r2, sl
 8004c54:	465b      	mov	r3, fp
 8004c56:	f04f 0000 	mov.w	r0, #0
 8004c5a:	f04f 0100 	mov.w	r1, #0
 8004c5e:	0159      	lsls	r1, r3, #5
 8004c60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c64:	0150      	lsls	r0, r2, #5
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	ebb2 080a 	subs.w	r8, r2, sl
 8004c6e:	eb63 090b 	sbc.w	r9, r3, fp
 8004c72:	f04f 0200 	mov.w	r2, #0
 8004c76:	f04f 0300 	mov.w	r3, #0
 8004c7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004c82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004c86:	ebb2 0408 	subs.w	r4, r2, r8
 8004c8a:	eb63 0509 	sbc.w	r5, r3, r9
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	00eb      	lsls	r3, r5, #3
 8004c98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c9c:	00e2      	lsls	r2, r4, #3
 8004c9e:	4614      	mov	r4, r2
 8004ca0:	461d      	mov	r5, r3
 8004ca2:	eb14 030a 	adds.w	r3, r4, sl
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	eb45 030b 	adc.w	r3, r5, fp
 8004cac:	607b      	str	r3, [r7, #4]
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	f04f 0300 	mov.w	r3, #0
 8004cb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cba:	4629      	mov	r1, r5
 8004cbc:	028b      	lsls	r3, r1, #10
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	028a      	lsls	r2, r1, #10
 8004cc8:	4610      	mov	r0, r2
 8004cca:	4619      	mov	r1, r3
 8004ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cce:	2200      	movs	r2, #0
 8004cd0:	60bb      	str	r3, [r7, #8]
 8004cd2:	60fa      	str	r2, [r7, #12]
 8004cd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cd8:	f7fb faae 	bl	8000238 <__aeabi_uldivmod>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	0c1b      	lsrs	r3, r3, #16
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	3301      	adds	r3, #1
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004cf4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cfe:	e002      	b.n	8004d06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d00:	4b05      	ldr	r3, [pc, #20]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3740      	adds	r7, #64	@ 0x40
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d12:	bf00      	nop
 8004d14:	40023800 	.word	0x40023800
 8004d18:	00f42400 	.word	0x00f42400
 8004d1c:	017d7840 	.word	0x017d7840

08004d20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e049      	b.n	8004dc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d106      	bne.n	8004d4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7fc ff90 	bl	8001c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4610      	mov	r0, r2
 8004d60:	f000 fd0e 	bl	8005780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
	...

08004dd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d001      	beq.n	8004de8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e054      	b.n	8004e92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0201 	orr.w	r2, r2, #1
 8004dfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a26      	ldr	r2, [pc, #152]	@ (8004ea0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d022      	beq.n	8004e50 <HAL_TIM_Base_Start_IT+0x80>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e12:	d01d      	beq.n	8004e50 <HAL_TIM_Base_Start_IT+0x80>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a22      	ldr	r2, [pc, #136]	@ (8004ea4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d018      	beq.n	8004e50 <HAL_TIM_Base_Start_IT+0x80>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a21      	ldr	r2, [pc, #132]	@ (8004ea8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d013      	beq.n	8004e50 <HAL_TIM_Base_Start_IT+0x80>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a1f      	ldr	r2, [pc, #124]	@ (8004eac <HAL_TIM_Base_Start_IT+0xdc>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00e      	beq.n	8004e50 <HAL_TIM_Base_Start_IT+0x80>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a1e      	ldr	r2, [pc, #120]	@ (8004eb0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d009      	beq.n	8004e50 <HAL_TIM_Base_Start_IT+0x80>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a1c      	ldr	r2, [pc, #112]	@ (8004eb4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d004      	beq.n	8004e50 <HAL_TIM_Base_Start_IT+0x80>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8004eb8 <HAL_TIM_Base_Start_IT+0xe8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d115      	bne.n	8004e7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689a      	ldr	r2, [r3, #8]
 8004e56:	4b19      	ldr	r3, [pc, #100]	@ (8004ebc <HAL_TIM_Base_Start_IT+0xec>)
 8004e58:	4013      	ands	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2b06      	cmp	r3, #6
 8004e60:	d015      	beq.n	8004e8e <HAL_TIM_Base_Start_IT+0xbe>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e68:	d011      	beq.n	8004e8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f042 0201 	orr.w	r2, r2, #1
 8004e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7a:	e008      	b.n	8004e8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0201 	orr.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	e000      	b.n	8004e90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	40010000 	.word	0x40010000
 8004ea4:	40000400 	.word	0x40000400
 8004ea8:	40000800 	.word	0x40000800
 8004eac:	40000c00 	.word	0x40000c00
 8004eb0:	40010400 	.word	0x40010400
 8004eb4:	40014000 	.word	0x40014000
 8004eb8:	40001800 	.word	0x40001800
 8004ebc:	00010007 	.word	0x00010007

08004ec0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e049      	b.n	8004f66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d106      	bne.n	8004eec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7fc fea0 	bl	8001c2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3304      	adds	r3, #4
 8004efc:	4619      	mov	r1, r3
 8004efe:	4610      	mov	r0, r2
 8004f00:	f000 fc3e 	bl	8005780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
	...

08004f70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d109      	bne.n	8004f94 <HAL_TIM_PWM_Start+0x24>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	bf14      	ite	ne
 8004f8c:	2301      	movne	r3, #1
 8004f8e:	2300      	moveq	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	e03c      	b.n	800500e <HAL_TIM_PWM_Start+0x9e>
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	d109      	bne.n	8004fae <HAL_TIM_PWM_Start+0x3e>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	bf14      	ite	ne
 8004fa6:	2301      	movne	r3, #1
 8004fa8:	2300      	moveq	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	e02f      	b.n	800500e <HAL_TIM_PWM_Start+0x9e>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d109      	bne.n	8004fc8 <HAL_TIM_PWM_Start+0x58>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	bf14      	ite	ne
 8004fc0:	2301      	movne	r3, #1
 8004fc2:	2300      	moveq	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	e022      	b.n	800500e <HAL_TIM_PWM_Start+0x9e>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2b0c      	cmp	r3, #12
 8004fcc:	d109      	bne.n	8004fe2 <HAL_TIM_PWM_Start+0x72>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	bf14      	ite	ne
 8004fda:	2301      	movne	r3, #1
 8004fdc:	2300      	moveq	r3, #0
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	e015      	b.n	800500e <HAL_TIM_PWM_Start+0x9e>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b10      	cmp	r3, #16
 8004fe6:	d109      	bne.n	8004ffc <HAL_TIM_PWM_Start+0x8c>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	bf14      	ite	ne
 8004ff4:	2301      	movne	r3, #1
 8004ff6:	2300      	moveq	r3, #0
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	e008      	b.n	800500e <HAL_TIM_PWM_Start+0x9e>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b01      	cmp	r3, #1
 8005006:	bf14      	ite	ne
 8005008:	2301      	movne	r3, #1
 800500a:	2300      	moveq	r3, #0
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e092      	b.n	800513c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d104      	bne.n	8005026 <HAL_TIM_PWM_Start+0xb6>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005024:	e023      	b.n	800506e <HAL_TIM_PWM_Start+0xfe>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	2b04      	cmp	r3, #4
 800502a:	d104      	bne.n	8005036 <HAL_TIM_PWM_Start+0xc6>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005034:	e01b      	b.n	800506e <HAL_TIM_PWM_Start+0xfe>
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2b08      	cmp	r3, #8
 800503a:	d104      	bne.n	8005046 <HAL_TIM_PWM_Start+0xd6>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2202      	movs	r2, #2
 8005040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005044:	e013      	b.n	800506e <HAL_TIM_PWM_Start+0xfe>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b0c      	cmp	r3, #12
 800504a:	d104      	bne.n	8005056 <HAL_TIM_PWM_Start+0xe6>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005054:	e00b      	b.n	800506e <HAL_TIM_PWM_Start+0xfe>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b10      	cmp	r3, #16
 800505a:	d104      	bne.n	8005066 <HAL_TIM_PWM_Start+0xf6>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005064:	e003      	b.n	800506e <HAL_TIM_PWM_Start+0xfe>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2202      	movs	r2, #2
 800506a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2201      	movs	r2, #1
 8005074:	6839      	ldr	r1, [r7, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f000 ff26 	bl	8005ec8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a30      	ldr	r2, [pc, #192]	@ (8005144 <HAL_TIM_PWM_Start+0x1d4>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d004      	beq.n	8005090 <HAL_TIM_PWM_Start+0x120>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a2f      	ldr	r2, [pc, #188]	@ (8005148 <HAL_TIM_PWM_Start+0x1d8>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d101      	bne.n	8005094 <HAL_TIM_PWM_Start+0x124>
 8005090:	2301      	movs	r3, #1
 8005092:	e000      	b.n	8005096 <HAL_TIM_PWM_Start+0x126>
 8005094:	2300      	movs	r3, #0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d007      	beq.n	80050aa <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a25      	ldr	r2, [pc, #148]	@ (8005144 <HAL_TIM_PWM_Start+0x1d4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d022      	beq.n	80050fa <HAL_TIM_PWM_Start+0x18a>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050bc:	d01d      	beq.n	80050fa <HAL_TIM_PWM_Start+0x18a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a22      	ldr	r2, [pc, #136]	@ (800514c <HAL_TIM_PWM_Start+0x1dc>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d018      	beq.n	80050fa <HAL_TIM_PWM_Start+0x18a>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a20      	ldr	r2, [pc, #128]	@ (8005150 <HAL_TIM_PWM_Start+0x1e0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d013      	beq.n	80050fa <HAL_TIM_PWM_Start+0x18a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005154 <HAL_TIM_PWM_Start+0x1e4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d00e      	beq.n	80050fa <HAL_TIM_PWM_Start+0x18a>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a19      	ldr	r2, [pc, #100]	@ (8005148 <HAL_TIM_PWM_Start+0x1d8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d009      	beq.n	80050fa <HAL_TIM_PWM_Start+0x18a>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005158 <HAL_TIM_PWM_Start+0x1e8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d004      	beq.n	80050fa <HAL_TIM_PWM_Start+0x18a>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a19      	ldr	r2, [pc, #100]	@ (800515c <HAL_TIM_PWM_Start+0x1ec>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d115      	bne.n	8005126 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	4b17      	ldr	r3, [pc, #92]	@ (8005160 <HAL_TIM_PWM_Start+0x1f0>)
 8005102:	4013      	ands	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b06      	cmp	r3, #6
 800510a:	d015      	beq.n	8005138 <HAL_TIM_PWM_Start+0x1c8>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005112:	d011      	beq.n	8005138 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0201 	orr.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005124:	e008      	b.n	8005138 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f042 0201 	orr.w	r2, r2, #1
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	e000      	b.n	800513a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005138:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40010000 	.word	0x40010000
 8005148:	40010400 	.word	0x40010400
 800514c:	40000400 	.word	0x40000400
 8005150:	40000800 	.word	0x40000800
 8005154:	40000c00 	.word	0x40000c00
 8005158:	40014000 	.word	0x40014000
 800515c:	40001800 	.word	0x40001800
 8005160:	00010007 	.word	0x00010007

08005164 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d020      	beq.n	80051c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01b      	beq.n	80051c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f06f 0202 	mvn.w	r2, #2
 8005198:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fac8 	bl	8005744 <HAL_TIM_IC_CaptureCallback>
 80051b4:	e005      	b.n	80051c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 faba 	bl	8005730 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 facb 	bl	8005758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f003 0304 	and.w	r3, r3, #4
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d020      	beq.n	8005214 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d01b      	beq.n	8005214 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f06f 0204 	mvn.w	r2, #4
 80051e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2202      	movs	r2, #2
 80051ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 faa2 	bl	8005744 <HAL_TIM_IC_CaptureCallback>
 8005200:	e005      	b.n	800520e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fa94 	bl	8005730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 faa5 	bl	8005758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f003 0308 	and.w	r3, r3, #8
 800521a:	2b00      	cmp	r3, #0
 800521c:	d020      	beq.n	8005260 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f003 0308 	and.w	r3, r3, #8
 8005224:	2b00      	cmp	r3, #0
 8005226:	d01b      	beq.n	8005260 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f06f 0208 	mvn.w	r2, #8
 8005230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2204      	movs	r2, #4
 8005236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fa7c 	bl	8005744 <HAL_TIM_IC_CaptureCallback>
 800524c:	e005      	b.n	800525a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fa6e 	bl	8005730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fa7f 	bl	8005758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f003 0310 	and.w	r3, r3, #16
 8005266:	2b00      	cmp	r3, #0
 8005268:	d020      	beq.n	80052ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f003 0310 	and.w	r3, r3, #16
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01b      	beq.n	80052ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f06f 0210 	mvn.w	r2, #16
 800527c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2208      	movs	r2, #8
 8005282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fa56 	bl	8005744 <HAL_TIM_IC_CaptureCallback>
 8005298:	e005      	b.n	80052a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fa48 	bl	8005730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 fa59 	bl	8005758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00c      	beq.n	80052d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f06f 0201 	mvn.w	r2, #1
 80052c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fc fa44 	bl	8001758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d104      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00c      	beq.n	80052fe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d007      	beq.n	80052fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80052f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 ff21 	bl	8006140 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00c      	beq.n	8005322 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800530e:	2b00      	cmp	r3, #0
 8005310:	d007      	beq.n	8005322 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800531a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 ff19 	bl	8006154 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00c      	beq.n	8005346 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005332:	2b00      	cmp	r3, #0
 8005334:	d007      	beq.n	8005346 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800533e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fa13 	bl	800576c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	f003 0320 	and.w	r3, r3, #32
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00c      	beq.n	800536a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f003 0320 	and.w	r3, r3, #32
 8005356:	2b00      	cmp	r3, #0
 8005358:	d007      	beq.n	800536a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f06f 0220 	mvn.w	r2, #32
 8005362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 fee1 	bl	800612c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800536a:	bf00      	nop
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
	...

08005374 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800538e:	2302      	movs	r3, #2
 8005390:	e0ff      	b.n	8005592 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b14      	cmp	r3, #20
 800539e:	f200 80f0 	bhi.w	8005582 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80053a2:	a201      	add	r2, pc, #4	@ (adr r2, 80053a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a8:	080053fd 	.word	0x080053fd
 80053ac:	08005583 	.word	0x08005583
 80053b0:	08005583 	.word	0x08005583
 80053b4:	08005583 	.word	0x08005583
 80053b8:	0800543d 	.word	0x0800543d
 80053bc:	08005583 	.word	0x08005583
 80053c0:	08005583 	.word	0x08005583
 80053c4:	08005583 	.word	0x08005583
 80053c8:	0800547f 	.word	0x0800547f
 80053cc:	08005583 	.word	0x08005583
 80053d0:	08005583 	.word	0x08005583
 80053d4:	08005583 	.word	0x08005583
 80053d8:	080054bf 	.word	0x080054bf
 80053dc:	08005583 	.word	0x08005583
 80053e0:	08005583 	.word	0x08005583
 80053e4:	08005583 	.word	0x08005583
 80053e8:	08005501 	.word	0x08005501
 80053ec:	08005583 	.word	0x08005583
 80053f0:	08005583 	.word	0x08005583
 80053f4:	08005583 	.word	0x08005583
 80053f8:	08005541 	.word	0x08005541
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68b9      	ldr	r1, [r7, #8]
 8005402:	4618      	mov	r0, r3
 8005404:	f000 fa68 	bl	80058d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699a      	ldr	r2, [r3, #24]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0208 	orr.w	r2, r2, #8
 8005416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	699a      	ldr	r2, [r3, #24]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0204 	bic.w	r2, r2, #4
 8005426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6999      	ldr	r1, [r3, #24]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	691a      	ldr	r2, [r3, #16]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	619a      	str	r2, [r3, #24]
      break;
 800543a:	e0a5      	b.n	8005588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68b9      	ldr	r1, [r7, #8]
 8005442:	4618      	mov	r0, r3
 8005444:	f000 faba 	bl	80059bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699a      	ldr	r2, [r3, #24]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699a      	ldr	r2, [r3, #24]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6999      	ldr	r1, [r3, #24]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	021a      	lsls	r2, r3, #8
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	619a      	str	r2, [r3, #24]
      break;
 800547c:	e084      	b.n	8005588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68b9      	ldr	r1, [r7, #8]
 8005484:	4618      	mov	r0, r3
 8005486:	f000 fb11 	bl	8005aac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69da      	ldr	r2, [r3, #28]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f042 0208 	orr.w	r2, r2, #8
 8005498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69da      	ldr	r2, [r3, #28]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0204 	bic.w	r2, r2, #4
 80054a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	69d9      	ldr	r1, [r3, #28]
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	61da      	str	r2, [r3, #28]
      break;
 80054bc:	e064      	b.n	8005588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68b9      	ldr	r1, [r7, #8]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 fb67 	bl	8005b98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69da      	ldr	r2, [r3, #28]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69da      	ldr	r2, [r3, #28]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69d9      	ldr	r1, [r3, #28]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	021a      	lsls	r2, r3, #8
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	61da      	str	r2, [r3, #28]
      break;
 80054fe:	e043      	b.n	8005588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68b9      	ldr	r1, [r7, #8]
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fb9e 	bl	8005c48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0208 	orr.w	r2, r2, #8
 800551a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 0204 	bic.w	r2, r2, #4
 800552a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800553e:	e023      	b.n	8005588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68b9      	ldr	r1, [r7, #8]
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fbd0 	bl	8005cec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800555a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800556a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	021a      	lsls	r2, r3, #8
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005580:	e002      	b.n	8005588 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	75fb      	strb	r3, [r7, #23]
      break;
 8005586:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005590:	7dfb      	ldrb	r3, [r7, #23]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop

0800559c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <HAL_TIM_ConfigClockSource+0x1c>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e0b4      	b.n	8005722 <HAL_TIM_ConfigClockSource+0x186>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	4b56      	ldr	r3, [pc, #344]	@ (800572c <HAL_TIM_ConfigClockSource+0x190>)
 80055d4:	4013      	ands	r3, r2
 80055d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055f0:	d03e      	beq.n	8005670 <HAL_TIM_ConfigClockSource+0xd4>
 80055f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055f6:	f200 8087 	bhi.w	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 80055fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055fe:	f000 8086 	beq.w	800570e <HAL_TIM_ConfigClockSource+0x172>
 8005602:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005606:	d87f      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005608:	2b70      	cmp	r3, #112	@ 0x70
 800560a:	d01a      	beq.n	8005642 <HAL_TIM_ConfigClockSource+0xa6>
 800560c:	2b70      	cmp	r3, #112	@ 0x70
 800560e:	d87b      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005610:	2b60      	cmp	r3, #96	@ 0x60
 8005612:	d050      	beq.n	80056b6 <HAL_TIM_ConfigClockSource+0x11a>
 8005614:	2b60      	cmp	r3, #96	@ 0x60
 8005616:	d877      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005618:	2b50      	cmp	r3, #80	@ 0x50
 800561a:	d03c      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0xfa>
 800561c:	2b50      	cmp	r3, #80	@ 0x50
 800561e:	d873      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005620:	2b40      	cmp	r3, #64	@ 0x40
 8005622:	d058      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x13a>
 8005624:	2b40      	cmp	r3, #64	@ 0x40
 8005626:	d86f      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005628:	2b30      	cmp	r3, #48	@ 0x30
 800562a:	d064      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x15a>
 800562c:	2b30      	cmp	r3, #48	@ 0x30
 800562e:	d86b      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005630:	2b20      	cmp	r3, #32
 8005632:	d060      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005634:	2b20      	cmp	r3, #32
 8005636:	d867      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005638:	2b00      	cmp	r3, #0
 800563a:	d05c      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x15a>
 800563c:	2b10      	cmp	r3, #16
 800563e:	d05a      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005640:	e062      	b.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005652:	f000 fc19 	bl	8005e88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005664:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	609a      	str	r2, [r3, #8]
      break;
 800566e:	e04f      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005680:	f000 fc02 	bl	8005e88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689a      	ldr	r2, [r3, #8]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005692:	609a      	str	r2, [r3, #8]
      break;
 8005694:	e03c      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056a2:	461a      	mov	r2, r3
 80056a4:	f000 fb76 	bl	8005d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2150      	movs	r1, #80	@ 0x50
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fbcf 	bl	8005e52 <TIM_ITRx_SetConfig>
      break;
 80056b4:	e02c      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056c2:	461a      	mov	r2, r3
 80056c4:	f000 fb95 	bl	8005df2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2160      	movs	r1, #96	@ 0x60
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fbbf 	bl	8005e52 <TIM_ITRx_SetConfig>
      break;
 80056d4:	e01c      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056e2:	461a      	mov	r2, r3
 80056e4:	f000 fb56 	bl	8005d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2140      	movs	r1, #64	@ 0x40
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 fbaf 	bl	8005e52 <TIM_ITRx_SetConfig>
      break;
 80056f4:	e00c      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4619      	mov	r1, r3
 8005700:	4610      	mov	r0, r2
 8005702:	f000 fba6 	bl	8005e52 <TIM_ITRx_SetConfig>
      break;
 8005706:	e003      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	73fb      	strb	r3, [r7, #15]
      break;
 800570c:	e000      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800570e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005720:	7bfb      	ldrb	r3, [r7, #15]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	fffeff88 	.word	0xfffeff88

08005730 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a46      	ldr	r2, [pc, #280]	@ (80058ac <TIM_Base_SetConfig+0x12c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d013      	beq.n	80057c0 <TIM_Base_SetConfig+0x40>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800579e:	d00f      	beq.n	80057c0 <TIM_Base_SetConfig+0x40>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a43      	ldr	r2, [pc, #268]	@ (80058b0 <TIM_Base_SetConfig+0x130>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00b      	beq.n	80057c0 <TIM_Base_SetConfig+0x40>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a42      	ldr	r2, [pc, #264]	@ (80058b4 <TIM_Base_SetConfig+0x134>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d007      	beq.n	80057c0 <TIM_Base_SetConfig+0x40>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a41      	ldr	r2, [pc, #260]	@ (80058b8 <TIM_Base_SetConfig+0x138>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d003      	beq.n	80057c0 <TIM_Base_SetConfig+0x40>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a40      	ldr	r2, [pc, #256]	@ (80058bc <TIM_Base_SetConfig+0x13c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d108      	bne.n	80057d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a35      	ldr	r2, [pc, #212]	@ (80058ac <TIM_Base_SetConfig+0x12c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d02b      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057e0:	d027      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a32      	ldr	r2, [pc, #200]	@ (80058b0 <TIM_Base_SetConfig+0x130>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d023      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a31      	ldr	r2, [pc, #196]	@ (80058b4 <TIM_Base_SetConfig+0x134>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d01f      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a30      	ldr	r2, [pc, #192]	@ (80058b8 <TIM_Base_SetConfig+0x138>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d01b      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a2f      	ldr	r2, [pc, #188]	@ (80058bc <TIM_Base_SetConfig+0x13c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d017      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a2e      	ldr	r2, [pc, #184]	@ (80058c0 <TIM_Base_SetConfig+0x140>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d013      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a2d      	ldr	r2, [pc, #180]	@ (80058c4 <TIM_Base_SetConfig+0x144>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d00f      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a2c      	ldr	r2, [pc, #176]	@ (80058c8 <TIM_Base_SetConfig+0x148>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00b      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a2b      	ldr	r2, [pc, #172]	@ (80058cc <TIM_Base_SetConfig+0x14c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d007      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a2a      	ldr	r2, [pc, #168]	@ (80058d0 <TIM_Base_SetConfig+0x150>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d003      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a29      	ldr	r2, [pc, #164]	@ (80058d4 <TIM_Base_SetConfig+0x154>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d108      	bne.n	8005844 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4313      	orrs	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	4313      	orrs	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a10      	ldr	r2, [pc, #64]	@ (80058ac <TIM_Base_SetConfig+0x12c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d003      	beq.n	8005878 <TIM_Base_SetConfig+0xf8>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a12      	ldr	r2, [pc, #72]	@ (80058bc <TIM_Base_SetConfig+0x13c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d103      	bne.n	8005880 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	691a      	ldr	r2, [r3, #16]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b01      	cmp	r3, #1
 8005890:	d105      	bne.n	800589e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	f023 0201 	bic.w	r2, r3, #1
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	611a      	str	r2, [r3, #16]
  }
}
 800589e:	bf00      	nop
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	40010000 	.word	0x40010000
 80058b0:	40000400 	.word	0x40000400
 80058b4:	40000800 	.word	0x40000800
 80058b8:	40000c00 	.word	0x40000c00
 80058bc:	40010400 	.word	0x40010400
 80058c0:	40014000 	.word	0x40014000
 80058c4:	40014400 	.word	0x40014400
 80058c8:	40014800 	.word	0x40014800
 80058cc:	40001800 	.word	0x40001800
 80058d0:	40001c00 	.word	0x40001c00
 80058d4:	40002000 	.word	0x40002000

080058d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	f023 0201 	bic.w	r2, r3, #1
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4b2b      	ldr	r3, [pc, #172]	@ (80059b0 <TIM_OC1_SetConfig+0xd8>)
 8005904:	4013      	ands	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0303 	bic.w	r3, r3, #3
 800590e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f023 0302 	bic.w	r3, r3, #2
 8005920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4313      	orrs	r3, r2
 800592a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a21      	ldr	r2, [pc, #132]	@ (80059b4 <TIM_OC1_SetConfig+0xdc>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d003      	beq.n	800593c <TIM_OC1_SetConfig+0x64>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a20      	ldr	r2, [pc, #128]	@ (80059b8 <TIM_OC1_SetConfig+0xe0>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d10c      	bne.n	8005956 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f023 0308 	bic.w	r3, r3, #8
 8005942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	4313      	orrs	r3, r2
 800594c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f023 0304 	bic.w	r3, r3, #4
 8005954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a16      	ldr	r2, [pc, #88]	@ (80059b4 <TIM_OC1_SetConfig+0xdc>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d003      	beq.n	8005966 <TIM_OC1_SetConfig+0x8e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a15      	ldr	r2, [pc, #84]	@ (80059b8 <TIM_OC1_SetConfig+0xe0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d111      	bne.n	800598a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800596c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	4313      	orrs	r3, r2
 800597e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4313      	orrs	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	621a      	str	r2, [r3, #32]
}
 80059a4:	bf00      	nop
 80059a6:	371c      	adds	r7, #28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	fffeff8f 	.word	0xfffeff8f
 80059b4:	40010000 	.word	0x40010000
 80059b8:	40010400 	.word	0x40010400

080059bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	f023 0210 	bic.w	r2, r3, #16
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4b2e      	ldr	r3, [pc, #184]	@ (8005aa0 <TIM_OC2_SetConfig+0xe4>)
 80059e8:	4013      	ands	r3, r2
 80059ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	021b      	lsls	r3, r3, #8
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f023 0320 	bic.w	r3, r3, #32
 8005a06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	011b      	lsls	r3, r3, #4
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a23      	ldr	r2, [pc, #140]	@ (8005aa4 <TIM_OC2_SetConfig+0xe8>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d003      	beq.n	8005a24 <TIM_OC2_SetConfig+0x68>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a22      	ldr	r2, [pc, #136]	@ (8005aa8 <TIM_OC2_SetConfig+0xec>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d10d      	bne.n	8005a40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	011b      	lsls	r3, r3, #4
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a18      	ldr	r2, [pc, #96]	@ (8005aa4 <TIM_OC2_SetConfig+0xe8>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d003      	beq.n	8005a50 <TIM_OC2_SetConfig+0x94>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a17      	ldr	r2, [pc, #92]	@ (8005aa8 <TIM_OC2_SetConfig+0xec>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d113      	bne.n	8005a78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	621a      	str	r2, [r3, #32]
}
 8005a92:	bf00      	nop
 8005a94:	371c      	adds	r7, #28
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	feff8fff 	.word	0xfeff8fff
 8005aa4:	40010000 	.word	0x40010000
 8005aa8:	40010400 	.word	0x40010400

08005aac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8005b8c <TIM_OC3_SetConfig+0xe0>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f023 0303 	bic.w	r3, r3, #3
 8005ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	021b      	lsls	r3, r3, #8
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a22      	ldr	r2, [pc, #136]	@ (8005b90 <TIM_OC3_SetConfig+0xe4>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d003      	beq.n	8005b12 <TIM_OC3_SetConfig+0x66>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a21      	ldr	r2, [pc, #132]	@ (8005b94 <TIM_OC3_SetConfig+0xe8>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d10d      	bne.n	8005b2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	021b      	lsls	r3, r3, #8
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a17      	ldr	r2, [pc, #92]	@ (8005b90 <TIM_OC3_SetConfig+0xe4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d003      	beq.n	8005b3e <TIM_OC3_SetConfig+0x92>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a16      	ldr	r2, [pc, #88]	@ (8005b94 <TIM_OC3_SetConfig+0xe8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d113      	bne.n	8005b66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	011b      	lsls	r3, r3, #4
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	011b      	lsls	r3, r3, #4
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	621a      	str	r2, [r3, #32]
}
 8005b80:	bf00      	nop
 8005b82:	371c      	adds	r7, #28
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	fffeff8f 	.word	0xfffeff8f
 8005b90:	40010000 	.word	0x40010000
 8005b94:	40010400 	.word	0x40010400

08005b98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8005c3c <TIM_OC4_SetConfig+0xa4>)
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	021b      	lsls	r3, r3, #8
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005be2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	031b      	lsls	r3, r3, #12
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a13      	ldr	r2, [pc, #76]	@ (8005c40 <TIM_OC4_SetConfig+0xa8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d003      	beq.n	8005c00 <TIM_OC4_SetConfig+0x68>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a12      	ldr	r2, [pc, #72]	@ (8005c44 <TIM_OC4_SetConfig+0xac>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d109      	bne.n	8005c14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	019b      	lsls	r3, r3, #6
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	621a      	str	r2, [r3, #32]
}
 8005c2e:	bf00      	nop
 8005c30:	371c      	adds	r7, #28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	feff8fff 	.word	0xfeff8fff
 8005c40:	40010000 	.word	0x40010000
 8005c44:	40010400 	.word	0x40010400

08005c48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4b1b      	ldr	r3, [pc, #108]	@ (8005ce0 <TIM_OC5_SetConfig+0x98>)
 8005c74:	4013      	ands	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005c88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	041b      	lsls	r3, r3, #16
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a12      	ldr	r2, [pc, #72]	@ (8005ce4 <TIM_OC5_SetConfig+0x9c>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d003      	beq.n	8005ca6 <TIM_OC5_SetConfig+0x5e>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a11      	ldr	r2, [pc, #68]	@ (8005ce8 <TIM_OC5_SetConfig+0xa0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d109      	bne.n	8005cba <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	021b      	lsls	r3, r3, #8
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	621a      	str	r2, [r3, #32]
}
 8005cd4:	bf00      	nop
 8005cd6:	371c      	adds	r7, #28
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	fffeff8f 	.word	0xfffeff8f
 8005ce4:	40010000 	.word	0x40010000
 8005ce8:	40010400 	.word	0x40010400

08005cec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	4b1c      	ldr	r3, [pc, #112]	@ (8005d88 <TIM_OC6_SetConfig+0x9c>)
 8005d18:	4013      	ands	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	021b      	lsls	r3, r3, #8
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	051b      	lsls	r3, r3, #20
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a13      	ldr	r2, [pc, #76]	@ (8005d8c <TIM_OC6_SetConfig+0xa0>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d003      	beq.n	8005d4c <TIM_OC6_SetConfig+0x60>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a12      	ldr	r2, [pc, #72]	@ (8005d90 <TIM_OC6_SetConfig+0xa4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d109      	bne.n	8005d60 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	029b      	lsls	r3, r3, #10
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	621a      	str	r2, [r3, #32]
}
 8005d7a:	bf00      	nop
 8005d7c:	371c      	adds	r7, #28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	feff8fff 	.word	0xfeff8fff
 8005d8c:	40010000 	.word	0x40010000
 8005d90:	40010400 	.word	0x40010400

08005d94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	f023 0201 	bic.w	r2, r3, #1
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f023 030a 	bic.w	r3, r3, #10
 8005dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	621a      	str	r2, [r3, #32]
}
 8005de6:	bf00      	nop
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b087      	sub	sp, #28
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	60f8      	str	r0, [r7, #12]
 8005dfa:	60b9      	str	r1, [r7, #8]
 8005dfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	f023 0210 	bic.w	r2, r3, #16
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	031b      	lsls	r3, r3, #12
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	621a      	str	r2, [r3, #32]
}
 8005e46:	bf00      	nop
 8005e48:	371c      	adds	r7, #28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b085      	sub	sp, #20
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	f043 0307 	orr.w	r3, r3, #7
 8005e74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	609a      	str	r2, [r3, #8]
}
 8005e7c:	bf00      	nop
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
 8005e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ea2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	021a      	lsls	r2, r3, #8
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	609a      	str	r2, [r3, #8]
}
 8005ebc:	bf00      	nop
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f003 031f 	and.w	r3, r3, #31
 8005eda:	2201      	movs	r2, #1
 8005edc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a1a      	ldr	r2, [r3, #32]
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	43db      	mvns	r3, r3
 8005eea:	401a      	ands	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6a1a      	ldr	r2, [r3, #32]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f003 031f 	and.w	r3, r3, #31
 8005efa:	6879      	ldr	r1, [r7, #4]
 8005efc:	fa01 f303 	lsl.w	r3, r1, r3
 8005f00:	431a      	orrs	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	621a      	str	r2, [r3, #32]
}
 8005f06:	bf00      	nop
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
	...

08005f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e06d      	b.n	8006008 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a30      	ldr	r2, [pc, #192]	@ (8006014 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d004      	beq.n	8005f60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a2f      	ldr	r2, [pc, #188]	@ (8006018 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d108      	bne.n	8005f72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005f66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a20      	ldr	r2, [pc, #128]	@ (8006014 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d022      	beq.n	8005fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f9e:	d01d      	beq.n	8005fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800601c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d018      	beq.n	8005fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a1c      	ldr	r2, [pc, #112]	@ (8006020 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d013      	beq.n	8005fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a1a      	ldr	r2, [pc, #104]	@ (8006024 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d00e      	beq.n	8005fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a15      	ldr	r2, [pc, #84]	@ (8006018 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d009      	beq.n	8005fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a16      	ldr	r2, [pc, #88]	@ (8006028 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d004      	beq.n	8005fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a15      	ldr	r2, [pc, #84]	@ (800602c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d10c      	bne.n	8005ff6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fe2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	40010000 	.word	0x40010000
 8006018:	40010400 	.word	0x40010400
 800601c:	40000400 	.word	0x40000400
 8006020:	40000800 	.word	0x40000800
 8006024:	40000c00 	.word	0x40000c00
 8006028:	40014000 	.word	0x40014000
 800602c:	40001800 	.word	0x40001800

08006030 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800603a:	2300      	movs	r3, #0
 800603c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006044:	2b01      	cmp	r3, #1
 8006046:	d101      	bne.n	800604c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006048:	2302      	movs	r3, #2
 800604a:	e065      	b.n	8006118 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	4313      	orrs	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	4313      	orrs	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	4313      	orrs	r3, r2
 800607c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4313      	orrs	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	4313      	orrs	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	041b      	lsls	r3, r3, #16
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a16      	ldr	r2, [pc, #88]	@ (8006124 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d004      	beq.n	80060da <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a14      	ldr	r2, [pc, #80]	@ (8006128 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d115      	bne.n	8006106 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e4:	051b      	lsls	r3, r3, #20
 80060e6:	4313      	orrs	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	4313      	orrs	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	40010000 	.word	0x40010000
 8006128:	40010400 	.word	0x40010400

0800612c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <memset>:
 8006168:	4402      	add	r2, r0
 800616a:	4603      	mov	r3, r0
 800616c:	4293      	cmp	r3, r2
 800616e:	d100      	bne.n	8006172 <memset+0xa>
 8006170:	4770      	bx	lr
 8006172:	f803 1b01 	strb.w	r1, [r3], #1
 8006176:	e7f9      	b.n	800616c <memset+0x4>

08006178 <__libc_init_array>:
 8006178:	b570      	push	{r4, r5, r6, lr}
 800617a:	4d0d      	ldr	r5, [pc, #52]	@ (80061b0 <__libc_init_array+0x38>)
 800617c:	4c0d      	ldr	r4, [pc, #52]	@ (80061b4 <__libc_init_array+0x3c>)
 800617e:	1b64      	subs	r4, r4, r5
 8006180:	10a4      	asrs	r4, r4, #2
 8006182:	2600      	movs	r6, #0
 8006184:	42a6      	cmp	r6, r4
 8006186:	d109      	bne.n	800619c <__libc_init_array+0x24>
 8006188:	4d0b      	ldr	r5, [pc, #44]	@ (80061b8 <__libc_init_array+0x40>)
 800618a:	4c0c      	ldr	r4, [pc, #48]	@ (80061bc <__libc_init_array+0x44>)
 800618c:	f000 f85c 	bl	8006248 <_init>
 8006190:	1b64      	subs	r4, r4, r5
 8006192:	10a4      	asrs	r4, r4, #2
 8006194:	2600      	movs	r6, #0
 8006196:	42a6      	cmp	r6, r4
 8006198:	d105      	bne.n	80061a6 <__libc_init_array+0x2e>
 800619a:	bd70      	pop	{r4, r5, r6, pc}
 800619c:	f855 3b04 	ldr.w	r3, [r5], #4
 80061a0:	4798      	blx	r3
 80061a2:	3601      	adds	r6, #1
 80061a4:	e7ee      	b.n	8006184 <__libc_init_array+0xc>
 80061a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80061aa:	4798      	blx	r3
 80061ac:	3601      	adds	r6, #1
 80061ae:	e7f2      	b.n	8006196 <__libc_init_array+0x1e>
 80061b0:	08006280 	.word	0x08006280
 80061b4:	08006280 	.word	0x08006280
 80061b8:	08006280 	.word	0x08006280
 80061bc:	08006284 	.word	0x08006284

080061c0 <round>:
 80061c0:	ee10 3a90 	vmov	r3, s1
 80061c4:	f3c3 510a 	ubfx	r1, r3, #20, #11
 80061c8:	f2a1 32ff 	subw	r2, r1, #1023	@ 0x3ff
 80061cc:	2a13      	cmp	r2, #19
 80061ce:	b510      	push	{r4, lr}
 80061d0:	ee10 4a10 	vmov	r4, s0
 80061d4:	dc1d      	bgt.n	8006212 <round+0x52>
 80061d6:	2a00      	cmp	r2, #0
 80061d8:	da0d      	bge.n	80061f6 <round+0x36>
 80061da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061de:	3201      	adds	r2, #1
 80061e0:	bf04      	itt	eq
 80061e2:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 80061e6:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 80061ea:	2200      	movs	r2, #0
 80061ec:	4619      	mov	r1, r3
 80061ee:	4610      	mov	r0, r2
 80061f0:	ec41 0b10 	vmov	d0, r0, r1
 80061f4:	e014      	b.n	8006220 <round+0x60>
 80061f6:	4813      	ldr	r0, [pc, #76]	@ (8006244 <round+0x84>)
 80061f8:	4110      	asrs	r0, r2
 80061fa:	ea00 0103 	and.w	r1, r0, r3
 80061fe:	4321      	orrs	r1, r4
 8006200:	d00e      	beq.n	8006220 <round+0x60>
 8006202:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8006206:	fa41 f202 	asr.w	r2, r1, r2
 800620a:	4413      	add	r3, r2
 800620c:	ea23 0300 	bic.w	r3, r3, r0
 8006210:	e7eb      	b.n	80061ea <round+0x2a>
 8006212:	2a33      	cmp	r2, #51	@ 0x33
 8006214:	dd05      	ble.n	8006222 <round+0x62>
 8006216:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800621a:	d101      	bne.n	8006220 <round+0x60>
 800621c:	ee30 0b00 	vadd.f64	d0, d0, d0
 8006220:	bd10      	pop	{r4, pc}
 8006222:	f2a1 4113 	subw	r1, r1, #1043	@ 0x413
 8006226:	f04f 30ff 	mov.w	r0, #4294967295
 800622a:	40c8      	lsrs	r0, r1
 800622c:	4220      	tst	r0, r4
 800622e:	d0f7      	beq.n	8006220 <round+0x60>
 8006230:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8006234:	2201      	movs	r2, #1
 8006236:	408a      	lsls	r2, r1
 8006238:	1912      	adds	r2, r2, r4
 800623a:	bf28      	it	cs
 800623c:	3301      	addcs	r3, #1
 800623e:	ea22 0200 	bic.w	r2, r2, r0
 8006242:	e7d3      	b.n	80061ec <round+0x2c>
 8006244:	000fffff 	.word	0x000fffff

08006248 <_init>:
 8006248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624a:	bf00      	nop
 800624c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800624e:	bc08      	pop	{r3}
 8006250:	469e      	mov	lr, r3
 8006252:	4770      	bx	lr

08006254 <_fini>:
 8006254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006256:	bf00      	nop
 8006258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800625a:	bc08      	pop	{r3}
 800625c:	469e      	mov	lr, r3
 800625e:	4770      	bx	lr
